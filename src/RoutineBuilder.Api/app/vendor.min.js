!function(e,t,n){"use strict";function r(e,t){return t=t||Error,function(){var n,r,i=2,o=arguments,a=o[0],s="["+(e?e+":":"")+a+"] ",c=o[1];for(s+=c.replace(/\{\d+\}/g,function(e){var t=+e.slice(1,-1),n=t+i;return n<o.length?be(o[n]):e}),s+="\nhttp://errors.angularjs.org/1.4.8/"+(e?e+"/":"")+a,r=i,n="?";r<o.length;r++,n="&")s+=n+"p"+(r-i)+"="+encodeURIComponent(be(o[r]));return new t(s)}}function i(e){if(null==e||T(e))return!1;if(Vr(e)||C(e)||Sr&&e instanceof Sr)return!0;var t="length"in Object(e)&&e.length;return w(t)&&(t>=0&&t-1 in e||"function"==typeof e.item)}function o(e,t,n){var r,a;if(e)if(A(e))for(r in e)"prototype"==r||"length"==r||"name"==r||e.hasOwnProperty&&!e.hasOwnProperty(r)||t.call(n,e[r],r,e);else if(Vr(e)||i(e)){var s="object"!=typeof e;for(r=0,a=e.length;a>r;r++)(s||r in e)&&t.call(n,e[r],r,e)}else if(e.forEach&&e.forEach!==o)e.forEach(t,n,e);else if(M(e))for(r in e)t.call(n,e[r],r,e);else if("function"==typeof e.hasOwnProperty)for(r in e)e.hasOwnProperty(r)&&t.call(n,e[r],r,e);else for(r in e)wr.call(e,r)&&t.call(n,e[r],r,e);return e}function a(e,t,n){for(var r=Object.keys(e).sort(),i=0;i<r.length;i++)t.call(n,e[r[i]],r[i]);return r}function s(e){return function(t,n){e(n,t)}}function c(){return++Fr}function l(e,t){t?e.$$hashKey=t:delete e.$$hashKey}function d(e,t,n){for(var r=e.$$hashKey,i=0,o=t.length;o>i;++i){var a=t[i];if(y(a)||A(a))for(var s=Object.keys(a),c=0,u=s.length;u>c;c++){var m=s[c],f=a[m];n&&y(f)?x(f)?e[m]=new Date(f.valueOf()):k(f)?e[m]=new RegExp(f):f.nodeName?e[m]=f.cloneNode(!0):R(f)?e[m]=f.clone():(y(e[m])||(e[m]=Vr(f)?[]:{}),d(e[m],[f],!0)):e[m]=f}}return l(e,r),e}function u(e){return d(e,Dr.call(arguments,1),!1)}function m(e){return d(e,Dr.call(arguments,1),!0)}function f(e){return parseInt(e,10)}function p(e,t){return u(Object.create(e),t)}function h(){}function g(e){return e}function v(e){return function(){return e}}function $(e){return A(e.toString)&&e.toString!==Ir}function b(e){return"undefined"==typeof e}function E(e){return"undefined"!=typeof e}function y(e){return null!==e&&"object"==typeof e}function M(e){return null!==e&&"object"==typeof e&&!Rr(e)}function C(e){return"string"==typeof e}function w(e){return"number"==typeof e}function x(e){return"[object Date]"===Ir.call(e)}function A(e){return"function"==typeof e}function k(e){return"[object RegExp]"===Ir.call(e)}function T(e){return e&&e.window===e}function S(e){return e&&e.$evalAsync&&e.$watch}function N(e){return"[object File]"===Ir.call(e)}function _(e){return"[object FormData]"===Ir.call(e)}function D(e){return"[object Blob]"===Ir.call(e)}function H(e){return"boolean"==typeof e}function O(e){return e&&A(e.then)}function I(e){return e&&w(e.length)&&Br.test(Ir.call(e))}function R(e){return!(!e||!(e.nodeName||e.prop&&e.attr&&e.find))}function P(e){var t,n={},r=e.split(",");for(t=0;t<r.length;t++)n[r[t]]=!0;return n}function L(e){return Cr(e.nodeName||e[0]&&e[0].nodeName)}function F(e,t){var n=e.indexOf(t);return n>=0&&e.splice(n,1),n}function j(e,t){function n(e,t){var n,i=t.$$hashKey;if(Vr(e))for(var o=0,a=e.length;a>o;o++)t.push(r(e[o]));else if(M(e))for(n in e)t[n]=r(e[n]);else if(e&&"function"==typeof e.hasOwnProperty)for(n in e)e.hasOwnProperty(n)&&(t[n]=r(e[n]));else for(n in e)wr.call(e,n)&&(t[n]=r(e[n]));return l(t,i),t}function r(e){if(!y(e))return e;var t=i.indexOf(e);if(-1!==t)return a[t];if(T(e)||S(e))throw Pr("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r,o=!1;return Vr(e)?(r=[],o=!0):I(e)?r=new e.constructor(e):x(e)?r=new Date(e.getTime()):k(e)?(r=new RegExp(e.source,e.toString().match(/[^\/]*$/)[0]),r.lastIndex=e.lastIndex):A(e.cloneNode)?r=e.cloneNode(!0):(r=Object.create(Rr(e)),o=!0),i.push(e),a.push(r),o?n(e,r):r}var i=[],a=[];if(t){if(I(t))throw Pr("cpta","Can't copy! TypedArray destination cannot be mutated.");if(e===t)throw Pr("cpi","Can't copy! Source and destination are identical.");return Vr(t)?t.length=0:o(t,function(e,n){"$$hashKey"!==n&&delete t[n]}),i.push(e),a.push(t),n(e,t)}return r(e)}function V(e,t){if(Vr(e)){t=t||[];for(var n=0,r=e.length;r>n;n++)t[n]=e[n]}else if(y(e)){t=t||{};for(var i in e)("$"!==i.charAt(0)||"$"!==i.charAt(1))&&(t[i]=e[i])}return t||e}function B(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e!==e&&t!==t)return!0;var n,r,i,o=typeof e,a=typeof t;if(o==a&&"object"==o){if(!Vr(e)){if(x(e))return x(t)?B(e.getTime(),t.getTime()):!1;if(k(e))return k(t)?e.toString()==t.toString():!1;if(S(e)||S(t)||T(e)||T(t)||Vr(t)||x(t)||k(t))return!1;i=ge();for(r in e)if("$"!==r.charAt(0)&&!A(e[r])){if(!B(e[r],t[r]))return!1;i[r]=!0}for(r in t)if(!(r in i)&&"$"!==r.charAt(0)&&E(t[r])&&!A(t[r]))return!1;return!0}if(!Vr(t))return!1;if((n=e.length)==t.length){for(r=0;n>r;r++)if(!B(e[r],t[r]))return!1;return!0}}return!1}function U(e,t,n){return e.concat(Dr.call(t,n))}function q(e,t){return Dr.call(e,t||0)}function z(e,t){var n=arguments.length>2?q(arguments,2):[];return!A(t)||t instanceof RegExp?t:n.length?function(){return arguments.length?t.apply(e,U(n,arguments,0)):t.apply(e,n)}:function(){return arguments.length?t.apply(e,arguments):t.call(e)}}function W(e,r){var i=r;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?i=n:T(r)?i="$WINDOW":r&&t===r?i="$DOCUMENT":S(r)&&(i="$SCOPE"),i}function Y(e,t){return"undefined"==typeof e?n:(w(t)||(t=t?2:null),JSON.stringify(e,W,t))}function K(e){return C(e)?JSON.parse(e):e}function G(e,t){var n=Date.parse("Jan 01, 1970 00:00:00 "+e)/6e4;return isNaN(n)?t:n}function X(e,t){return e=new Date(e.getTime()),e.setMinutes(e.getMinutes()+t),e}function Z(e,t,n){n=n?-1:1;var r=G(t,e.getTimezoneOffset());return X(e,n*(r-e.getTimezoneOffset()))}function J(e){e=Sr(e).clone();try{e.empty()}catch(t){}var n=Sr("<div>").append(e).html();try{return e[0].nodeType===Jr?Cr(n):n.match(/^(<[^>]+>)/)[1].replace(/^<([\w\-]+)/,function(e,t){return"<"+Cr(t)})}catch(t){return Cr(n)}}function Q(e){try{return decodeURIComponent(e)}catch(t){}}function ee(e){var t={};return o((e||"").split("&"),function(e){var n,r,i;e&&(r=e=e.replace(/\+/g,"%20"),n=e.indexOf("="),-1!==n&&(r=e.substring(0,n),i=e.substring(n+1)),r=Q(r),E(r)&&(i=E(i)?Q(i):!0,wr.call(t,r)?Vr(t[r])?t[r].push(i):t[r]=[t[r],i]:t[r]=i))}),t}function te(e){var t=[];return o(e,function(e,n){Vr(e)?o(e,function(e){t.push(re(n,!0)+(e===!0?"":"="+re(e,!0)))}):t.push(re(n,!0)+(e===!0?"":"="+re(e,!0)))}),t.length?t.join("&"):""}function ne(e){return re(e,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function re(e,t){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,t?"%20":"+")}function ie(e,t){var n,r,i=Yr.length;for(r=0;i>r;++r)if(n=Yr[r]+t,C(n=e.getAttribute(n)))return n;return null}function oe(e,t){var n,r,i={};o(Yr,function(t){var i=t+"app";!n&&e.hasAttribute&&e.hasAttribute(i)&&(n=e,r=e.getAttribute(i))}),o(Yr,function(t){var i,o=t+"app";!n&&(i=e.querySelector("["+o.replace(":","\\:")+"]"))&&(n=i,r=i.getAttribute(o))}),n&&(i.strictDi=null!==ie(n,"strict-di"),t(n,r?[r]:[],i))}function ae(n,r,i){y(i)||(i={});var a={strictDi:!1};i=u(a,i);var s=function(){if(n=Sr(n),n.injector()){var e=n[0]===t?"document":J(n);throw Pr("btstrpd","App Already Bootstrapped with this Element '{0}'",e.replace(/</,"&lt;").replace(/>/,"&gt;"))}r=r||[],r.unshift(["$provide",function(e){e.value("$rootElement",n)}]),i.debugInfoEnabled&&r.push(["$compileProvider",function(e){e.debugInfoEnabled(!0)}]),r.unshift("ng");var o=et(r,i.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(e,t,n,r){e.$apply(function(){t.data("$injector",r),n(t)(e)})}]),o},c=/^NG_ENABLE_DEBUG_INFO!/,l=/^NG_DEFER_BOOTSTRAP!/;return e&&c.test(e.name)&&(i.debugInfoEnabled=!0,e.name=e.name.replace(c,"")),e&&!l.test(e.name)?s():(e.name=e.name.replace(l,""),Lr.resumeBootstrap=function(e){return o(e,function(e){r.push(e)}),s()},void(A(Lr.resumeDeferredBootstrap)&&Lr.resumeDeferredBootstrap()))}function se(){e.name="NG_ENABLE_DEBUG_INFO!"+e.name,e.location.reload()}function ce(e){var t=Lr.element(e).injector();if(!t)throw Pr("test","no injector found for element argument to getTestability");return t.get("$$testability")}function le(e,t){return t=t||"_",e.replace(Kr,function(e,n){return(n?t:"")+e.toLowerCase()})}function de(){var t;if(!Gr){var r=Wr();Nr=b(r)?e.jQuery:r?e[r]:n,Nr&&Nr.fn.on?(Sr=Nr,u(Nr.fn,{scope:vi.scope,isolateScope:vi.isolateScope,controller:vi.controller,injector:vi.injector,inheritedData:vi.inheritedData}),t=Nr.cleanData,Nr.cleanData=function(e){var n;if(jr)jr=!1;else for(var r,i=0;null!=(r=e[i]);i++)n=Nr._data(r,"events"),n&&n.$destroy&&Nr(r).triggerHandler("$destroy");t(e)}):Sr=Te,Lr.element=Sr,Gr=!0}}function ue(e,t,n){if(!e)throw Pr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function me(e,t,n){return n&&Vr(e)&&(e=e[e.length-1]),ue(A(e),t,"not a function, got "+(e&&"object"==typeof e?e.constructor.name||"Object":typeof e)),e}function fe(e,t){if("hasOwnProperty"===e)throw Pr("badname","hasOwnProperty is not a valid {0} name",t)}function pe(e,t,n){if(!t)return e;for(var r,i=t.split("."),o=e,a=i.length,s=0;a>s;s++)r=i[s],e&&(e=(o=e)[r]);return!n&&A(e)?z(o,e):e}function he(e){for(var t,n=e[0],r=e[e.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(t||e[i]!==n)&&(t||(t=Sr(Dr.call(e,0,i))),t.push(n));return t||e}function ge(){return Object.create(null)}function ve(e){function t(e,t,n){return e[t]||(e[t]=n())}var n=r("$injector"),i=r("ng"),o=t(e,"angular",Object);return o.$$minErr=o.$$minErr||r,t(o,"module",function(){var e={};return function(r,o,a){var s=function(e,t){if("hasOwnProperty"===e)throw i("badname","hasOwnProperty is not a valid {0} name",t)};return s(r,"module"),o&&e.hasOwnProperty(r)&&(e[r]=null),t(e,r,function(){function e(e,t,n,r){return r||(r=i),function(){return r[n||"push"]([e,t,arguments]),d}}function t(e,t){return function(n,o){return o&&A(o)&&(o.$$moduleName=r),i.push([e,t,arguments]),d}}if(!o)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var i=[],s=[],c=[],l=e("$injector","invoke","push",s),d={_invokeQueue:i,_configBlocks:s,_runBlocks:c,requires:o,name:r,provider:t("$provide","provider"),factory:t("$provide","factory"),service:t("$provide","service"),value:e("$provide","value"),constant:e("$provide","constant","unshift"),decorator:t("$provide","decorator"),animation:t("$animateProvider","register"),filter:t("$filterProvider","register"),controller:t("$controllerProvider","register"),directive:t("$compileProvider","directive"),config:l,run:function(e){return c.push(e),this}};return a&&l(a),d})}})}function $e(e){var t=[];return JSON.stringify(e,function(e,n){if(n=W(e,n),y(n)){if(t.indexOf(n)>=0)return"...";t.push(n)}return n})}function be(e){return"function"==typeof e?e.toString().replace(/ \{[\s\S]*$/,""):b(e)?"undefined":"string"!=typeof e?$e(e):e}function Ee(t){u(t,{bootstrap:ae,copy:j,extend:u,merge:m,equals:B,element:Sr,forEach:o,injector:et,noop:h,bind:z,toJson:Y,fromJson:K,identity:g,isUndefined:b,isDefined:E,isString:C,isFunction:A,isObject:y,isNumber:w,isElement:R,isArray:Vr,version:ni,isDate:x,lowercase:Cr,uppercase:xr,callbacks:{counter:0},getTestability:ce,$$minErr:r,$$csp:zr,reloadWithDebugInfo:se}),(_r=ve(e))("ng",["ngLocale"],["$provide",function(e){e.provider({$$sanitizeUri:bn}),e.provider("$compile",dt).directive({a:$o,input:Io,textarea:Io,form:Co,script:ka,select:Na,style:Da,option:_a,ngBind:Lo,ngBindHtml:jo,ngBindTemplate:Fo,ngClass:Bo,ngClassEven:qo,ngClassOdd:Uo,ngCloak:zo,ngController:Wo,ngForm:wo,ngHide:ya,ngIf:Go,ngInclude:Xo,ngInit:Jo,ngNonBindable:ma,ngPluralize:ga,ngRepeat:va,ngShow:Ea,ngStyle:Ma,ngSwitch:Ca,ngSwitchWhen:wa,ngSwitchDefault:xa,ngOptions:ha,ngTransclude:Aa,ngModel:la,ngList:Qo,ngChange:Vo,pattern:Oa,ngPattern:Oa,required:Ha,ngRequired:Ha,minlength:Ra,ngMinlength:Ra,maxlength:Ia,ngMaxlength:Ia,ngValue:Po,ngModelOptions:ua}).directive({ngInclude:Zo}).directive(bo).directive(Yo),e.provider({$anchorScroll:tt,$animate:Di,$animateCss:Hi,$$animateQueue:_i,$$AnimateRunner:Ni,$browser:st,$cacheFactory:ct,$controller:ht,$document:gt,$exceptionHandler:vt,$filter:Hn,$$forceReflow:Li,$interpolate:_t,$interval:Dt,$http:kt,$httpParamSerializer:bt,$httpParamSerializerJQLike:Et,$httpBackend:St,$xhrFactory:Tt,$location:Wt,$log:Yt,$parse:fn,$rootScope:$n,$q:pn,$$q:hn,$sce:Cn,$sceDelegate:Mn,$sniffer:wn,$templateCache:lt,$templateRequest:xn,$$testability:An,$timeout:kn,$window:Nn,$$rAF:vn,$$jqLite:Ge,$$HashMap:yi,$$cookieReader:Dn})}])}function ye(){return++ii}function Me(e){return e.replace(si,function(e,t,n,r){return r?n.toUpperCase():n}).replace(ci,"Moz$1")}function Ce(e){return!mi.test(e)}function we(e){var t=e.nodeType;return t===Xr||!t||t===ei}function xe(e){for(var t in ri[e.ng339])return!0;return!1}function Ae(e,t){var n,r,i,a,s=t.createDocumentFragment(),c=[];if(Ce(e))c.push(t.createTextNode(e));else{for(n=n||s.appendChild(t.createElement("div")),r=(fi.exec(e)||["",""])[1].toLowerCase(),i=hi[r]||hi._default,n.innerHTML=i[1]+e.replace(pi,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;c=U(c,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",o(c,function(e){s.appendChild(e)}),s}function ke(e,n){n=n||t;var r;return(r=ui.exec(e))?[n.createElement(r[1])]:(r=Ae(e,n))?r.childNodes:[]}function Te(e){if(e instanceof Te)return e;var t;if(C(e)&&(e=Ur(e),t=!0),!(this instanceof Te)){if(t&&"<"!=e.charAt(0))throw di("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new Te(e)}t?Le(this,ke(e)):Le(this,e)}function Se(e){return e.cloneNode(!0)}function Ne(e,t){if(t||De(e),e.querySelectorAll)for(var n=e.querySelectorAll("*"),r=0,i=n.length;i>r;r++)De(n[r])}function _e(e,t,n,r){if(E(r))throw di("offargs","jqLite#off() does not support the `selector` argument");var i=He(e),a=i&&i.events,s=i&&i.handle;if(s)if(t){var c=function(t){var r=a[t];E(n)&&F(r||[],n),E(n)&&r&&r.length>0||(ai(e,t,s),delete a[t])};o(t.split(" "),function(e){c(e),li[e]&&c(li[e])})}else for(t in a)"$destroy"!==t&&ai(e,t,s),delete a[t]}function De(e,t){var r=e.ng339,i=r&&ri[r];if(i){if(t)return void delete i.data[t];i.handle&&(i.events.$destroy&&i.handle({},"$destroy"),_e(e)),delete ri[r],e.ng339=n}}function He(e,t){var r=e.ng339,i=r&&ri[r];return t&&!i&&(e.ng339=r=ye(),i=ri[r]={events:{},data:{},handle:n}),i}function Oe(e,t,n){if(we(e)){var r=E(n),i=!r&&t&&!y(t),o=!t,a=He(e,!i),s=a&&a.data;if(r)s[t]=n;else{if(o)return s;if(i)return s&&s[t];u(s,t)}}}function Ie(e,t){return e.getAttribute?(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+t+" ")>-1:!1}function Re(e,t){t&&e.setAttribute&&o(t.split(" "),function(t){e.setAttribute("class",Ur((" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+Ur(t)+" "," ")))})}function Pe(e,t){if(t&&e.setAttribute){var n=(" "+(e.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(t.split(" "),function(e){e=Ur(e),-1===n.indexOf(" "+e+" ")&&(n+=e+" ")}),e.setAttribute("class",Ur(n))}}function Le(e,t){if(t)if(t.nodeType)e[e.length++]=t;else{var n=t.length;if("number"==typeof n&&t.window!==t){if(n)for(var r=0;n>r;r++)e[e.length++]=t[r]}else e[e.length++]=t}}function Fe(e,t){return je(e,"$"+(t||"ngController")+"Controller")}function je(e,t,n){e.nodeType==ei&&(e=e.documentElement);for(var r=Vr(t)?t:[t];e;){for(var i=0,o=r.length;o>i;i++)if(E(n=Sr.data(e,r[i])))return n;e=e.parentNode||e.nodeType===ti&&e.host}}function Ve(e){for(Ne(e,!0);e.firstChild;)e.removeChild(e.firstChild)}function Be(e,t){t||Ne(e);var n=e.parentNode;n&&n.removeChild(e)}function Ue(t,n){n=n||e,"complete"===n.document.readyState?n.setTimeout(t):Sr(n).on("load",t)}function qe(e,t){var n=$i[t.toLowerCase()];return n&&bi[L(e)]&&n}function ze(e){return Ei[e]}function We(e,t){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=t[r||n.type],o=i?i.length:0;if(o){if(b(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return n.immediatePropagationStopped===!0};var s=i.specialHandlerWrapper||Ye;o>1&&(i=V(i));for(var c=0;o>c;c++)n.isImmediatePropagationStopped()||s(e,n,i[c])}};return n.elem=e,n}function Ye(e,t,n){n.call(e,t)}function Ke(e,t,n){var r=t.relatedTarget;(!r||r!==e&&!gi.call(e,r))&&n.call(e,t)}function Ge(){this.$get=function(){return u(Te,{hasClass:function(e,t){return e.attr&&(e=e[0]),Ie(e,t)},addClass:function(e,t){return e.attr&&(e=e[0]),Pe(e,t)},removeClass:function(e,t){return e.attr&&(e=e[0]),Re(e,t)}})}}function Xe(e,t){var n=e&&e.$$hashKey;if(n)return"function"==typeof n&&(n=e.$$hashKey()),n;var r=typeof e;return n="function"==r||"object"==r&&null!==e?e.$$hashKey=r+":"+(t||c)():r+":"+e}function Ze(e,t){if(t){var n=0;this.nextUid=function(){return++n}}o(e,this.put,this)}function Je(e){var t=e.toString().replace(xi,""),n=t.match(Mi);return n?"function("+(n[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function Qe(e,t,n){var r,i,a,s;if("function"==typeof e){if(!(r=e.$inject)){if(r=[],e.length){if(t)throw C(n)&&n||(n=e.name||Je(e)),Ai("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=e.toString().replace(xi,""),a=i.match(Mi),o(a[1].split(Ci),function(e){e.replace(wi,function(e,t,n){r.push(n)})})}e.$inject=r}}else Vr(e)?(s=e.length-1,me(e[s],"fn"),r=e.slice(0,s)):me(e,"fn",!0);return r}function et(e,t){function r(e){return function(t,n){return y(t)?void o(t,s(e)):e(t,n)}}function i(e,t){if(fe(e,"service"),(A(t)||Vr(t))&&(t=w.instantiate(t)),!t.$get)throw Ai("pget","Provider '{0}' must define $get factory method.",e);return M[e+g]=t}function a(e,t){return function(){var n=k.invoke(t,this);if(b(n))throw Ai("undef","Provider '{0}' must return a value from $get factory method.",e);return n}}function c(e,t,n){return i(e,{$get:n!==!1?a(e,t):t})}function l(e,t){return c(e,["$injector",function(e){return e.instantiate(t)}])}function d(e,t){return c(e,v(t),!1)}function u(e,t){fe(e,"constant"),M[e]=t,x[e]=t}function m(e,t){var n=w.get(e+g),r=n.$get;n.$get=function(){var e=k.invoke(r,n);return k.invoke(t,null,{$delegate:e})}}function f(e){ue(b(e)||Vr(e),"modulesToLoad","not an array");var t,n=[];return o(e,function(e){function r(e){var t,n;for(t=0,n=e.length;n>t;t++){var r=e[t],i=w.get(r[0]);i[r[1]].apply(i,r[2])}}if(!E.get(e)){E.put(e,!0);try{C(e)?(t=_r(e),n=n.concat(f(t.requires)).concat(t._runBlocks),r(t._invokeQueue),r(t._configBlocks)):A(e)?n.push(w.invoke(e)):Vr(e)?n.push(w.invoke(e)):me(e,"module")}catch(i){throw Vr(e)&&(e=e[e.length-1]),i.message&&i.stack&&-1==i.stack.indexOf(i.message)&&(i=i.message+"\n"+i.stack),Ai("modulerr","Failed to instantiate module {0} due to:\n{1}",e,i.stack||i.message||i)}}}),n}function p(e,n){function r(t,r){if(e.hasOwnProperty(t)){if(e[t]===h)throw Ai("cdep","Circular dependency found: {0}",t+" <- "+$.join(" <- "));return e[t]}try{return $.unshift(t),e[t]=h,e[t]=n(t,r)}catch(i){throw e[t]===h&&delete e[t],i}finally{$.shift()}}function i(e,n,i,o){"string"==typeof i&&(o=i,i=null);var a,s,c,l=[],d=et.$$annotate(e,t,o);for(s=0,a=d.length;a>s;s++){if(c=d[s],"string"!=typeof c)throw Ai("itkn","Incorrect injection token! Expected service name as string, got {0}",c);l.push(i&&i.hasOwnProperty(c)?i[c]:r(c,o))}return Vr(e)&&(e=e[a]),e.apply(n,l)}function o(e,t,n){var r=Object.create((Vr(e)?e[e.length-1]:e).prototype||null),o=i(e,r,t,n);return y(o)||A(o)?o:r}return{invoke:i,instantiate:o,get:r,annotate:et.$$annotate,has:function(t){return M.hasOwnProperty(t+g)||e.hasOwnProperty(t)}}}t=t===!0;var h={},g="Provider",$=[],E=new Ze([],!0),M={$provide:{provider:r(i),factory:r(c),service:r(l),value:r(d),constant:r(u),decorator:m}},w=M.$injector=p(M,function(e,t){throw Lr.isString(t)&&$.push(t),Ai("unpr","Unknown provider: {0}",$.join(" <- "))}),x={},k=x.$injector=p(x,function(e,t){var r=w.get(e+g,t);return k.invoke(r.$get,r,n,e)});return o(f(e),function(e){e&&k.invoke(e)}),k}function tt(){var e=!0;this.disableAutoScrolling=function(){e=!1},this.$get=["$window","$location","$rootScope",function(t,n,r){function i(e){var t=null;return Array.prototype.some.call(e,function(e){return"a"===L(e)?(t=e,!0):void 0}),t}function o(){var e=s.yOffset;if(A(e))e=e();else if(R(e)){var n=e[0],r=t.getComputedStyle(n);e="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else w(e)||(e=0);return e}function a(e){if(e){e.scrollIntoView();var n=o();if(n){var r=e.getBoundingClientRect().top;t.scrollBy(0,r-n)}}else t.scrollTo(0,0)}function s(e){e=C(e)?e:n.hash();var t;e?(t=c.getElementById(e))?a(t):(t=i(c.getElementsByName(e)))?a(t):"top"===e&&a(null):a(null)}var c=t.document;return e&&r.$watch(function(){return n.hash()},function(e,t){(e!==t||""!==e)&&Ue(function(){r.$evalAsync(s)})}),s}]}function nt(e,t){return e||t?e?t?(Vr(e)&&(e=e.join(" ")),Vr(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function rt(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType===Ti)return n}}function it(e){C(e)&&(e=e.split(" "));var t=ge();return o(e,function(e){e.length&&(t[e]=!0)}),t}function ot(e){return y(e)?e:{}}function at(e,t,n,r){function i(e){try{e.apply(null,q(arguments,1))}finally{if($--,0===$)for(;E.length;)try{E.pop()()}catch(t){n.error(t)}}}function a(e){var t=e.indexOf("#");return-1===t?"":e.substr(t)}function s(){x=null,l(),d()}function c(){try{return f.state}catch(e){}}function l(){y=c(),y=b(y)?null:y,B(y,T)&&(y=T),T=y}function d(){(C!==u.url()||M!==y)&&(C=u.url(),M=y,o(A,function(e){e(u.url(),y)}))}var u=this,m=(t[0],e.location),f=e.history,p=e.setTimeout,g=e.clearTimeout,v={};u.isMock=!1;var $=0,E=[];u.$$completeOutstandingRequest=i,u.$$incOutstandingRequestCount=function(){$++},u.notifyWhenNoOutstandingRequests=function(e){0===$?e():E.push(e)};var y,M,C=m.href,w=t.find("base"),x=null;l(),M=y,u.url=function(t,n,i){if(b(i)&&(i=null),m!==e.location&&(m=e.location),f!==e.history&&(f=e.history),t){var o=M===i;if(C===t&&(!r.history||o))return u;var s=C&&Pt(C)===Pt(t);return C=t,M=i,!r.history||s&&o?((!s||x)&&(x=t),n?m.replace(t):s?m.hash=a(t):m.href=t,m.href!==t&&(x=t)):(f[n?"replaceState":"pushState"](i,"",t),l(),M=y),u}return x||m.href.replace(/%27/g,"'")},u.state=function(){return y};var A=[],k=!1,T=null;u.onUrlChange=function(t){return k||(r.history&&Sr(e).on("popstate",s),Sr(e).on("hashchange",s),k=!0),A.push(t),t},u.$$applicationDestroyed=function(){Sr(e).off("hashchange popstate",s)},u.$$checkUrlChange=d,u.baseHref=function(){var e=w.attr("href");return e?e.replace(/^(https?\:)?\/\/[^\/]*/,""):""},u.defer=function(e,t){var n;return $++,n=p(function(){delete v[n],i(e)},t||0),v[n]=!0,n},u.defer.cancel=function(e){return v[e]?(delete v[e],g(e),i(h),!0):!1}}function st(){this.$get=["$window","$log","$sniffer","$document",function(e,t,n,r){return new at(e,r,t,n)}]}function ct(){this.$get=function(){function e(e,n){function i(e){e!=m&&(f?f==e&&(f=e.n):f=e,o(e.n,e.p),o(e,m),m=e,m.n=null)}function o(e,t){e!=t&&(e&&(e.p=t),t&&(t.n=e))}if(e in t)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",e);var a=0,s=u({},n,{id:e}),c=ge(),l=n&&n.capacity||Number.MAX_VALUE,d=ge(),m=null,f=null;return t[e]={put:function(e,t){if(!b(t)){if(l<Number.MAX_VALUE){var n=d[e]||(d[e]={key:e});i(n)}return e in c||a++,c[e]=t,a>l&&this.remove(f.key),t}},get:function(e){if(l<Number.MAX_VALUE){var t=d[e];if(!t)return;i(t)}return c[e]},remove:function(e){if(l<Number.MAX_VALUE){var t=d[e];if(!t)return;t==m&&(m=t.p),t==f&&(f=t.n),o(t.n,t.p),delete d[e]}e in c&&(delete c[e],a--)},removeAll:function(){c=ge(),a=0,d=ge(),m=f=null},destroy:function(){c=null,s=null,d=null,delete t[e]},info:function(){return u({},s,{size:a})}}}var t={};return e.info=function(){var e={};return o(t,function(t,n){e[n]=t.info()}),e},e.get=function(e){return t[e]},e}}function lt(){this.$get=["$cacheFactory",function(e){return e("templates")}]}function dt(e,r){function i(e,t,n){var r=/^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/,i={};return o(e,function(e,o){var a=e.match(r);if(!a)throw Oi("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",t,o,e,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o}}),i}function a(e,t){var n={isolateScope:null,bindToController:null};if(y(e.scope)&&(e.bindToController===!0?(n.bindToController=i(e.scope,t,!0),n.isolateScope={}):n.isolateScope=i(e.scope,t,!1)),y(e.bindToController)&&(n.bindToController=i(e.bindToController,t,!0)),y(n.bindToController)){var r=e.controller,o=e.controllerAs;if(!r)throw Oi("noctrl","Cannot bind to controller without directive '{0}'s controller.",t);if(!pt(r,o))throw Oi("noident","Cannot bind to controller without identifier for directive '{0}'.",t)}return n}function c(e){var t=e.charAt(0);if(!t||t!==Cr(t))throw Oi("baddir","Directive name '{0}' is invalid. The first character must be a lowercase letter",e);if(e!==e.trim())throw Oi("baddir","Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",e)}var l={},d="Directive",m=/^\s*directive\:\s*([\w\-]+)\s+(.*)$/,f=/(([\w\-]+)(?:\:([^;]+))?;?)/,$=P("ngSrc,ngSrcset,src,srcset"),M=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,w=/^(on[a-z]+|formaction)$/;this.directive=function k(t,n){return fe(t,"directive"),C(t)?(c(t),ue(n,"directiveFactory"),l.hasOwnProperty(t)||(l[t]=[],e.factory(t+d,["$injector","$exceptionHandler",function(e,n){var r=[];return o(l[t],function(i,o){try{var s=e.invoke(i);A(s)?s={compile:v(s)}:!s.compile&&s.link&&(s.compile=v(s.link)),s.priority=s.priority||0,s.index=o,s.name=s.name||t,s.require=s.require||s.controller&&s.name,s.restrict=s.restrict||"EA";var c=s.$$bindings=a(s,s.name);y(c.isolateScope)&&(s.$$isolateBindings=c.isolateScope),s.$$moduleName=i.$$moduleName,r.push(s)}catch(l){n(l)}}),r}])),l[t].push(n)):o(t,s(k)),this},this.aHrefSanitizationWhitelist=function(e){return E(e)?(r.aHrefSanitizationWhitelist(e),this):r.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(e){return E(e)?(r.imgSrcSanitizationWhitelist(e),this):r.imgSrcSanitizationWhitelist()};var x=!0;this.debugInfoEnabled=function(e){return E(e)?(x=e,this):x},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$document","$sce","$animate","$$sanitizeUri",function(e,r,i,a,s,c,v,E,k,T,N){function _(e,t){try{e.addClass(t)}catch(n){}}function D(e,t,n,r,i){e instanceof Sr||(e=Sr(e)),o(e,function(t,n){t.nodeType==Jr&&t.nodeValue.match(/\S+/)&&(e[n]=Sr(t).wrap("<span></span>").parent()[0])});var a=O(e,t,e,n,r,i);D.$$addScopeClass(e);var s=null;return function(t,n,r){ue(t,"scope"),i&&i.needsNewScope&&(t=t.$parent.$new()),r=r||{};var o=r.parentBoundTranscludeFn,c=r.transcludeControllers,l=r.futureParentElement;o&&o.$$boundTransclude&&(o=o.$$boundTransclude),s||(s=H(l));var d;if(d="html"!==s?Sr(Q(s,Sr("<div>").append(e).html())):n?vi.clone.call(e):e,c)for(var u in c)d.data("$"+u+"Controller",c[u].instance);return D.$$addScopeInfo(d,t),n&&n(d,t),a&&a(t,d,d,o),d}}function H(e){var t=e&&e[0];return t&&"foreignobject"!==L(t)&&t.toString().match(/SVG/)?"svg":"html"}function O(e,t,r,i,o,a){function s(e,r,i,o){var a,s,c,l,d,u,m,f,g;if(p){var v=r.length;for(g=new Array(v),d=0;d<h.length;d+=3)m=h[d],g[m]=r[m]}else g=r;for(d=0,u=h.length;u>d;)c=g[h[d++]],a=h[d++],s=h[d++],a?(a.scope?(l=e.$new(),D.$$addScopeInfo(Sr(c),l)):l=e,f=a.transcludeOnThisElement?I(e,a.transclude,o):!a.templateOnThisElement&&o?o:!o&&t?I(e,t):null,a(s,l,c,i,f)):s&&s(e,c.childNodes,n,o)}for(var c,l,d,u,m,f,p,h=[],g=0;g<e.length;g++)c=new ae,l=R(e[g],[],c,0===g?i:n,o),d=l.length?V(l,e[g],c,t,r,null,[],[],a):null,d&&d.scope&&D.$$addScopeClass(c.$$element),m=d&&d.terminal||!(u=e[g].childNodes)||!u.length?null:O(u,d?(d.transcludeOnThisElement||!d.templateOnThisElement)&&d.transclude:t),(d||m)&&(h.push(g,d,m),f=!0,p=p||d),a=null;return f?s:null}function I(e,t,n){var r=function(r,i,o,a,s){return r||(r=e.$new(!1,s),r.$$transcluded=!0),t(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})};return r}function R(e,t,n,r,i){var o,a,s=e.nodeType,c=n.$attr;switch(s){case Xr:z(t,ut(L(e)),"E",r,i);for(var l,d,u,p,h,g,v=e.attributes,$=0,b=v&&v.length;b>$;$++){var E=!1,M=!1;l=v[$],d=l.name,h=Ur(l.value),p=ut(d),(g=me.test(p))&&(d=d.replace(Ii,"").substr(8).replace(/_(.)/g,function(e,t){return t.toUpperCase()}));var w=p.match(fe);w&&W(w[1])&&(E=d,M=d.substr(0,d.length-5)+"end",d=d.substr(0,d.length-6)),u=ut(d.toLowerCase()),c[u]=d,(g||!n.hasOwnProperty(u))&&(n[u]=h,qe(e,u)&&(n[u]=!0)),te(e,t,h,u,g),z(t,u,"A",r,i,E,M)}if(a=e.className,y(a)&&(a=a.animVal),C(a)&&""!==a)for(;o=f.exec(a);)u=ut(o[2]),z(t,u,"C",r,i)&&(n[u]=Ur(o[3])),a=a.substr(o.index+o[0].length);break;case Jr:if(11===Tr)for(;e.parentNode&&e.nextSibling&&e.nextSibling.nodeType===Jr;)e.nodeValue=e.nodeValue+e.nextSibling.nodeValue,e.parentNode.removeChild(e.nextSibling);Z(t,e.nodeValue);break;case Qr:try{o=m.exec(e.nodeValue),o&&(u=ut(o[1]),z(t,u,"M",r,i)&&(n[u]=Ur(o[2])))}catch(x){}}return t.sort(G),t}function P(e,t,n){var r=[],i=0;if(t&&e.hasAttribute&&e.hasAttribute(t)){do{if(!e)throw Oi("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",t,n);e.nodeType==Xr&&(e.hasAttribute(t)&&i++,e.hasAttribute(n)&&i--),r.push(e),e=e.nextSibling}while(i>0)}else r.push(e);return Sr(r)}function j(e,t,n){return function(r,i,o,a,s){return i=P(i[0],t,n),e(r,i,o,a,s)}}function V(e,r,o,a,s,l,d,u,m){function f(e,t,n,r){e&&(n&&(e=j(e,n,r)),e.require=v.require,e.directiveName=$,(N===v||v.$$isolateScope)&&(e=re(e,{isolateScope:!0})),d.push(e)),t&&(n&&(t=j(t,n,r)),t.require=v.require,t.directiveName=$,(N===v||v.$$isolateScope)&&(t=re(t,{isolateScope:!0})),u.push(t))}function p(e,t,n,r){var i;if(C(t)){var o=t.match(M),a=t.substring(o[0].length),s=o[1]||o[3],c="?"===o[2];if("^^"===s?n=n.parent():(i=r&&r[a],i=i&&i.instance),!i){var l="$"+a+"Controller";i=s?n.inheritedData(l):n.data(l)}if(!i&&!c)throw Oi("ctreq","Controller '{0}', required by directive '{1}', can't be found!",a,e)}else if(Vr(t)){i=[];for(var d=0,u=t.length;u>d;d++)i[d]=p(e,t[d],n,r)}return i||null}function h(e,t,n,r,i,o){var a=ge();for(var s in r){var l=r[s],d={$scope:l===N||l.$$isolateScope?i:o,$element:e,$attrs:t,$transclude:n},u=l.controller;"@"==u&&(u=t[l.name]);var m=c(u,d,!0,l.controllerAs);a[l.name]=m,L||e.data("$"+l.name+"Controller",m.instance)}return a}function g(e,t,i,a,s){function c(e,t,r){var i;return S(e)||(r=t,t=e,e=n),L&&(i=g),r||(r=L?$.parent():$),s(e,t,i,r,H)}var l,m,f,g,v,$,b,E,y;r===i?(b=o,$=o.$$element):($=Sr(i),b=new ae($,o)),f=t,N?m=t.$new(!0):k&&(f=t.$parent),s&&(v=c,v.$$boundTransclude=s),T&&(g=h($,b,v,T,m,t)),N&&(D.$$addScopeInfo($,m,!0,!(_&&(_===N||_===N.$$originalDirective))),D.$$addScopeClass($,!0),m.$$isolateBindings=N.$$isolateBindings,E=oe(t,b,m,m.$$isolateBindings,N),E&&m.$on("$destroy",E));for(var M in g){var C=T[M],w=g[M],x=C.$$bindings.bindToController;w.identifier&&x&&(y=oe(f,b,w.instance,x,C));var A=w();A!==w.instance&&(w.instance=A,$.data("$"+C.name+"Controller",A),y&&y(),y=oe(f,b,w.instance,x,C))}for(z=0,W=d.length;W>z;z++)l=d[z],ie(l,l.isolateScope?m:t,$,b,l.require&&p(l.directiveName,l.require,$,g),v);var H=t;for(N&&(N.template||null===N.templateUrl)&&(H=m),e&&e(H,i.childNodes,n,s),z=u.length-1;z>=0;z--)l=u[z],ie(l,l.isolateScope?m:t,$,b,l.require&&p(l.directiveName,l.require,$,g),v)}m=m||{};for(var v,$,b,E,w,x=-Number.MAX_VALUE,k=m.newScopeDirective,T=m.controllerDirectives,N=m.newIsolateScopeDirective,_=m.templateDirective,H=m.nonTlbTranscludeDirective,O=!1,I=!1,L=m.hasElementTranscludeDirective,F=o.$$element=Sr(r),V=l,B=a,z=0,W=e.length;W>z;z++){v=e[z];var G=v.$$start,Z=v.$$end;if(G&&(F=P(r,G,Z)),b=n,x>v.priority)break;if((w=v.scope)&&(v.templateUrl||(y(w)?(X("new/isolated scope",N||k,v,F),N=v):X("new/isolated scope",N,v,F)),
k=k||v),$=v.name,!v.templateUrl&&v.controller&&(w=v.controller,T=T||ge(),X("'"+$+"' controller",T[$],v,F),T[$]=v),(w=v.transclude)&&(O=!0,v.$$tlb||(X("transclusion",H,v,F),H=v),"element"==w?(L=!0,x=v.priority,b=F,F=o.$$element=Sr(t.createComment(" "+$+": "+o[$]+" ")),r=F[0],ne(s,q(b),r),B=D(b,a,x,V&&V.name,{nonTlbTranscludeDirective:H})):(b=Sr(Se(r)).contents(),F.empty(),B=D(b,a,n,n,{needsNewScope:v.$$isolateScope||v.$$newScope}))),v.template)if(I=!0,X("template",_,v,F),_=v,w=A(v.template)?v.template(F,o):v.template,w=de(w),v.replace){if(V=v,b=Ce(w)?[]:ft(Q(v.templateNamespace,Ur(w))),r=b[0],1!=b.length||r.nodeType!==Xr)throw Oi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",$,"");ne(s,F,r);var ee={$attr:{}},te=R(r,[],ee),se=e.splice(z+1,e.length-(z+1));(N||k)&&U(te,N,k),e=e.concat(te).concat(se),Y(o,ee),W=e.length}else F.html(w);if(v.templateUrl)I=!0,X("template",_,v,F),_=v,v.replace&&(V=v),g=K(e.splice(z,e.length-z),F,o,s,O&&B,d,u,{controllerDirectives:T,newScopeDirective:k!==v&&k,newIsolateScopeDirective:N,templateDirective:_,nonTlbTranscludeDirective:H}),W=e.length;else if(v.compile)try{E=v.compile(F,o,B),A(E)?f(null,E,G,Z):E&&f(E.pre,E.post,G,Z)}catch(ce){i(ce,J(F))}v.terminal&&(g.terminal=!0,x=Math.max(x,v.priority))}return g.scope=k&&k.scope===!0,g.transcludeOnThisElement=O,g.templateOnThisElement=I,g.transclude=B,m.hasElementTranscludeDirective=L,g}function U(e,t,n){for(var r=0,i=e.length;i>r;r++)e[r]=p(e[r],{$$isolateScope:t,$$newScope:n})}function z(t,n,r,o,a,s,c){if(n===a)return null;var u=null;if(l.hasOwnProperty(n))for(var m,f=e.get(n+d),h=0,g=f.length;g>h;h++)try{m=f[h],(b(o)||o>m.priority)&&-1!=m.restrict.indexOf(r)&&(s&&(m=p(m,{$$start:s,$$end:c})),t.push(m),u=m)}catch(v){i(v)}return u}function W(t){if(l.hasOwnProperty(t))for(var n,r=e.get(t+d),i=0,o=r.length;o>i;i++)if(n=r[i],n.multiElement)return!0;return!1}function Y(e,t){var n=t.$attr,r=e.$attr,i=e.$$element;o(e,function(r,i){"$"!=i.charAt(0)&&(t[i]&&t[i]!==r&&(r+=("style"===i?";":" ")+t[i]),e.$set(i,r,!0,n[i]))}),o(t,function(t,o){"class"==o?(_(i,t),e["class"]=(e["class"]?e["class"]+" ":"")+t):"style"==o?(i.attr("style",i.attr("style")+";"+t),e.style=(e.style?e.style+";":"")+t):"$"==o.charAt(0)||e.hasOwnProperty(o)||(e[o]=t,r[o]=n[o])})}function K(e,t,n,r,i,s,c,l){var d,u,m=[],f=t[0],h=e.shift(),g=p(h,{templateUrl:null,transclude:null,replace:null,$$originalDirective:h}),v=A(h.templateUrl)?h.templateUrl(t,n):h.templateUrl,$=h.templateNamespace;return t.empty(),a(v).then(function(a){var p,b,E,M;if(a=de(a),h.replace){if(E=Ce(a)?[]:ft(Q($,Ur(a))),p=E[0],1!=E.length||p.nodeType!==Xr)throw Oi("tplrt","Template for directive '{0}' must have exactly one root element. {1}",h.name,v);b={$attr:{}},ne(r,t,p);var C=R(p,[],b);y(h.scope)&&U(C,!0),e=C.concat(e),Y(n,b)}else p=f,t.html(a);for(e.unshift(g),d=V(e,p,n,i,t,h,s,c,l),o(r,function(e,n){e==p&&(r[n]=t[0])}),u=O(t[0].childNodes,i);m.length;){var w=m.shift(),x=m.shift(),A=m.shift(),k=m.shift(),T=t[0];if(!w.$$destroyed){if(x!==f){var S=x.className;l.hasElementTranscludeDirective&&h.replace||(T=Se(p)),ne(A,Sr(x),T),_(Sr(T),S)}M=d.transcludeOnThisElement?I(w,d.transclude,k):k,d(u,w,T,r,M)}}m=null}),function(e,t,n,r,i){var o=i;t.$$destroyed||(m?m.push(t,n,r,o):(d.transcludeOnThisElement&&(o=I(t,d.transclude,i)),d(u,t,n,r,o)))}}function G(e,t){var n=t.priority-e.priority;return 0!==n?n:e.name!==t.name?e.name<t.name?-1:1:e.index-t.index}function X(e,t,n,r){function i(e){return e?" (module: "+e+")":""}if(t)throw Oi("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",t.name,i(t.$$moduleName),n.name,i(n.$$moduleName),e,J(r))}function Z(e,t){var n=r(t,!0);n&&e.push({priority:0,compile:function(e){var t=e.parent(),r=!!t.length;return r&&D.$$addBindingClass(t),function(e,t){var i=t.parent();r||D.$$addBindingClass(i),D.$$addBindingInfo(i,n.expressions),e.$watch(n,function(e){t[0].nodeValue=e})}}})}function Q(e,n){switch(e=Cr(e||"html")){case"svg":case"math":var r=t.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function ee(e,t){if("srcdoc"==t)return k.HTML;var n=L(e);return"xlinkHref"==t||"form"==n&&"action"==t||"img"!=n&&("src"==t||"ngSrc"==t)?k.RESOURCE_URL:void 0}function te(e,t,n,i,o){var a=ee(e,i);o=$[i]||o;var s=r(n,!0,a,o);if(s){if("multiple"===i&&"select"===L(e))throw Oi("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",J(e));t.push({priority:100,compile:function(){return{pre:function(e,t,c){var l=c.$$observers||(c.$$observers=ge());if(w.test(i))throw Oi("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");var d=c[i];d!==n&&(s=d&&r(d,!0,a,o),n=d),s&&(c[i]=s(e),(l[i]||(l[i]=[])).$$inter=!0,(c.$$observers&&c.$$observers[i].$$scope||e).$watch(s,function(e,t){"class"===i&&e!=t?c.$updateClass(e,t):c.$set(i,e)}))}}}})}}function ne(e,n,r){var i,o,a=n[0],s=n.length,c=a.parentNode;if(e)for(i=0,o=e.length;o>i;i++)if(e[i]==a){e[i++]=r;for(var l=i,d=l+s-1,u=e.length;u>l;l++,d++)u>d?e[l]=e[d]:delete e[l];e.length-=s-1,e.context===a&&(e.context=r);break}c&&c.replaceChild(r,a);var m=t.createDocumentFragment();m.appendChild(a),Sr.hasData(a)&&(Sr.data(r,Sr.data(a)),Nr?(jr=!0,Nr.cleanData([a])):delete Sr.cache[a[Sr.expando]]);for(var f=1,p=n.length;p>f;f++){var h=n[f];Sr(h).remove(),m.appendChild(h),delete n[f]}n[0]=r,n.length=1}function re(e,t){return u(function(){return e.apply(null,arguments)},e,t)}function ie(e,t,n,r,o,a){try{e(t,n,r,o,a)}catch(s){i(s,J(n))}}function oe(e,t,n,i,a){var c=[];return o(i,function(i,o){var l,d,u,m,f=i.attrName,p=i.optional,g=i.mode;switch(g){case"@":p||wr.call(t,f)||(n[o]=t[f]=void 0),t.$observe(f,function(e){C(e)&&(n[o]=e)}),t.$$observers[f].$$scope=e,C(t[f])&&(n[o]=r(t[f])(e));break;case"=":if(!wr.call(t,f)){if(p)break;t[f]=void 0}if(p&&!t[f])break;d=s(t[f]),m=d.literal?B:function(e,t){return e===t||e!==e&&t!==t},u=d.assign||function(){throw l=n[o]=d(e),Oi("nonassign","Expression '{0}' used with directive '{1}' is non-assignable!",t[f],a.name)},l=n[o]=d(e);var v=function(t){return m(t,n[o])||(m(t,l)?u(e,t=n[o]):n[o]=t),l=t};v.$stateful=!0;var $;$=i.collection?e.$watchCollection(t[f],v):e.$watch(s(t[f],v),null,d.literal),c.push($);break;case"&":if(d=t.hasOwnProperty(f)?s(t[f]):h,d===h&&p)break;n[o]=function(t){return d(e,t)}}}),c.length&&function(){for(var e=0,t=c.length;t>e;++e)c[e]()}}var ae=function(e,t){if(t){var n,r,i,o=Object.keys(t);for(n=0,r=o.length;r>n;n++)i=o[n],this[i]=t[i]}else this.$attr={};this.$$element=e};ae.prototype={$normalize:ut,$addClass:function(e){e&&e.length>0&&T.addClass(this.$$element,e)},$removeClass:function(e){e&&e.length>0&&T.removeClass(this.$$element,e)},$updateClass:function(e,t){var n=mt(e,t);n&&n.length&&T.addClass(this.$$element,n);var r=mt(t,e);r&&r.length&&T.removeClass(this.$$element,r)},$set:function(e,t,n,r){var a,s=this.$$element[0],c=qe(s,e),l=ze(e),d=e;if(c?(this.$$element.prop(e,t),r=c):l&&(this[l]=t,d=l),this[e]=t,r?this.$attr[e]=r:(r=this.$attr[e],r||(this.$attr[e]=r=le(e,"-"))),a=L(this.$$element),"a"===a&&"href"===e||"img"===a&&"src"===e)this[e]=t=N(t,"src"===e);else if("img"===a&&"srcset"===e){for(var u="",m=Ur(t),f=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,p=/\s/.test(m)?f:/(,)/,h=m.split(p),g=Math.floor(h.length/2),v=0;g>v;v++){var $=2*v;u+=N(Ur(h[$]),!0),u+=" "+Ur(h[$+1])}var E=Ur(h[2*v]).split(/\s/);u+=N(Ur(E[0]),!0),2===E.length&&(u+=" "+Ur(E[1])),this[e]=t=u}n!==!1&&(null===t||b(t)?this.$$element.removeAttr(r):this.$$element.attr(r,t));var y=this.$$observers;y&&o(y[d],function(e){try{e(t)}catch(n){i(n)}})},$observe:function(e,t){var n=this,r=n.$$observers||(n.$$observers=ge()),i=r[e]||(r[e]=[]);return i.push(t),v.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(e)||b(n[e])||t(n[e])}),function(){F(i,t)}}};var se=r.startSymbol(),ce=r.endSymbol(),de="{{"==se||"}}"==ce?g:function(e){return e.replace(/\{\{/g,se).replace(/}}/g,ce)},me=/^ngAttr[A-Z]/,fe=/^(.+)Start$/;return D.$$addBindingInfo=x?function(e,t){var n=e.data("$binding")||[];Vr(t)?n=n.concat(t):n.push(t),e.data("$binding",n)}:h,D.$$addBindingClass=x?function(e){_(e,"ng-binding")}:h,D.$$addScopeInfo=x?function(e,t,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";e.data(i,t)}:h,D.$$addScopeClass=x?function(e,t){_(e,t?"ng-isolate-scope":"ng-scope")}:h,D}]}function ut(e){return Me(e.replace(Ii,""))}function mt(e,t){var n="",r=e.split(/\s+/),i=t.split(/\s+/);e:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a==i[s])continue e;n+=(n.length>0?" ":"")+a}return n}function ft(e){e=Sr(e);var t=e.length;if(1>=t)return e;for(;t--;){var n=e[t];n.nodeType===Qr&&Hr.call(e,t,1)}return e}function pt(e,t){if(t&&C(t))return t;if(C(e)){var n=Pi.exec(e);if(n)return n[3]}}function ht(){var e={},t=!1;this.register=function(t,n){fe(t,"controller"),y(t)?u(e,t):e[t]=n},this.allowGlobals=function(){t=!0},this.$get=["$injector","$window",function(i,o){function a(e,t,n,i){if(!e||!y(e.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,t);e.$scope[t]=n}return function(r,s,c,l){var d,m,f,p;if(c=c===!0,l&&C(l)&&(p=l),C(r)){if(m=r.match(Pi),!m)throw Ri("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);f=m[1],p=p||m[3],r=e.hasOwnProperty(f)?e[f]:pe(s.$scope,f,!0)||(t?pe(o,f,!0):n),me(r,f,!0)}if(c){var h=(Vr(r)?r[r.length-1]:r).prototype;d=Object.create(h||null),p&&a(s,p,d,f||r.name);var g;return g=u(function(){var e=i.invoke(r,d,s,f);return e!==d&&(y(e)||A(e))&&(d=e,p&&a(s,p,d,f||r.name)),d},{instance:d,identifier:p})}return d=i.instantiate(r,s,f),p&&a(s,p,d,f||r.name),d}}]}function gt(){this.$get=["$window",function(e){return Sr(e.document)}]}function vt(){this.$get=["$log",function(e){return function(t,n){e.error.apply(e,arguments)}}]}function $t(e){return y(e)?x(e)?e.toISOString():Y(e):e}function bt(){this.$get=function(){return function(e){if(!e)return"";var t=[];return a(e,function(e,n){null===e||b(e)||(Vr(e)?o(e,function(e,r){t.push(re(n)+"="+re($t(e)))}):t.push(re(n)+"="+re($t(e))))}),t.join("&")}}}function Et(){this.$get=function(){return function(e){function t(e,r,i){null===e||b(e)||(Vr(e)?o(e,function(e,n){t(e,r+"["+(y(e)?n:"")+"]")}):y(e)&&!x(e)?a(e,function(e,n){t(e,r+(i?"":"[")+n+(i?"":"]"))}):n.push(re(r)+"="+re($t(e))))}if(!e)return"";var n=[];return t(e,"",!0),n.join("&")}}}function yt(e,t){if(C(e)){var n=e.replace(Ui,"").trim();if(n){var r=t("Content-Type");(r&&0===r.indexOf(Fi)||Mt(n))&&(e=K(n))}}return e}function Mt(e){var t=e.match(Vi);return t&&Bi[t[0]].test(e)}function Ct(e){function t(e,t){e&&(r[e]=r[e]?r[e]+", "+t:t)}var n,r=ge();return C(e)?o(e.split("\n"),function(e){n=e.indexOf(":"),t(Cr(Ur(e.substr(0,n))),Ur(e.substr(n+1)))}):y(e)&&o(e,function(e,n){t(Cr(n),Ur(e))}),r}function wt(e){var t;return function(n){if(t||(t=Ct(e)),n){var r=t[Cr(n)];return void 0===r&&(r=null),r}return t}}function xt(e,t,n,r){return A(r)?r(e,t,n):(o(r,function(r){e=r(e,t,n)}),e)}function At(e){return e>=200&&300>e}function kt(){var e=this.defaults={transformResponse:[yt],transformRequest:[function(e){return!y(e)||N(e)||D(e)||_(e)?e:Y(e)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:V(ji),put:V(ji),patch:V(ji)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer"},t=!1;this.useApplyAsync=function(e){return E(e)?(t=!!e,this):t};var i=!0;this.useLegacyPromiseExtensions=function(e){return E(e)?(i=!!e,this):i};var a=this.interceptors=[];this.$get=["$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector",function(s,c,l,d,m,f){function p(t){function a(e){var t=u({},e);return t.data=xt(e.data,e.headers,e.status,l.transformResponse),At(e.status)?t:m.reject(t)}function s(e,t){var n,r={};return o(e,function(e,i){A(e)?(n=e(t),null!=n&&(r[i]=n)):r[i]=e}),r}function c(t){var n,r,i,o=e.headers,a=u({},t.headers);o=u({},o.common,o[Cr(t.method)]);e:for(n in o){r=Cr(n);for(i in a)if(Cr(i)===r)continue e;a[n]=o[n]}return s(a,V(t))}if(!Lr.isObject(t))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",t);var l=u({method:"get",transformRequest:e.transformRequest,transformResponse:e.transformResponse,paramSerializer:e.paramSerializer},t);l.headers=c(t),l.method=xr(l.method),l.paramSerializer=C(l.paramSerializer)?f.get(l.paramSerializer):l.paramSerializer;var d=function(t){var r=t.headers,i=xt(t.data,wt(r),n,t.transformRequest);return b(i)&&o(r,function(e,t){"content-type"===Cr(t)&&delete r[t]}),b(t.withCredentials)&&!b(e.withCredentials)&&(t.withCredentials=e.withCredentials),v(t,i).then(a,a)},p=[d,n],h=m.when(l);for(o(w,function(e){(e.request||e.requestError)&&p.unshift(e.request,e.requestError),(e.response||e.responseError)&&p.push(e.response,e.responseError)});p.length;){var g=p.shift(),$=p.shift();h=h.then(g,$)}return i?(h.success=function(e){return me(e,"fn"),h.then(function(t){e(t.data,t.status,t.headers,l)}),h},h.error=function(e){return me(e,"fn"),h.then(null,function(t){e(t.data,t.status,t.headers,l)}),h}):(h.success=zi("success"),h.error=zi("error")),h}function h(e){o(arguments,function(e){p[e]=function(t,n){return p(u({},n||{},{method:e,url:t}))}})}function g(e){o(arguments,function(e){p[e]=function(t,n,r){return p(u({},r||{},{method:e,url:t,data:n}))}})}function v(r,i){function o(e,n,r,i){function o(){a(n,e,r,i)}f&&(At(e)?f.put(w,[e,n,Ct(r),i]):f.remove(w)),t?d.$applyAsync(o):(o(),d.$$phase||d.$apply())}function a(e,t,n,i){t=t>=-1?t:0,(At(t)?g.resolve:g.reject)({data:e,status:t,headers:wt(n),config:r,statusText:i})}function l(e){a(e.data,e.status,V(e.headers()),e.statusText)}function u(){var e=p.pendingRequests.indexOf(r);-1!==e&&p.pendingRequests.splice(e,1)}var f,h,g=m.defer(),v=g.promise,C=r.headers,w=$(r.url,r.paramSerializer(r.params));if(p.pendingRequests.push(r),v.then(u,u),!r.cache&&!e.cache||r.cache===!1||"GET"!==r.method&&"JSONP"!==r.method||(f=y(r.cache)?r.cache:y(e.cache)?e.cache:M),f&&(h=f.get(w),E(h)?O(h)?h.then(l,l):Vr(h)?a(h[1],h[0],V(h[2]),h[3]):a(h,200,{},"OK"):f.put(w,v)),b(h)){var x=Sn(r.url)?c()[r.xsrfCookieName||e.xsrfCookieName]:n;x&&(C[r.xsrfHeaderName||e.xsrfHeaderName]=x),s(r.method,w,i,o,C,r.timeout,r.withCredentials,r.responseType)}return v}function $(e,t){return t.length>0&&(e+=(-1==e.indexOf("?")?"?":"&")+t),e}var M=l("$http");e.paramSerializer=C(e.paramSerializer)?f.get(e.paramSerializer):e.paramSerializer;var w=[];return o(a,function(e){w.unshift(C(e)?f.get(e):f.invoke(e))}),p.pendingRequests=[],h("get","delete","head","jsonp"),g("post","put","patch"),p.defaults=e,p}]}function Tt(){this.$get=function(){return function(){return new e.XMLHttpRequest}}}function St(){this.$get=["$browser","$window","$document","$xhrFactory",function(e,t,n,r){return Nt(e,r,e.defer,t.angular.callbacks,n[0])}]}function Nt(e,t,n,r,i){function a(e,t,n){var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=e,o.async=!0,a=function(e){ai(o,"load",a),ai(o,"error",a),i.body.removeChild(o),o=null;var s=-1,c="unknown";e&&("load"!==e.type||r[t].called||(e={type:"error"}),c=e.type,s="error"===e.type?404:200),n&&n(s,c)},oi(o,"load",a),oi(o,"error",a),i.body.appendChild(o),a}return function(i,s,c,l,d,u,m,f){function p(){$&&$(),y&&y.abort()}function g(t,r,i,o,a){E(w)&&n.cancel(w),$=y=null,t(r,i,o,a),e.$$completeOutstandingRequest(h)}if(e.$$incOutstandingRequestCount(),s=s||e.url(),"jsonp"==Cr(i)){var v="_"+(r.counter++).toString(36);r[v]=function(e){r[v].data=e,r[v].called=!0};var $=a(s.replace("JSON_CALLBACK","angular.callbacks."+v),v,function(e,t){g(l,e,r[v].data,"",t),r[v]=h})}else{var y=t(i,s);y.open(i,s,!0),o(d,function(e,t){E(e)&&y.setRequestHeader(t,e)}),y.onload=function(){var e=y.statusText||"",t="response"in y?y.response:y.responseText,n=1223===y.status?204:y.status;0===n&&(n=t?200:"file"==Tn(s).protocol?404:0),g(l,n,t,y.getAllResponseHeaders(),e)};var M=function(){g(l,-1,null,null,"")};if(y.onerror=M,y.onabort=M,m&&(y.withCredentials=!0),f)try{y.responseType=f}catch(C){if("json"!==f)throw C}y.send(b(c)?null:c)}if(u>0)var w=n(p,u);else O(u)&&u.then(p)}}function _t(){var e="{{",t="}}";this.startSymbol=function(t){return t?(e=t,this):e},this.endSymbol=function(e){return e?(t=e,this):t},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(e){return"\\\\\\"+e}function a(n){return n.replace(m,e).replace(f,t)}function s(e){if(null==e)return"";switch(typeof e){case"string":break;case"number":e=""+e;break;default:e=Y(e)}return e}function c(o,c,m,f){function p(e){try{return e=T(e),f&&!E(e)?e:s(e)}catch(t){r(Wi.interr(o,t))}}f=!!f;for(var h,g,v,$=0,y=[],M=[],C=o.length,w=[],x=[];C>$;){if(-1==(h=o.indexOf(e,$))||-1==(g=o.indexOf(t,h+l))){$!==C&&w.push(a(o.substring($)));break}$!==h&&w.push(a(o.substring($,h))),v=o.substring(h+l,g),y.push(v),M.push(n(v,p)),$=g+d,x.push(w.length),w.push("")}if(m&&w.length>1&&Wi.throwNoconcat(o),!c||y.length){var k=function(e){for(var t=0,n=y.length;n>t;t++){if(f&&b(e[t]))return;w[x[t]]=e[t]}return w.join("")},T=function(e){return m?i.getTrusted(m,e):i.valueOf(e)};return u(function(e){var t=0,n=y.length,i=new Array(n);try{for(;n>t;t++)i[t]=M[t](e);return k(i)}catch(a){r(Wi.interr(o,a))}},{exp:o,expressions:y,$$watchDelegate:function(e,t){var n;return e.$watchGroup(M,function(r,i){var o=k(r);A(t)&&t.call(this,o,r!==i?n:o,e),n=o})}})}}var l=e.length,d=t.length,m=new RegExp(e.replace(/./g,o),"g"),f=new RegExp(t.replace(/./g,o),"g");return c.startSymbol=function(){return e},c.endSymbol=function(){return t},c}]}function Dt(){this.$get=["$rootScope","$window","$q","$$q",function(e,t,n,r){function i(i,a,s,c){var l=arguments.length>4,d=l?q(arguments,4):[],u=t.setInterval,m=t.clearInterval,f=0,p=E(c)&&!c,h=(p?r:n).defer(),g=h.promise;return s=E(s)?s:0,g.then(null,null,l?function(){i.apply(null,d)}:i),g.$$intervalId=u(function(){h.notify(f++),s>0&&f>=s&&(h.resolve(f),m(g.$$intervalId),delete o[g.$$intervalId]),p||e.$apply()},a),o[g.$$intervalId]=h,g}var o={};return i.cancel=function(e){return e&&e.$$intervalId in o?(o[e.$$intervalId].reject("canceled"),t.clearInterval(e.$$intervalId),delete o[e.$$intervalId],!0):!1},i}]}function Ht(e){for(var t=e.split("/"),n=t.length;n--;)t[n]=ne(t[n]);return t.join("/")}function Ot(e,t){var n=Tn(e);t.$$protocol=n.protocol,t.$$host=n.hostname,t.$$port=f(n.port)||Ki[n.protocol]||null}function It(e,t){var n="/"!==e.charAt(0);n&&(e="/"+e);var r=Tn(e);t.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),t.$$search=ee(r.search),t.$$hash=decodeURIComponent(r.hash),t.$$path&&"/"!=t.$$path.charAt(0)&&(t.$$path="/"+t.$$path)}function Rt(e,t){return 0===t.indexOf(e)?t.substr(e.length):void 0}function Pt(e){var t=e.indexOf("#");return-1==t?e:e.substr(0,t)}function Lt(e){return e.replace(/(#.+)|#$/,"$1")}function Ft(e){return e.substr(0,Pt(e).lastIndexOf("/")+1)}function jt(e){return e.substring(0,e.indexOf("/",e.indexOf("//")+2))}function Vt(e,t,n){this.$$html5=!0,n=n||"",Ot(e,this),this.$$parse=function(e){var n=Rt(t,e);if(!C(n))throw Gi("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',e,t);It(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var e=te(this.$$search),n=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Ht(this.$$path)+(e?"?"+e:"")+n,this.$$absUrl=t+this.$$url.substr(1)},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return E(o=Rt(e,r))?(a=o,s=E(o=Rt(n,o))?t+(Rt("/",o)||o):e+a):E(o=Rt(t,r))?s=t+o:t==r+"/"&&(s=t),s&&this.$$parse(s),!!s}}function Bt(e,t,n){Ot(e,this),this.$$parse=function(r){function i(e,t,n){var r,i=/^\/[A-Z]:(\/.*)/;return 0===t.indexOf(n)&&(t=t.replace(n,"")),i.exec(t)?e:(r=i.exec(e),r?r[1]:e)}var o,a=Rt(e,r)||Rt(t,r);b(a)||"#"!==a.charAt(0)?this.$$html5?o=a:(o="",b(a)&&(e=r,this.replace())):(o=Rt(n,a),b(o)&&(o=a)),It(o,this),this.$$path=i(this.$$path,o,e),this.$$compose()},this.$$compose=function(){var t=te(this.$$search),r=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Ht(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+(this.$$url?n+this.$$url:"")},this.$$parseLinkUrl=function(t,n){return Pt(e)==Pt(t)?(this.$$parse(t),!0):!1}}function Ut(e,t,n){this.$$html5=!0,Bt.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return e==Pt(r)?o=r:(a=Rt(t,r))?o=e+n+a:t===r+"/"&&(o=t),o&&this.$$parse(o),!!o},this.$$compose=function(){var t=te(this.$$search),r=this.$$hash?"#"+ne(this.$$hash):"";this.$$url=Ht(this.$$path)+(t?"?"+t:"")+r,this.$$absUrl=e+n+this.$$url}}function qt(e){return function(){return this[e]}}function zt(e,t){return function(n){return b(n)?this[e]:(this[e]=t(n),this.$$compose(),this)}}function Wt(){var e="",t={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(t){return E(t)?(e=t,this):e},this.html5Mode=function(e){return H(e)?(t.enabled=e,this):y(e)?(H(e.enabled)&&(t.enabled=e.enabled),H(e.requireBase)&&(t.requireBase=e.requireBase),H(e.rewriteLinks)&&(t.rewriteLinks=e.rewriteLinks),this):t},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(e,t,n){var i=l.url(),o=l.$$state;try{r.url(e,t,n),l.$$state=r.state()}catch(a){throw l.url(i),l.$$state=o,a}}function c(e,t){n.$broadcast("$locationChangeSuccess",l.absUrl(),e,l.$$state,t)}var l,d,u,m=r.baseHref(),f=r.url();if(t.enabled){if(!m&&t.requireBase)throw Gi("nobase","$location in HTML5 mode requires a <base> tag to be present!");u=jt(f)+(m||"/"),d=i.history?Vt:Ut}else u=Pt(f),d=Bt;var p=Ft(u);l=new d(u,p,"#"+e),l.$$parseLinkUrl(f,f),l.$$state=r.state();var h=/^\s*(javascript|mailto):/i;o.on("click",function(e){if(t.rewriteLinks&&!e.ctrlKey&&!e.metaKey&&!e.shiftKey&&2!=e.which&&2!=e.button){for(var i=Sr(e.target);"a"!==L(i[0]);)if(i[0]===o[0]||!(i=i.parent())[0])return;var s=i.prop("href"),c=i.attr("href")||i.attr("xlink:href");y(s)&&"[object SVGAnimatedString]"===s.toString()&&(s=Tn(s.animVal).href),h.test(s)||!s||i.attr("target")||e.isDefaultPrevented()||l.$$parseLinkUrl(s,c)&&(e.preventDefault(),l.absUrl()!=r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}),Lt(l.absUrl())!=Lt(f)&&r.url(l.absUrl(),!0);var g=!0;return r.onUrlChange(function(e,t){return b(Rt(p,e))?void(a.location.href=e):(n.$evalAsync(function(){var r,i=l.absUrl(),o=l.$$state;e=Lt(e),l.$$parse(e),l.$$state=t,r=n.$broadcast("$locationChangeStart",e,i,t,o).defaultPrevented,l.absUrl()===e&&(r?(l.$$parse(i),l.$$state=o,s(i,!1,o)):(g=!1,c(i,o)))}),void(n.$$phase||n.$digest()))}),n.$watch(function(){var e=Lt(r.url()),t=Lt(l.absUrl()),o=r.state(),a=l.$$replace,d=e!==t||l.$$html5&&i.history&&o!==l.$$state;(g||d)&&(g=!1,n.$evalAsync(function(){var t=l.absUrl(),r=n.$broadcast("$locationChangeStart",t,e,l.$$state,o).defaultPrevented;l.absUrl()===t&&(r?(l.$$parse(e),l.$$state=o):(d&&s(t,a,o===l.$$state?null:l.$$state),c(e,o)))})),l.$$replace=!1}),l}]}function Yt(){var e=!0,t=this;this.debugEnabled=function(t){return E(t)?(e=t,this):e},this.$get=["$window",function(n){function r(e){return e instanceof Error&&(e.stack?e=e.message&&-1===e.stack.indexOf(e.message)?"Error: "+e.message+"\n"+e.stack:e.stack:e.sourceURL&&(e=e.message+"\n"+e.sourceURL+":"+e.line)),e}function i(e){var t=n.console||{},i=t[e]||t.log||h,a=!1;try{a=!!i.apply}catch(s){}return a?function(){var e=[];return o(arguments,function(t){e.push(r(t))}),i.apply(t,e)}:function(e,t){i(e,null==t?"":t)}}return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){e&&n.apply(t,arguments)}}()}}]}function Kt(e,t){if("__defineGetter__"===e||"__defineSetter__"===e||"__lookupGetter__"===e||"__lookupSetter__"===e||"__proto__"===e)throw Zi("isecfld","Attempting to access a disallowed field in Angular expressions! Expression: {0}",t);return e}function Gt(e,t){if(e+="",!C(e))throw Zi("iseccst","Cannot convert object to primitive value! Expression: {0}",t);return e}function Xt(e,t){if(e){if(e.constructor===e)throw Zi("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e.window===e)throw Zi("isecwindow","Referencing the Window in Angular expressions is disallowed! Expression: {0}",t);if(e.children&&(e.nodeName||e.prop&&e.attr&&e.find))throw Zi("isecdom","Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}",t);if(e===Object)throw Zi("isecobj","Referencing Object in Angular expressions is disallowed! Expression: {0}",t)}return e}function Zt(e,t){if(e){if(e.constructor===e)throw Zi("isecfn","Referencing Function in Angular expressions is disallowed! Expression: {0}",t);if(e===Ji||e===Qi||e===eo)throw Zi("isecff","Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}",t)}}function Jt(e,t){if(e&&(e===0..constructor||e===(!1).constructor||e==="".constructor||e==={}.constructor||e===[].constructor||e===Function.constructor))throw Zi("isecaf","Assigning to a constructor is disallowed! Expression: {0}",t)}function Qt(e,t){return"undefined"!=typeof e?e:t}function en(e,t){return"undefined"==typeof e?t:"undefined"==typeof t?e:e+t}function tn(e,t){var n=e(t);return!n.$stateful}function nn(e,t){var n,r;switch(e.type){case io.Program:n=!0,o(e.body,function(e){nn(e.expression,t),n=n&&e.expression.constant}),e.constant=n;break;case io.Literal:e.constant=!0,e.toWatch=[];break;case io.UnaryExpression:nn(e.argument,t),e.constant=e.argument.constant,e.toWatch=e.argument.toWatch;break;case io.BinaryExpression:nn(e.left,t),nn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.left.toWatch.concat(e.right.toWatch);break;case io.LogicalExpression:nn(e.left,t),nn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=e.constant?[]:[e];break;case io.ConditionalExpression:nn(e.test,t),nn(e.alternate,t),nn(e.consequent,t),e.constant=e.test.constant&&e.alternate.constant&&e.consequent.constant,e.toWatch=e.constant?[]:[e];break;case io.Identifier:e.constant=!1,e.toWatch=[e];break;case io.MemberExpression:nn(e.object,t),e.computed&&nn(e.property,t),e.constant=e.object.constant&&(!e.computed||e.property.constant),e.toWatch=[e];break;case io.CallExpression:n=e.filter?tn(t,e.callee.name):!1,r=[],o(e.arguments,function(e){nn(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=e.filter&&tn(t,e.callee.name)?r:[e];break;case io.AssignmentExpression:nn(e.left,t),nn(e.right,t),e.constant=e.left.constant&&e.right.constant,e.toWatch=[e];break;case io.ArrayExpression:n=!0,r=[],o(e.elements,function(e){nn(e,t),n=n&&e.constant,e.constant||r.push.apply(r,e.toWatch)}),e.constant=n,e.toWatch=r;break;case io.ObjectExpression:n=!0,r=[],o(e.properties,function(e){nn(e.value,t),n=n&&e.value.constant,e.value.constant||r.push.apply(r,e.value.toWatch)}),e.constant=n,e.toWatch=r;break;case io.ThisExpression:e.constant=!1,e.toWatch=[]}}function rn(e){if(1==e.length){var t=e[0].expression,r=t.toWatch;return 1!==r.length?r:r[0]!==t?r:n}}function on(e){return e.type===io.Identifier||e.type===io.MemberExpression}function an(e){return 1===e.body.length&&on(e.body[0].expression)?{type:io.AssignmentExpression,left:e.body[0].expression,right:{type:io.NGValueParameter},operator:"="}:void 0}function sn(e){return 0===e.body.length||1===e.body.length&&(e.body[0].expression.type===io.Literal||e.body[0].expression.type===io.ArrayExpression||e.body[0].expression.type===io.ObjectExpression)}function cn(e){return e.constant}function ln(e,t){this.astBuilder=e,this.$filter=t}function dn(e,t){this.astBuilder=e,this.$filter=t}function un(e){return"constructor"==e}function mn(e){return A(e.valueOf)?e.valueOf():ao.call(e)}function fn(){var e=ge(),t=ge();this.$get=["$filter",function(r){function i(e,t){return null==e||null==t?e===t:"object"==typeof e&&(e=mn(e),"object"==typeof e)?!1:e===t||e!==e&&t!==t}function a(e,t,r,o,a){var s,c=o.inputs;if(1===c.length){var l=i;return c=c[0],e.$watch(function(e){var t=c(e);return i(t,l)||(s=o(e,n,n,[t]),l=t&&mn(t)),s},t,r,a)}for(var d=[],u=[],m=0,f=c.length;f>m;m++)d[m]=i,u[m]=null;return e.$watch(function(e){for(var t=!1,r=0,a=c.length;a>r;r++){var l=c[r](e);(t||(t=!i(l,d[r])))&&(u[r]=l,d[r]=l&&mn(l))}return t&&(s=o(e,n,n,u)),s},t,r,a)}function s(e,t,n,r){var i,o;return i=e.$watch(function(e){return r(e)},function(e,n,r){o=e,A(t)&&t.apply(this,arguments),E(e)&&r.$$postDigest(function(){E(o)&&i()})},n)}function c(e,t,n,r){function i(e){var t=!0;return o(e,function(e){E(e)||(t=!1)}),t}var a,s;return a=e.$watch(function(e){return r(e)},function(e,n,r){s=e,A(t)&&t.call(this,e,n,r),i(e)&&r.$$postDigest(function(){i(s)&&a()})},n)}function l(e,t,n,r){var i;return i=e.$watch(function(e){return r(e)},function(e,n,r){A(t)&&t.apply(this,arguments),i()},n)}function d(e,t){if(!t)return e;var n=e.$$watchDelegate,r=!1,i=n!==c&&n!==s,o=i?function(n,i,o,a){var s=r&&a?a[0]:e(n,i,o,a);return t(s,n,i)}:function(n,r,i,o){var a=e(n,r,i,o),s=t(a,n,r);return E(a)?s:a};return e.$$watchDelegate&&e.$$watchDelegate!==a?o.$$watchDelegate=e.$$watchDelegate:t.$stateful||(o.$$watchDelegate=a,r=!e.inputs,o.inputs=e.inputs?e.inputs:[e]),o}var u=zr().noUnsafeEval,m={csp:u,expensiveChecks:!1},f={csp:u,expensiveChecks:!0};return function(n,i,o){var u,p,g;switch(typeof n){case"string":n=n.trim(),g=n;var v=o?t:e;if(u=v[g],!u){":"===n.charAt(0)&&":"===n.charAt(1)&&(p=!0,n=n.substring(2));var $=o?f:m,b=new ro($),E=new oo(b,r,$);u=E.parse(n),u.constant?u.$$watchDelegate=l:p?u.$$watchDelegate=u.literal?c:s:u.inputs&&(u.$$watchDelegate=a),v[g]=u}return d(u,i);case"function":return d(n,i);default:return h}}}]}function pn(){this.$get=["$rootScope","$exceptionHandler",function(e,t){return gn(function(t){e.$evalAsync(t)},t)}]}function hn(){this.$get=["$browser","$exceptionHandler",function(e,t){return gn(function(t){e.defer(t)},t)}]}function gn(e,t){function i(e,t,n){function r(t){return function(n){i||(i=!0,t.call(e,n))}}var i=!1;return[r(t),r(n)]}function a(){this.$$state={status:0}}function s(e,t){return function(n){t.call(e,n)}}function c(e){var r,i,o;o=e.pending,e.processScheduled=!1,e.pending=n;for(var a=0,s=o.length;s>a;++a){i=o[a][0],r=o[a][e.status];try{A(r)?i.resolve(r(e.value)):1===e.status?i.resolve(e.value):i.reject(e.value)}catch(c){i.reject(c),t(c)}}}function l(t){!t.processScheduled&&t.pending&&(t.processScheduled=!0,e(function(){c(t)}))}function d(){this.promise=new a,this.resolve=s(this,this.resolve),this.reject=s(this,this.reject),this.notify=s(this,this.notify)}function m(e){var t=new d,n=0,r=Vr(e)?[]:{};return o(e,function(e,i){n++,$(e).then(function(e){r.hasOwnProperty(i)||(r[i]=e,--n||t.resolve(r))},function(e){r.hasOwnProperty(i)||t.reject(e)})}),0===n&&t.resolve(r),t.promise}var f=r("$q",TypeError),p=function(){return new d};u(a.prototype,{then:function(e,t,n){if(b(e)&&b(t)&&b(n))return this;var r=new d;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,e,t,n]),this.$$state.status>0&&l(this.$$state),r.promise},"catch":function(e){return this.then(null,e)},"finally":function(e,t){return this.then(function(t){return v(t,!0,e)},function(t){return v(t,!1,e)},t)}}),u(d.prototype,{resolve:function(e){this.promise.$$state.status||(e===this.promise?this.$$reject(f("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):this.$$resolve(e))},$$resolve:function(e){var n,r;r=i(this,this.$$resolve,this.$$reject);try{(y(e)||A(e))&&(n=e&&e.then),A(n)?(this.promise.$$state.status=-1,n.call(e,r[0],r[1],this.notify)):(this.promise.$$state.value=e,this.promise.$$state.status=1,l(this.promise.$$state))}catch(o){r[1](o),t(o)}},reject:function(e){this.promise.$$state.status||this.$$reject(e)},$$reject:function(e){this.promise.$$state.value=e,this.promise.$$state.status=2,l(this.promise.$$state)},notify:function(n){var r=this.promise.$$state.pending;this.promise.$$state.status<=0&&r&&r.length&&e(function(){for(var e,i,o=0,a=r.length;a>o;o++){i=r[o][0],e=r[o][3];try{i.notify(A(e)?e(n):n);
}catch(s){t(s)}}})}});var h=function(e){var t=new d;return t.reject(e),t.promise},g=function(e,t){var n=new d;return t?n.resolve(e):n.reject(e),n.promise},v=function(e,t,n){var r=null;try{A(n)&&(r=n())}catch(i){return g(i,!1)}return O(r)?r.then(function(){return g(e,t)},function(e){return g(e,!1)}):g(e,t)},$=function(e,t,n,r){var i=new d;return i.resolve(e),i.promise.then(t,n,r)},E=$,M=function C(e){function t(e){r.resolve(e)}function n(e){r.reject(e)}if(!A(e))throw f("norslvr","Expected resolverFn, got '{0}'",e);if(!(this instanceof C))return new C(e);var r=new d;return e(t,n),r.promise};return M.defer=p,M.reject=h,M.when=$,M.resolve=E,M.all=m,M}function vn(){this.$get=["$window","$timeout",function(e,t){var n=e.requestAnimationFrame||e.webkitRequestAnimationFrame,r=e.cancelAnimationFrame||e.webkitCancelAnimationFrame||e.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(e){var t=n(e);return function(){r(t)}}:function(e){var n=t(e,16.66,!1);return function(){t.cancel(n)}};return o.supported=i,o}]}function $n(){function e(e){function t(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=c(),this.$$ChildScope=null}return t.prototype=e,t}var t=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(e){return arguments.length&&(t=e),t},this.$get=["$injector","$exceptionHandler","$parse","$browser",function(r,l,d,u){function m(e){e.currentScope.$$destroyed=!0}function f(e){9===Tr&&(e.$$childHead&&f(e.$$childHead),e.$$nextSibling&&f(e.$$nextSibling)),e.$parent=e.$$nextSibling=e.$$prevSibling=e.$$childHead=e.$$childTail=e.$root=e.$$watchers=null}function p(){this.$id=c(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function g(e){if(x.$$phase)throw n("inprog","{0} already in progress",x.$$phase);x.$$phase=e}function v(){x.$$phase=null}function $(e,t){do e.$$watchersCount+=t;while(e=e.$parent)}function E(e,t,n){do e.$$listenerCount[n]-=t,0===e.$$listenerCount[n]&&delete e.$$listenerCount[n];while(e=e.$parent)}function M(){}function C(){for(;S.length;)try{S.shift()()}catch(e){l(e)}s=null}function w(){null===s&&(s=u.defer(function(){x.$apply(C)}))}p.prototype={constructor:p,$new:function(t,n){var r;return n=n||this,t?(r=new p,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=e(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(t||n!=this)&&r.$on("$destroy",m),r},$watch:function(e,t,n,r){var i=d(e);if(i.$$watchDelegate)return i.$$watchDelegate(this,t,n,i,e);var o=this,s=o.$$watchers,c={fn:t,last:M,get:i,exp:r||e,eq:!!n};return a=null,A(t)||(c.fn=h),s||(s=o.$$watchers=[]),s.unshift(c),$(this,1),function(){F(s,c)>=0&&$(o,-1),a=null}},$watchGroup:function(e,t){function n(){c=!1,l?(l=!1,t(i,i,s)):t(i,r,s)}var r=new Array(e.length),i=new Array(e.length),a=[],s=this,c=!1,l=!0;if(!e.length){var d=!0;return s.$evalAsync(function(){d&&t(i,i,s)}),function(){d=!1}}return 1===e.length?this.$watch(e[0],function(e,n,o){i[0]=e,r[0]=n,t(i,e===n?i:r,o)}):(o(e,function(e,t){var o=s.$watch(e,function(e,o){i[t]=e,r[t]=o,c||(c=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(e,t){function n(e){o=e;var t,n,r,s,c;if(!b(o)){if(y(o))if(i(o)){a!==f&&(a=f,g=a.length=0,u++),t=o.length,g!==t&&(u++,a.length=g=t);for(var l=0;t>l;l++)c=a[l],s=o[l],r=c!==c&&s!==s,r||c===s||(u++,a[l]=s)}else{a!==p&&(a=p={},g=0,u++),t=0;for(n in o)wr.call(o,n)&&(t++,s=o[n],c=a[n],n in a?(r=c!==c&&s!==s,r||c===s||(u++,a[n]=s)):(g++,a[n]=s,u++));if(g>t){u++;for(n in a)wr.call(o,n)||(g--,delete a[n])}}else a!==o&&(a=o,u++);return u}}function r(){if(h?(h=!1,t(o,o,c)):t(o,s,c),l)if(y(o))if(i(o)){s=new Array(o.length);for(var e=0;e<o.length;e++)s[e]=o[e]}else{s={};for(var n in o)wr.call(o,n)&&(s[n]=o[n])}else s=o}n.$stateful=!0;var o,a,s,c=this,l=t.length>1,u=0,m=d(e,n),f=[],p={},h=!0,g=0;return this.$watch(m,r)},$digest:function(){var e,r,i,o,c,d,m,f,p,h,$=t,b=this,E=[];g("$digest"),u.$$checkUrlChange(),this===x&&null!==s&&(u.defer.cancel(s),C()),a=null;do{for(d=!1,f=b;k.length;){try{h=k.shift(),h.scope.$eval(h.expression,h.locals)}catch(y){l(y)}a=null}e:do{if(o=f.$$watchers)for(c=o.length;c--;)try{if(e=o[c])if((r=e.get(f))===(i=e.last)||(e.eq?B(r,i):"number"==typeof r&&"number"==typeof i&&isNaN(r)&&isNaN(i))){if(e===a){d=!1;break e}}else d=!0,a=e,e.last=e.eq?j(r,null):r,e.fn(r,i===M?r:i,f),5>$&&(p=4-$,E[p]||(E[p]=[]),E[p].push({msg:A(e.exp)?"fn: "+(e.exp.name||e.exp.toString()):e.exp,newVal:r,oldVal:i}))}catch(y){l(y)}if(!(m=f.$$watchersCount&&f.$$childHead||f!==b&&f.$$nextSibling))for(;f!==b&&!(m=f.$$nextSibling);)f=f.$parent}while(f=m);if((d||k.length)&&!$--)throw v(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",t,E)}while(d||k.length);for(v();T.length;)try{T.shift()()}catch(y){l(y)}},$destroy:function(){if(!this.$$destroyed){var e=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===x&&u.$$applicationDestroyed(),$(this,-this.$$watchersCount);for(var t in this.$$listenerCount)E(this,this.$$listenerCount[t],t);e&&e.$$childHead==this&&(e.$$childHead=this.$$nextSibling),e&&e.$$childTail==this&&(e.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=h,this.$on=this.$watch=this.$watchGroup=function(){return h},this.$$listeners={},this.$$nextSibling=null,f(this)}},$eval:function(e,t){return d(e)(this,t)},$evalAsync:function(e,t){x.$$phase||k.length||u.defer(function(){k.length&&x.$digest()}),k.push({scope:this,expression:e,locals:t})},$$postDigest:function(e){T.push(e)},$apply:function(e){try{g("$apply");try{return this.$eval(e)}finally{v()}}catch(t){l(t)}finally{try{x.$digest()}catch(t){throw l(t),t}}},$applyAsync:function(e){function t(){n.$eval(e)}var n=this;e&&S.push(t),w()},$on:function(e,t){var n=this.$$listeners[e];n||(this.$$listeners[e]=n=[]),n.push(t);var r=this;do r.$$listenerCount[e]||(r.$$listenerCount[e]=0),r.$$listenerCount[e]++;while(r=r.$parent);var i=this;return function(){var r=n.indexOf(t);-1!==r&&(n[r]=null,E(i,1,e))}},$emit:function(e,t){var n,r,i,o=[],a=this,s=!1,c={name:e,targetScope:a,stopPropagation:function(){s=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},d=U([c],arguments,1);do{for(n=a.$$listeners[e]||o,c.currentScope=a,r=0,i=n.length;i>r;r++)if(n[r])try{n[r].apply(null,d)}catch(u){l(u)}else n.splice(r,1),r--,i--;if(s)return c.currentScope=null,c;a=a.$parent}while(a);return c.currentScope=null,c},$broadcast:function(e,t){var n=this,r=n,i=n,o={name:e,targetScope:n,preventDefault:function(){o.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[e])return o;for(var a,s,c,d=U([o],arguments,1);r=i;){for(o.currentScope=r,a=r.$$listeners[e]||[],s=0,c=a.length;c>s;s++)if(a[s])try{a[s].apply(null,d)}catch(u){l(u)}else a.splice(s,1),s--,c--;if(!(i=r.$$listenerCount[e]&&r.$$childHead||r!==n&&r.$$nextSibling))for(;r!==n&&!(i=r.$$nextSibling);)r=r.$parent}return o.currentScope=null,o}};var x=new p,k=x.$$asyncQueue=[],T=x.$$postDigestQueue=[],S=x.$$applyAsyncQueue=[];return x}]}function bn(){var e=/^\s*(https?|ftp|mailto|tel|file):/,t=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(t){return E(t)?(e=t,this):e},this.imgSrcSanitizationWhitelist=function(e){return E(e)?(t=e,this):t},this.$get=function(){return function(n,r){var i,o=r?t:e;return i=Tn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function En(e){if("self"===e)return e;if(C(e)){if(e.indexOf("***")>-1)throw so("iwcard","Illegal sequence *** in string matcher.  String: {0}",e);return e=qr(e).replace("\\*\\*",".*").replace("\\*","[^:/.?&;]*"),new RegExp("^"+e+"$")}if(k(e))return new RegExp("^"+e.source+"$");throw so("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function yn(e){var t=[];return E(e)&&o(e,function(e){t.push(En(e))}),t}function Mn(){this.SCE_CONTEXTS=co;var e=["self"],t=[];this.resourceUrlWhitelist=function(t){return arguments.length&&(e=yn(t)),e},this.resourceUrlBlacklist=function(e){return arguments.length&&(t=yn(e)),t},this.$get=["$injector",function(n){function r(e,t){return"self"===e?Sn(t):!!e.exec(t.href)}function i(n){var i,o,a=Tn(n.toString()),s=!1;for(i=0,o=e.length;o>i;i++)if(r(e[i],a)){s=!0;break}if(s)for(i=0,o=t.length;o>i;i++)if(r(t[i],a)){s=!1;break}return s}function o(e){var t=function(e){this.$$unwrapTrustedValue=function(){return e}};return e&&(t.prototype=new e),t.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},t.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},t}function a(e,t){var n=u.hasOwnProperty(e)?u[e]:null;if(!n)throw so("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",e,t);if(null===t||b(t)||""===t)return t;if("string"!=typeof t)throw so("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",e);return new n(t)}function s(e){return e instanceof d?e.$$unwrapTrustedValue():e}function c(e,t){if(null===t||b(t)||""===t)return t;var n=u.hasOwnProperty(e)?u[e]:null;if(n&&t instanceof n)return t.$$unwrapTrustedValue();if(e===co.RESOURCE_URL){if(i(t))return t;throw so("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",t.toString())}if(e===co.HTML)return l(t);throw so("unsafe","Attempting to use an unsafe value in a safe context.")}var l=function(e){throw so("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(l=n.get("$sanitize"));var d=o(),u={};return u[co.HTML]=o(d),u[co.CSS]=o(d),u[co.URL]=o(d),u[co.JS]=o(d),u[co.RESOURCE_URL]=o(u[co.URL]),{trustAs:a,getTrusted:c,valueOf:s}}]}function Cn(){var e=!0;this.enabled=function(t){return arguments.length&&(e=!!t),e},this.$get=["$parse","$sceDelegate",function(t,n){if(e&&8>Tr)throw so("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=V(co);r.isEnabled=function(){return e},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,e||(r.trustAs=r.getTrusted=function(e,t){return t},r.valueOf=g),r.parseAs=function(e,n){var i=t(n);return i.literal&&i.constant?i:t(n,function(t){return r.getTrusted(e,t)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(co,function(e,t){var n=Cr(t);r[Me("parse_as_"+n)]=function(t){return i(e,t)},r[Me("get_trusted_"+n)]=function(t){return a(e,t)},r[Me("trust_as_"+n)]=function(t){return s(e,t)}}),r}]}function wn(){this.$get=["$window","$document",function(e,t){var n,r,i={},o=f((/android (\d+)/.exec(Cr((e.navigator||{}).userAgent))||[])[1]),a=/Boxee/i.test((e.navigator||{}).userAgent),s=t[0]||{},c=/^(Moz|webkit|ms)(?=[A-Z])/,l=s.body&&s.body.style,d=!1,u=!1;if(l){for(var m in l)if(r=c.exec(m)){n=r[0],n=n.substr(0,1).toUpperCase()+n.substr(1);break}n||(n="WebkitOpacity"in l&&"webkit"),d=!!("transition"in l||n+"Transition"in l),u=!!("animation"in l||n+"Animation"in l),!o||d&&u||(d=C(l.webkitTransition),u=C(l.webkitAnimation))}return{history:!(!e.history||!e.history.pushState||4>o||a),hasEvent:function(e){if("input"===e&&11>=Tr)return!1;if(b(i[e])){var t=s.createElement("div");i[e]="on"+e in t}return i[e]},csp:zr(),vendorPrefix:n,transitions:d,animations:u,android:o}}]}function xn(){this.$get=["$templateCache","$http","$q","$sce",function(e,t,n,r){function i(o,a){function s(e){if(!a)throw Oi("tpload","Failed to load template: {0} (HTTP status: {1} {2})",o,e.status,e.statusText);return n.reject(e)}i.totalPendingRequests++,C(o)&&e.get(o)||(o=r.getTrustedResourceUrl(o));var c=t.defaults&&t.defaults.transformResponse;Vr(c)?c=c.filter(function(e){return e!==yt}):c===yt&&(c=null);var l={cache:e,transformResponse:c};return t.get(o,l)["finally"](function(){i.totalPendingRequests--}).then(function(t){return e.put(o,t.data),t.data},s)}return i.totalPendingRequests=0,i}]}function An(){this.$get=["$rootScope","$browser","$location",function(e,t,n){var r={};return r.findBindings=function(e,t,n){var r=e.getElementsByClassName("ng-binding"),i=[];return o(r,function(e){var r=Lr.element(e).data("$binding");r&&o(r,function(r){if(n){var o=new RegExp("(^|\\s)"+qr(t)+"(\\s|\\||$)");o.test(r)&&i.push(e)}else-1!=r.indexOf(t)&&i.push(e)})}),i},r.findModels=function(e,t,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+t+'"]',s=e.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(t){t!==n.url()&&(n.url(t),e.$digest())},r.whenStable=function(e){t.notifyWhenNoOutstandingRequests(e)},r}]}function kn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(e,t,n,r,i){function o(o,s,c){A(o)||(c=s,s=o,o=h);var l,d=q(arguments,3),u=E(c)&&!c,m=(u?r:n).defer(),f=m.promise;return l=t.defer(function(){try{m.resolve(o.apply(null,d))}catch(t){m.reject(t),i(t)}finally{delete a[f.$$timeoutId]}u||e.$apply()},s),f.$$timeoutId=l,a[l]=m,f}var a={};return o.cancel=function(e){return e&&e.$$timeoutId in a?(a[e.$$timeoutId].reject("canceled"),delete a[e.$$timeoutId],t.defer.cancel(e.$$timeoutId)):!1},o}]}function Tn(e){var t=e;return Tr&&(lo.setAttribute("href",t),t=lo.href),lo.setAttribute("href",t),{href:lo.href,protocol:lo.protocol?lo.protocol.replace(/:$/,""):"",host:lo.host,search:lo.search?lo.search.replace(/^\?/,""):"",hash:lo.hash?lo.hash.replace(/^#/,""):"",hostname:lo.hostname,port:lo.port,pathname:"/"===lo.pathname.charAt(0)?lo.pathname:"/"+lo.pathname}}function Sn(e){var t=C(e)?Tn(e):e;return t.protocol===uo.protocol&&t.host===uo.host}function Nn(){this.$get=v(e)}function _n(e){function t(e){try{return decodeURIComponent(e)}catch(t){return e}}var n=e[0]||{},r={},i="";return function(){var e,o,a,s,c,l=n.cookie||"";if(l!==i)for(i=l,e=i.split("; "),r={},a=0;a<e.length;a++)o=e[a],s=o.indexOf("="),s>0&&(c=t(o.substring(0,s)),b(r[c])&&(r[c]=t(o.substring(s+1))));return r}}function Dn(){this.$get=_n}function Hn(e){function t(r,i){if(y(r)){var a={};return o(r,function(e,n){a[n]=t(n,e)}),a}return e.factory(r+n,i)}var n="Filter";this.register=t,this.$get=["$injector",function(e){return function(t){return e.get(t+n)}}],t("currency",Ln),t("date",Zn),t("filter",On),t("json",Jn),t("limitTo",Qn),t("lowercase",go),t("number",Fn),t("orderBy",er),t("uppercase",vo)}function On(){return function(e,t,n){if(!i(e)){if(null==e)return e;throw r("filter")("notarray","Expected array but received: {0}",e)}var o,a,s=Pn(t);switch(s){case"function":o=t;break;case"boolean":case"null":case"number":case"string":a=!0;case"object":o=In(t,n,a);break;default:return e}return Array.prototype.filter.call(e,o)}}function In(e,t,n){var r,i=y(e)&&"$"in e;return t===!0?t=B:A(t)||(t=function(e,t){return b(e)?!1:null===e||null===t?e===t:y(t)||y(e)&&!$(e)?!1:(e=Cr(""+e),t=Cr(""+t),-1!==e.indexOf(t))}),r=function(r){return i&&!y(r)?Rn(r,e.$,t,!1):Rn(r,e,t,n)}}function Rn(e,t,n,r,i){var o=Pn(e),a=Pn(t);if("string"===a&&"!"===t.charAt(0))return!Rn(e,t.substring(1),n,r);if(Vr(e))return e.some(function(e){return Rn(e,t,n,r)});switch(o){case"object":var s;if(r){for(s in e)if("$"!==s.charAt(0)&&Rn(e[s],t,n,!0))return!0;return i?!1:Rn(e,t,n,!1)}if("object"===a){for(s in t){var c=t[s];if(!A(c)&&!b(c)){var l="$"===s,d=l?e:e[s];if(!Rn(d,c,n,l,l))return!1}}return!0}return n(e,t);case"function":return!1;default:return n(e,t)}}function Pn(e){return null===e?"null":typeof e}function Ln(e){var t=e.NUMBER_FORMATS;return function(e,n,r){return b(n)&&(n=t.CURRENCY_SYM),b(r)&&(r=t.PATTERNS[1].maxFrac),null==e?e:jn(e,t.PATTERNS[1],t.GROUP_SEP,t.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Fn(e){var t=e.NUMBER_FORMATS;return function(e,n){return null==e?e:jn(e,t.PATTERNS[0],t.GROUP_SEP,t.DECIMAL_SEP,n)}}function jn(e,t,n,r,i){if(y(e))return"";var o=0>e;e=Math.abs(e);var a=e===1/0;if(!a&&!isFinite(e))return"";var s=e+"",c="",l=!1,d=[];if(a&&(c="∞"),!a&&-1!==s.indexOf("e")){var u=s.match(/([\d\.]+)e(-?)(\d+)/);u&&"-"==u[2]&&u[3]>i+1?e=0:(c=s,l=!0)}if(a||l)i>0&&1>e&&(c=e.toFixed(i),e=parseFloat(c),c=c.replace(mo,r));else{var m=(s.split(mo)[1]||"").length;b(i)&&(i=Math.min(Math.max(t.minFrac,m),t.maxFrac)),e=+(Math.round(+(e.toString()+"e"+i)).toString()+"e"+-i);var f=(""+e).split(mo),p=f[0];f=f[1]||"";var h,g=0,v=t.lgSize,$=t.gSize;if(p.length>=v+$)for(g=p.length-v,h=0;g>h;h++)(g-h)%$===0&&0!==h&&(c+=n),c+=p.charAt(h);for(h=g;h<p.length;h++)(p.length-h)%v===0&&0!==h&&(c+=n),c+=p.charAt(h);for(;f.length<i;)f+="0";i&&"0"!==i&&(c+=r+f.substr(0,i))}return 0===e&&(o=!1),d.push(o?t.negPre:t.posPre,c,o?t.negSuf:t.posSuf),d.join("")}function Vn(e,t,n){var r="";for(0>e&&(r="-",e=-e),e=""+e;e.length<t;)e="0"+e;return n&&(e=e.substr(e.length-t)),r+e}function Bn(e,t,n,r){return n=n||0,function(i){var o=i["get"+e]();return(n>0||o>-n)&&(o+=n),0===o&&-12==n&&(o=12),Vn(o,t,r)}}function Un(e,t){return function(n,r){var i=n["get"+e](),o=xr(t?"SHORT"+e:e);return r[o][i]}}function qn(e,t,n){var r=-1*n,i=r>=0?"+":"";return i+=Vn(Math[r>0?"floor":"ceil"](r/60),2)+Vn(Math.abs(r%60),2)}function zn(e){var t=new Date(e,0,1).getDay();return new Date(e,0,(4>=t?5:12)-t)}function Wn(e){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+(4-e.getDay()))}function Yn(e){return function(t){var n=zn(t.getFullYear()),r=Wn(t),i=+r-+n,o=1+Math.round(i/6048e5);return Vn(o,e)}}function Kn(e,t){return e.getHours()<12?t.AMPMS[0]:t.AMPMS[1]}function Gn(e,t){return e.getFullYear()<=0?t.ERAS[0]:t.ERAS[1]}function Xn(e,t){return e.getFullYear()<=0?t.ERANAMES[0]:t.ERANAMES[1]}function Zn(e){function t(e){var t;if(t=e.match(n)){var r=new Date(0),i=0,o=0,a=t[8]?r.setUTCFullYear:r.setFullYear,s=t[8]?r.setUTCHours:r.setHours;t[9]&&(i=f(t[9]+t[10]),o=f(t[9]+t[11])),a.call(r,f(t[1]),f(t[2])-1,f(t[3]));var c=f(t[4]||0)-i,l=f(t[5]||0)-o,d=f(t[6]||0),u=Math.round(1e3*parseFloat("0."+(t[7]||0)));return s.call(r,c,l,d,u),r}return e}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,c="",l=[];if(r=r||"mediumDate",r=e.DATETIME_FORMATS[r]||r,C(n)&&(n=ho.test(n)?f(n):t(n)),w(n)&&(n=new Date(n)),!x(n)||!isFinite(n.getTime()))return n;for(;r;)s=po.exec(r),s?(l=U(l,s,1),r=l.pop()):(l.push(r),r=null);var d=n.getTimezoneOffset();return i&&(d=G(i,n.getTimezoneOffset()),n=Z(n,i,!0)),o(l,function(t){a=fo[t],c+=a?a(n,e.DATETIME_FORMATS,d):t.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),c}}function Jn(){return function(e,t){return b(t)&&(t=2),Y(e,t)}}function Qn(){return function(e,t,n){return t=Math.abs(Number(t))===1/0?Number(t):f(t),isNaN(t)?e:(w(e)&&(e=e.toString()),Vr(e)||C(e)?(n=!n||isNaN(n)?0:f(n),n=0>n?Math.max(0,e.length+n):n,t>=0?e.slice(n,n+t):0===n?e.slice(t,e.length):e.slice(Math.max(0,n+t),n)):e)}}function er(e){function t(t,n){return n=n?-1:1,t.map(function(t){var r=1,i=g;if(A(t))i=t;else if(C(t)&&(("+"==t.charAt(0)||"-"==t.charAt(0))&&(r="-"==t.charAt(0)?-1:1,t=t.substring(1)),""!==t&&(i=e(t),i.constant))){var o=i();i=function(e){return e[o]}}return{get:i,descending:r*n}})}function n(e){switch(typeof e){case"number":case"boolean":case"string":return!0;default:return!1}}function r(e,t){return"function"==typeof e.valueOf&&(e=e.valueOf(),n(e))?e:$(e)&&(e=e.toString(),n(e))?e:t}function o(e,t){var n=typeof e;return null===e?(n="string",e="null"):"string"===n?e=e.toLowerCase():"object"===n&&(e=r(e,t)),{value:e,type:n}}function a(e,t){var n=0;return e.type===t.type?e.value!==t.value&&(n=e.value<t.value?-1:1):n=e.type<t.type?-1:1,n}return function(e,n,r){function s(e,t){return{value:e,predicateValues:l.map(function(n){return o(n.get(e),t)})}}function c(e,t){for(var n=0,r=0,i=l.length;i>r&&!(n=a(e.predicateValues[r],t.predicateValues[r])*l[r].descending);++r);return n}if(!i(e))return e;Vr(n)||(n=[n]),0===n.length&&(n=["+"]);var l=t(n,r);l.push({get:function(){return{}},descending:r?-1:1});var d=Array.prototype.map.call(e,s);return d.sort(c),e=d.map(function(e){return e.value})}}function tr(e){return A(e)&&(e={link:e}),e.restrict=e.restrict||"AC",v(e)}function nr(e,t){e.$name=t}function rr(e,t,r,i,a){var s=this,c=[];s.$error={},s.$$success={},s.$pending=n,s.$name=a(t.name||t.ngForm||"")(r),s.$dirty=!1,s.$pristine=!0,s.$valid=!0,s.$invalid=!1,s.$submitted=!1,s.$$parentForm=Eo,s.$rollbackViewValue=function(){o(c,function(e){e.$rollbackViewValue()})},s.$commitViewValue=function(){o(c,function(e){e.$commitViewValue()})},s.$addControl=function(e){fe(e.$name,"input"),c.push(e),e.$name&&(s[e.$name]=e),e.$$parentForm=s},s.$$renameControl=function(e,t){var n=e.$name;s[n]===e&&delete s[n],s[t]=e,e.$name=t},s.$removeControl=function(e){e.$name&&s[e.$name]===e&&delete s[e.$name],o(s.$pending,function(t,n){s.$setValidity(n,null,e)}),o(s.$error,function(t,n){s.$setValidity(n,null,e)}),o(s.$$success,function(t,n){s.$setValidity(n,null,e)}),F(c,e),e.$$parentForm=Eo},$r({ctrl:this,$element:e,set:function(e,t,n){var r=e[t];if(r){var i=r.indexOf(n);-1===i&&r.push(n)}else e[t]=[n]},unset:function(e,t,n){var r=e[t];r&&(F(r,n),0===r.length&&delete e[t])},$animate:i}),s.$setDirty=function(){i.removeClass(e,na),i.addClass(e,ra),s.$dirty=!0,s.$pristine=!1,s.$$parentForm.$setDirty()},s.$setPristine=function(){i.setClass(e,na,ra+" "+yo),s.$dirty=!1,s.$pristine=!0,s.$submitted=!1,o(c,function(e){e.$setPristine()})},s.$setUntouched=function(){o(c,function(e){e.$setUntouched()})},s.$setSubmitted=function(){i.addClass(e,yo),s.$submitted=!0,s.$$parentForm.$setSubmitted()}}function ir(e){e.$formatters.push(function(t){return e.$isEmpty(t)?t:t.toString()})}function or(e,t,n,r,i,o){ar(e,t,n,r,i,o),ir(r)}function ar(e,t,n,r,i,o){var a=Cr(t[0].type);if(!i.android){var s=!1;t.on("compositionstart",function(e){s=!0}),t.on("compositionend",function(){s=!1,c()})}var c=function(e){if(l&&(o.defer.cancel(l),l=null),!s){var i=t.val(),c=e&&e.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=Ur(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,c)}};if(i.hasEvent("input"))t.on("input",c);else{var l,d=function(e,t,n){l||(l=o.defer(function(){l=null,t&&t.value===n||c(e)}))};t.on("keydown",function(e){var t=e.keyCode;91===t||t>15&&19>t||t>=37&&40>=t||d(e,this,this.value)}),i.hasEvent("paste")&&t.on("paste cut",d)}t.on("change",c),r.$render=function(){var e=r.$isEmpty(r.$viewValue)?"":r.$viewValue;t.val()!==e&&t.val(e)}}function sr(e,t){if(x(e))return e;if(C(e)){_o.lastIndex=0;var n=_o.exec(e);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,c=0,l=zn(r),d=7*(i-1);return t&&(o=t.getHours(),a=t.getMinutes(),s=t.getSeconds(),c=t.getMilliseconds()),new Date(r,0,l.getDate()+d,o,a,s,c)}}return NaN}function cr(e,t){return function(n,r){var i,a;if(x(n))return n;if(C(n)){if('"'==n.charAt(0)&&'"'==n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),xo.test(n))return new Date(n);if(e.lastIndex=0,i=e.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(e,n){n<t.length&&(a[t[n]]=+e)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function lr(e,t,r,i){return function(o,a,s,c,l,d,u){function m(e){return e&&!(e.getTime&&e.getTime()!==e.getTime())}function f(e){return E(e)&&!x(e)?r(e)||n:e}dr(o,a,s,c),ar(o,a,s,c,l,d);var p,h=c&&c.$options&&c.$options.timezone;if(c.$$parserName=e,c.$parsers.push(function(e){if(c.$isEmpty(e))return null;if(t.test(e)){var i=r(e,p);return h&&(i=Z(i,h)),i}return n}),c.$formatters.push(function(e){if(e&&!x(e))throw sa("datefmt","Expected `{0}` to be a date",e);return m(e)?(p=e,p&&h&&(p=Z(p,h,!0)),u("date")(e,i,h)):(p=null,"")}),E(s.min)||s.ngMin){var g;c.$validators.min=function(e){return!m(e)||b(g)||r(e)>=g},s.$observe("min",function(e){g=f(e),c.$validate()})}if(E(s.max)||s.ngMax){var v;c.$validators.max=function(e){return!m(e)||b(v)||r(e)<=v},s.$observe("max",function(e){v=f(e),c.$validate()})}}}function dr(e,t,r,i){var o=t[0],a=i.$$hasNativeValidators=y(o.validity);a&&i.$parsers.push(function(e){var r=t.prop(Mr)||{};return r.badInput&&!r.typeMismatch?n:e})}function ur(e,t,r,i,o,a){if(dr(e,t,r,i),ar(e,t,r,i,o,a),i.$$parserName="number",i.$parsers.push(function(e){return i.$isEmpty(e)?null:To.test(e)?parseFloat(e):n}),i.$formatters.push(function(e){if(!i.$isEmpty(e)){if(!w(e))throw sa("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e}),E(r.min)||r.ngMin){var s;i.$validators.min=function(e){return i.$isEmpty(e)||b(s)||e>=s},r.$observe("min",function(e){E(e)&&!w(e)&&(e=parseFloat(e,10)),s=w(e)&&!isNaN(e)?e:n,i.$validate()})}if(E(r.max)||r.ngMax){var c;i.$validators.max=function(e){return i.$isEmpty(e)||b(c)||c>=e},r.$observe("max",function(e){E(e)&&!w(e)&&(e=parseFloat(e,10)),c=w(e)&&!isNaN(e)?e:n,i.$validate()})}}function mr(e,t,n,r,i,o){ar(e,t,n,r,i,o),ir(r),r.$$parserName="url",r.$validators.url=function(e,t){var n=e||t;return r.$isEmpty(n)||Ao.test(n)}}function fr(e,t,n,r,i,o){ar(e,t,n,r,i,o),ir(r),r.$$parserName="email",r.$validators.email=function(e,t){var n=e||t;return r.$isEmpty(n)||ko.test(n)}}function pr(e,t,n,r){b(n.name)&&t.attr("name",c());var i=function(e){t[0].checked&&r.$setViewValue(n.value,e&&e.type)};t.on("click",i),r.$render=function(){var e=n.value;t[0].checked=e==r.$viewValue},n.$observe("value",r.$render)}function hr(e,t,n,r,i){var o;if(E(r)){if(o=e(r),!o.constant)throw sa("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(t)}return i}function gr(e,t,n,r,i,o,a,s){var c=hr(s,e,"ngTrueValue",n.ngTrueValue,!0),l=hr(s,e,"ngFalseValue",n.ngFalseValue,!1),d=function(e){r.$setViewValue(t[0].checked,e&&e.type)};t.on("click",d),r.$render=function(){t[0].checked=r.$viewValue},r.$isEmpty=function(e){return e===!1},r.$formatters.push(function(e){return B(e,c)}),r.$parsers.push(function(e){return e?c:l})}function vr(e,t){return e="ngClass"+e,["$animate",function(n){function r(e,t){var n=[];e:for(var r=0;r<e.length;r++){for(var i=e[r],o=0;o<t.length;o++)if(i==t[o])continue e;n.push(i)}return n}function i(e){var t=[];return Vr(e)?(o(e,function(e){t=t.concat(i(e))}),t):C(e)?e.split(" "):y(e)?(o(e,function(e,n){e&&(t=t.concat(n.split(" ")))}),t):e}return{restrict:"AC",link:function(a,s,c){function l(e){var t=u(e,1);c.$addClass(t)}function d(e){var t=u(e,-1);c.$removeClass(t)}function u(e,t){var n=s.data("$classCounts")||ge(),r=[];return o(e,function(e){(t>0||n[e])&&(n[e]=(n[e]||0)+t,n[e]===+(t>0)&&r.push(e))}),s.data("$classCounts",n),r.join(" ")}function m(e,t){var i=r(t,e),o=r(e,t);i=u(i,1),o=u(o,-1),i&&i.length&&n.addClass(s,i),o&&o.length&&n.removeClass(s,o)}function f(e){if(t===!0||a.$index%2===t){var n=i(e||[]);if(p){if(!B(e,p)){var r=i(p);m(r,n)}}else l(n)}p=V(e)}var p;a.$watch(c[e],f,!0),c.$observe("class",function(t){f(a.$eval(c[e]))}),"ngClass"!==e&&a.$watch("$index",function(n,r){var o=1&n;if(o!==(1&r)){var s=i(a.$eval(c[e]));o===t?l(s):d(s)}})}}}]}function $r(e){function t(e,t,c){b(t)?r("$pending",e,c):i("$pending",e,c),H(t)?t?(u(s.$error,e,c),d(s.$$success,e,c)):(d(s.$error,e,c),u(s.$$success,e,c)):(u(s.$error,e,c),u(s.$$success,e,c)),s.$pending?(o(aa,!0),s.$valid=s.$invalid=n,a("",null)):(o(aa,!1),s.$valid=br(s.$error),s.$invalid=!s.$valid,a("",s.$valid));var l;l=s.$pending&&s.$pending[e]?n:s.$error[e]?!1:s.$$success[e]?!0:null,a(e,l),s.$$parentForm.$setValidity(e,l,s)}function r(e,t,n){s[e]||(s[e]={}),d(s[e],t,n)}function i(e,t,r){s[e]&&u(s[e],t,r),br(s[e])&&(s[e]=n)}function o(e,t){t&&!l[e]?(m.addClass(c,e),l[e]=!0):!t&&l[e]&&(m.removeClass(c,e),l[e]=!1)}function a(e,t){e=e?"-"+le(e,"-"):"",o(ea+e,t===!0),o(ta+e,t===!1)}var s=e.ctrl,c=e.$element,l={},d=e.set,u=e.unset,m=e.$animate;l[ta]=!(l[ea]=c.hasClass(ea)),s.$setValidity=t}function br(e){if(e)for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function Er(e){e[0].hasAttribute("selected")&&(e[0].selected=!0)}var yr=/^\/(.+)\/([a-z]*)$/,Mr="validity",Cr=function(e){return C(e)?e.toLowerCase():e},wr=Object.prototype.hasOwnProperty,xr=function(e){return C(e)?e.toUpperCase():e},Ar=function(e){return C(e)?e.replace(/[A-Z]/g,function(e){return String.fromCharCode(32|e.charCodeAt(0))}):e},kr=function(e){return C(e)?e.replace(/[a-z]/g,function(e){return String.fromCharCode(-33&e.charCodeAt(0))}):e};"i"!=="I".toLowerCase()&&(Cr=Ar,xr=kr);var Tr,Sr,Nr,_r,Dr=[].slice,Hr=[].splice,Or=[].push,Ir=Object.prototype.toString,Rr=Object.getPrototypeOf,Pr=r("ng"),Lr=e.angular||(e.angular={}),Fr=0;Tr=t.documentMode,h.$inject=[],g.$inject=[];var jr,Vr=Array.isArray,Br=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array\]$/,Ur=function(e){return C(e)?e.trim():e},qr=function(e){return e.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},zr=function(){function e(){try{return new Function(""),!1}catch(e){return!0}}if(!E(zr.rules)){var n=t.querySelector("[ng-csp]")||t.querySelector("[data-ng-csp]");if(n){var r=n.getAttribute("ng-csp")||n.getAttribute("data-ng-csp");zr.rules={noUnsafeEval:!r||-1!==r.indexOf("no-unsafe-eval"),noInlineStyle:!r||-1!==r.indexOf("no-inline-style")}}else zr.rules={noUnsafeEval:e(),noInlineStyle:!1}}return zr.rules},Wr=function(){if(E(Wr.name_))return Wr.name_;var e,n,r,i,o=Yr.length;for(n=0;o>n;++n)if(r=Yr[n],e=t.querySelector("["+r.replace(":","\\:")+"jq]")){i=e.getAttribute(r+"jq");break}return Wr.name_=i},Yr=["ng-","data-ng-","ng:","x-ng-"],Kr=/[A-Z]/g,Gr=!1,Xr=1,Zr=2,Jr=3,Qr=8,ei=9,ti=11,ni={full:"1.4.8",major:1,minor:4,dot:8,codeName:"ice-manipulation"};Te.expando="ng339";var ri=Te.cache={},ii=1,oi=function(e,t,n){e.addEventListener(t,n,!1)},ai=function(e,t,n){e.removeEventListener(t,n,!1)};Te._data=function(e){return this.cache[e[this.expando]]||{}};var si=/([\:\-\_]+(.))/g,ci=/^moz([A-Z])/,li={mouseleave:"mouseout",mouseenter:"mouseover"},di=r("jqLite"),ui=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,mi=/<|&#?\w+;/,fi=/<([\w:-]+)/,pi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,hi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};hi.optgroup=hi.option,hi.tbody=hi.tfoot=hi.colgroup=hi.caption=hi.thead,hi.th=hi.td;var gi=Node.prototype.contains||function(e){return!!(16&this.compareDocumentPosition(e))},vi=Te.prototype={ready:function(n){function r(){i||(i=!0,n())}var i=!1;"complete"===t.readyState?setTimeout(r):(this.on("DOMContentLoaded",r),Te(e).on("load",r))},toString:function(){var e=[];return o(this,function(t){e.push(""+t)}),"["+e.join(", ")+"]"},eq:function(e){return Sr(e>=0?this[e]:this[this.length+e])},length:0,push:Or,sort:[].sort,splice:[].splice},$i={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(e){$i[Cr(e)]=e});var bi={};o("input,select,option,textarea,button,form,details".split(","),function(e){bi[e]=!0});var Ei={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern"};o({data:Oe,removeData:De,hasData:xe},function(e,t){Te[t]=e}),o({data:Oe,inheritedData:je,scope:function(e){return Sr.data(e,"$scope")||je(e.parentNode||e,["$isolateScope","$scope"])},isolateScope:function(e){return Sr.data(e,"$isolateScope")||Sr.data(e,"$isolateScopeNoTemplate")},controller:Fe,injector:function(e){return je(e,"$injector")},removeAttr:function(e,t){e.removeAttribute(t)},hasClass:Ie,css:function(e,t,n){return t=Me(t),E(n)?void(e.style[t]=n):e.style[t];
},attr:function(e,t,r){var i=e.nodeType;if(i!==Jr&&i!==Zr&&i!==Qr){var o=Cr(t);if($i[o]){if(!E(r))return e[t]||(e.attributes.getNamedItem(t)||h).specified?o:n;r?(e[t]=!0,e.setAttribute(t,o)):(e[t]=!1,e.removeAttribute(o))}else if(E(r))e.setAttribute(t,r);else if(e.getAttribute){var a=e.getAttribute(t,2);return null===a?n:a}}},prop:function(e,t,n){return E(n)?void(e[t]=n):e[t]},text:function(){function e(e,t){if(b(t)){var n=e.nodeType;return n===Xr||n===Jr?e.textContent:""}e.textContent=t}return e.$dv="",e}(),val:function(e,t){if(b(t)){if(e.multiple&&"select"===L(e)){var n=[];return o(e.options,function(e){e.selected&&n.push(e.value||e.text)}),0===n.length?null:n}return e.value}e.value=t},html:function(e,t){return b(t)?e.innerHTML:(Ne(e,!0),void(e.innerHTML=t))},empty:Ve},function(e,t){Te.prototype[t]=function(t,n){var r,i,o=this.length;if(e!==Ve&&b(2==e.length&&e!==Ie&&e!==Fe?t:n)){if(y(t)){for(r=0;o>r;r++)if(e===Oe)e(this[r],t);else for(i in t)e(this[r],i,t[i]);return this}for(var a=e.$dv,s=b(a)?Math.min(o,1):o,c=0;s>c;c++){var l=e(this[c],t,n);a=a?a+l:l}return a}for(r=0;o>r;r++)e(this[r],t,n);return this}}),o({removeData:De,on:function(e,t,r,i){if(E(i))throw di("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(we(e)){var o=He(e,!0),a=o.events,s=o.handle;s||(s=o.handle=We(e,a));for(var c=t.indexOf(" ")>=0?t.split(" "):[t],l=c.length,d=function(t,n,i){var o=a[t];o||(o=a[t]=[],o.specialHandlerWrapper=n,"$destroy"===t||i||oi(e,t,s)),o.push(r)};l--;)t=c[l],li[t]?(d(li[t],Ke),d(t,n,!0)):d(t)}},off:_e,one:function(e,t,n){e=Sr(e),e.on(t,function r(){e.off(t,n),e.off(t,r)}),e.on(t,n)},replaceWith:function(e,t){var n,r=e.parentNode;Ne(e),o(new Te(t),function(t){n?r.insertBefore(t,n.nextSibling):r.replaceChild(t,e),n=t})},children:function(e){var t=[];return o(e.childNodes,function(e){e.nodeType===Xr&&t.push(e)}),t},contents:function(e){return e.contentDocument||e.childNodes||[]},append:function(e,t){var n=e.nodeType;if(n===Xr||n===ti){t=new Te(t);for(var r=0,i=t.length;i>r;r++){var o=t[r];e.appendChild(o)}}},prepend:function(e,t){if(e.nodeType===Xr){var n=e.firstChild;o(new Te(t),function(t){e.insertBefore(t,n)})}},wrap:function(e,t){t=Sr(t).eq(0).clone()[0];var n=e.parentNode;n&&n.replaceChild(t,e),t.appendChild(e)},remove:Be,detach:function(e){Be(e,!0)},after:function(e,t){var n=e,r=e.parentNode;t=new Te(t);for(var i=0,o=t.length;o>i;i++){var a=t[i];r.insertBefore(a,n.nextSibling),n=a}},addClass:Pe,removeClass:Re,toggleClass:function(e,t,n){t&&o(t.split(" "),function(t){var r=n;b(r)&&(r=!Ie(e,t)),(r?Pe:Re)(e,t)})},parent:function(e){var t=e.parentNode;return t&&t.nodeType!==ti?t:null},next:function(e){return e.nextElementSibling},find:function(e,t){return e.getElementsByTagName?e.getElementsByTagName(t):[]},clone:Se,triggerHandler:function(e,t,n){var r,i,a,s=t.type||t,c=He(e),l=c&&c.events,d=l&&l[s];d&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return this.defaultPrevented===!0},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return this.immediatePropagationStopped===!0},stopPropagation:h,type:s,target:e},t.type&&(r=u(r,t)),i=V(d),a=n?[r].concat(n):[r],o(i,function(t){r.isImmediatePropagationStopped()||t.apply(e,a)}))}},function(e,t){Te.prototype[t]=function(t,n,r){for(var i,o=0,a=this.length;a>o;o++)b(i)?(i=e(this[o],t,n,r),E(i)&&(i=Sr(i))):Le(i,e(this[o],t,n,r));return E(i)?i:this},Te.prototype.bind=Te.prototype.on,Te.prototype.unbind=Te.prototype.off}),Ze.prototype={put:function(e,t){this[Xe(e,this.nextUid)]=t},get:function(e){return this[Xe(e,this.nextUid)]},remove:function(e){var t=this[e=Xe(e,this.nextUid)];return delete this[e],t}};var yi=[function(){this.$get=[function(){return Ze}]}],Mi=/^[^\(]*\(\s*([^\)]*)\)/m,Ci=/,/,wi=/^\s*(_?)(\S+?)\1\s*$/,xi=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,Ai=r("$injector");et.$$annotate=Qe;var ki=r("$animate"),Ti=1,Si="ng-animate",Ni=function(){this.$get=["$q","$$rAF",function(e,t){function n(){}return n.all=h,n.chain=h,n.prototype={end:h,cancel:h,resume:h,pause:h,complete:h,then:function(n,r){return e(function(e){t(function(){e()})}).then(n,r)}},n}]},_i=function(){var e=new Ze,t=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(e,t,n){var r=!1;return t&&(t=C(t)?t.split(" "):Vr(t)?t:[],o(t,function(t){t&&(r=!0,e[t]=n)})),r}function a(){o(t,function(t){var n=e.get(t);if(n){var r=it(t.attr("class")),i="",a="";o(n,function(e,t){var n=!!r[t];e!==n&&(e?i+=(i.length?" ":"")+t:a+=(a.length?" ":"")+t)}),o(t,function(e){i&&Pe(e,i),a&&Re(e,a)}),e.remove(t)}}),t.length=0}function s(n,o,s){var c=e.get(n)||{},l=i(c,o,!0),d=i(c,s,!1);(l||d)&&(e.put(n,c),t.push(n),1===t.length&&r.$$postDigest(a))}return{enabled:h,on:h,off:h,pin:h,push:function(e,t,r,i){return i&&i(),r=r||{},r.from&&e.css(r.from),r.to&&e.css(r.to),(r.addClass||r.removeClass)&&s(e,r.addClass,r.removeClass),new n}}}]},Di=["$provide",function(e){var t=this;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw ki("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";t.$$registeredAnimations[n.substr(1)]=i,e.factory(i,r)},this.classNameFilter=function(e){if(1===arguments.length&&(this.$$classNameFilter=e instanceof RegExp?e:null,this.$$classNameFilter)){var t=new RegExp("(\\s+|\\/)"+Si+"(\\s+|\\/)");if(t.test(this.$$classNameFilter.toString()))throw ki("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',Si)}return this.$$classNameFilter},this.$get=["$$animateQueue",function(e){function t(e,t,n){if(n){var r=rt(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(e):t.prepend(e)}return{on:e.on,off:e.off,pin:e.pin,enabled:e.enabled,cancel:function(e){e.end&&e.end()},enter:function(n,r,i,o){return r=r&&Sr(r),i=i&&Sr(i),r=r||i.parent(),t(n,r,i),e.push(n,"enter",ot(o))},move:function(n,r,i,o){return r=r&&Sr(r),i=i&&Sr(i),r=r||i.parent(),t(n,r,i),e.push(n,"move",ot(o))},leave:function(t,n){return e.push(t,"leave",ot(n),function(){t.remove()})},addClass:function(t,n,r){return r=ot(r),r.addClass=nt(r.addclass,n),e.push(t,"addClass",r)},removeClass:function(t,n,r){return r=ot(r),r.removeClass=nt(r.removeClass,n),e.push(t,"removeClass",r)},setClass:function(t,n,r,i){return i=ot(i),i.addClass=nt(i.addClass,n),i.removeClass=nt(i.removeClass,r),e.push(t,"setClass",i)},animate:function(t,n,r,i,o){return o=ot(o),o.from=o.from?u(o.from,n):n,o.to=o.to?u(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=nt(o.tempClasses,i),e.push(t,"animate",o)}}}]}],Hi=function(){this.$get=["$$rAF","$q",function(e,t){var n=function(){};return n.prototype={done:function(e){this.defer&&this.defer[e===!0?"reject":"resolve"]()},end:function(){this.done()},cancel:function(){this.done(!0)},getPromise:function(){return this.defer||(this.defer=t.defer()),this.defer.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)}},function(t,r){function i(){return e(function(){o(),a||s.done(),a=!0}),s}function o(){r.addClass&&(t.addClass(r.addClass),r.addClass=null),r.removeClass&&(t.removeClass(r.removeClass),r.removeClass=null),r.to&&(t.css(r.to),r.to=null)}r.cleanupStyles&&(r.from=r.to=null),r.from&&(t.css(r.from),r.from=null);var a,s=new n;return{start:i,end:i}}}]},Oi=r("$compile");dt.$inject=["$provide","$$sanitizeUriProvider"];var Ii=/^((?:x|data)[\:\-_])/i,Ri=r("$controller"),Pi=/^(\S+)(\s+as\s+(\w+))?$/,Li=function(){this.$get=["$document",function(e){return function(t){return t?!t.nodeType&&t instanceof Sr&&(t=t[0]):t=e[0].body,t.offsetWidth+1}}]},Fi="application/json",ji={"Content-Type":Fi+";charset=utf-8"},Vi=/^\[|^\{(?!\{)/,Bi={"[":/]$/,"{":/}$/},Ui=/^\)\]\}',?\n/,qi=r("$http"),zi=function(e){return function(){throw qi("legacy","The method `{0}` on the promise returned from `$http` has been disabled.",e)}},Wi=Lr.$interpolateMinErr=r("$interpolate");Wi.throwNoconcat=function(e){throw Wi("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",e)},Wi.interr=function(e,t){return Wi("interr","Can't interpolate: {0}\n{1}",e,t.toString())};var Yi=/^([^\?#]*)(\?([^#]*))?(#(.*))?$/,Ki={http:80,https:443,ftp:21},Gi=r("$location"),Xi={$$html5:!1,$$replace:!1,absUrl:qt("$$absUrl"),url:function(e){if(b(e))return this.$$url;var t=Yi.exec(e);return(t[1]||""===e)&&this.path(decodeURIComponent(t[1])),(t[2]||t[1]||""===e)&&this.search(t[3]||""),this.hash(t[5]||""),this},protocol:qt("$$protocol"),host:qt("$$host"),port:qt("$$port"),path:zt("$$path",function(e){return e=null!==e?e.toString():"","/"==e.charAt(0)?e:"/"+e}),search:function(e,t){switch(arguments.length){case 0:return this.$$search;case 1:if(C(e)||w(e))e=e.toString(),this.$$search=ee(e);else{if(!y(e))throw Gi("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");e=j(e,{}),o(e,function(t,n){null==t&&delete e[n]}),this.$$search=e}break;default:b(t)||null===t?delete this.$$search[e]:this.$$search[e]=t}return this.$$compose(),this},hash:zt("$$hash",function(e){return null!==e?e.toString():""}),replace:function(){return this.$$replace=!0,this}};o([Ut,Bt,Vt],function(e){e.prototype=Object.create(Xi),e.prototype.state=function(t){if(!arguments.length)return this.$$state;if(e!==Vt||!this.$$html5)throw Gi("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=b(t)?null:t,this}});var Zi=r("$parse"),Ji=Function.prototype.call,Qi=Function.prototype.apply,eo=Function.prototype.bind,to=ge();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(e){to[e]=!0});var no={n:"\n",f:"\f",r:"\r",t:"	",v:"\x0B","'":"'",'"':'"'},ro=function(e){this.options=e};ro.prototype={constructor:ro,lex:function(e){for(this.text=e,this.index=0,this.tokens=[];this.index<this.text.length;){var t=this.text.charAt(this.index);if('"'===t||"'"===t)this.readString(t);else if(this.isNumber(t)||"."===t&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdent(t))this.readIdent();else if(this.is(t,"(){}[].,;:?"))this.tokens.push({index:this.index,text:t}),this.index++;else if(this.isWhitespace(t))this.index++;else{var n=t+this.peek(),r=n+this.peek(2),i=to[t],o=to[n],a=to[r];if(i||o||a){var s=a?r:o?n:t;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(e,t){return-1!==t.indexOf(e)},peek:function(e){var t=e||1;return this.index+t<this.text.length?this.text.charAt(this.index+t):!1},isNumber:function(e){return e>="0"&&"9">=e&&"string"==typeof e},isWhitespace:function(e){return" "===e||"\r"===e||"	"===e||"\n"===e||"\x0B"===e||" "===e},isIdent:function(e){return e>="a"&&"z">=e||e>="A"&&"Z">=e||"_"===e||"$"===e},isExpOperator:function(e){return"-"===e||"+"===e||this.isNumber(e)},throwError:function(e,t,n){n=n||this.index;var r=E(t)?"s "+t+"-"+this.index+" ["+this.text.substring(t,n)+"]":" "+n;throw Zi("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",e,r,this.text)},readNumber:function(){for(var e="",t=this.index;this.index<this.text.length;){var n=Cr(this.text.charAt(this.index));if("."==n||this.isNumber(n))e+=n;else{var r=this.peek();if("e"==n&&this.isExpOperator(r))e+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"==e.charAt(e.length-1))e+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!=e.charAt(e.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:t,text:e,constant:!0,value:Number(e)})},readIdent:function(){for(var e=this.index;this.index<this.text.length;){var t=this.text.charAt(this.index);if(!this.isIdent(t)&&!this.isNumber(t))break;this.index++}this.tokens.push({index:e,text:this.text.slice(e,this.index),identifier:!0})},readString:function(e){var t=this.index;this.index++;for(var n="",r=e,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{var s=no[o];n+=s||o}i=!1}else if("\\"===o)i=!0;else{if(o===e)return this.index++,void this.tokens.push({index:t,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",t)}};var io=function(e,t){this.lexer=e,this.options=t};io.Program="Program",io.ExpressionStatement="ExpressionStatement",io.AssignmentExpression="AssignmentExpression",io.ConditionalExpression="ConditionalExpression",io.LogicalExpression="LogicalExpression",io.BinaryExpression="BinaryExpression",io.UnaryExpression="UnaryExpression",io.CallExpression="CallExpression",io.MemberExpression="MemberExpression",io.Identifier="Identifier",io.Literal="Literal",io.ArrayExpression="ArrayExpression",io.Property="Property",io.ObjectExpression="ObjectExpression",io.ThisExpression="ThisExpression",io.NGValueParameter="NGValueParameter",io.prototype={ast:function(e){this.text=e,this.tokens=this.lexer.lex(e);var t=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),t},program:function(){for(var e=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&e.push(this.expressionStatement()),!this.expect(";"))return{type:io.Program,body:e}},expressionStatement:function(){return{type:io.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var e,t=this.expression();e=this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var e=this.ternary();return this.expect("=")&&(e={type:io.AssignmentExpression,left:e,right:this.assignment(),operator:"="}),e},ternary:function(){var e,t,n=this.logicalOR();return this.expect("?")&&(e=this.expression(),this.consume(":"))?(t=this.expression(),{type:io.ConditionalExpression,test:n,alternate:e,consequent:t}):n},logicalOR:function(){for(var e=this.logicalAND();this.expect("||");)e={type:io.LogicalExpression,operator:"||",left:e,right:this.logicalAND()};return e},logicalAND:function(){for(var e=this.equality();this.expect("&&");)e={type:io.LogicalExpression,operator:"&&",left:e,right:this.equality()};return e},equality:function(){for(var e,t=this.relational();e=this.expect("==","!=","===","!==");)t={type:io.BinaryExpression,operator:e.text,left:t,right:this.relational()};return t},relational:function(){for(var e,t=this.additive();e=this.expect("<",">","<=",">=");)t={type:io.BinaryExpression,operator:e.text,left:t,right:this.additive()};return t},additive:function(){for(var e,t=this.multiplicative();e=this.expect("+","-");)t={type:io.BinaryExpression,operator:e.text,left:t,right:this.multiplicative()};return t},multiplicative:function(){for(var e,t=this.unary();e=this.expect("*","/","%");)t={type:io.BinaryExpression,operator:e.text,left:t,right:this.unary()};return t},unary:function(){var e;return(e=this.expect("+","-","!"))?{type:io.UnaryExpression,operator:e.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var e;this.expect("(")?(e=this.filterChain(),this.consume(")")):this.expect("[")?e=this.arrayDeclaration():this.expect("{")?e=this.object():this.constants.hasOwnProperty(this.peek().text)?e=j(this.constants[this.consume().text]):this.peek().identifier?e=this.identifier():this.peek().constant?e=this.constant():this.throwError("not a primary expression",this.peek());for(var t;t=this.expect("(","[",".");)"("===t.text?(e={type:io.CallExpression,callee:e,arguments:this.parseArguments()},this.consume(")")):"["===t.text?(e={type:io.MemberExpression,object:e,property:this.expression(),computed:!0},this.consume("]")):"."===t.text?e={type:io.MemberExpression,object:e,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return e},filter:function(e){for(var t=[e],n={type:io.CallExpression,callee:this.identifier(),arguments:t,filter:!0};this.expect(":");)t.push(this.expression());return n},parseArguments:function(){var e=[];if(")"!==this.peekToken().text)do e.push(this.expression());while(this.expect(","));return e},identifier:function(){var e=this.consume();return e.identifier||this.throwError("is not a valid identifier",e),{type:io.Identifier,name:e.text}},constant:function(){return{type:io.Literal,value:this.consume().value}},arrayDeclaration:function(){var e=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;e.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:io.ArrayExpression,elements:e}},object:function(){var e,t=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;e={type:io.Property,kind:"init"},this.peek().constant?e.key=this.constant():this.peek().identifier?e.key=this.identifier():this.throwError("invalid key",this.peek()),this.consume(":"),e.value=this.expression(),t.push(e)}while(this.expect(","));return this.consume("}"),{type:io.ObjectExpression,properties:t}},throwError:function(e,t){throw Zi("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",t.text,e,t.index+1,this.text,this.text.substring(t.index))},consume:function(e){if(0===this.tokens.length)throw Zi("ueoe","Unexpected end of expression: {0}",this.text);var t=this.expect(e);return t||this.throwError("is unexpected, expecting ["+e+"]",this.peek()),t},peekToken:function(){if(0===this.tokens.length)throw Zi("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(e,t,n,r){return this.peekAhead(0,e,t,n,r)},peekAhead:function(e,t,n,r,i){if(this.tokens.length>e){var o=this.tokens[e],a=o.text;if(a===t||a===n||a===r||a===i||!t&&!n&&!r&&!i)return o}return!1},expect:function(e,t,n,r){var i=this.peek(e,t,n,r);return i?(this.tokens.shift(),i):!1},constants:{"true":{type:io.Literal,value:!0},"false":{type:io.Literal,value:!1},"null":{type:io.Literal,value:null},undefined:{type:io.Literal,value:n},"this":{type:io.ThisExpression}}},ln.prototype={compile:function(e,t){var r=this,i=this.astBuilder.ast(e);this.state={nextId:0,filters:{},expensiveChecks:t,fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},nn(i,r.$filter);var a,s="";if(this.stage="assign",a=an(i)){this.state.computing="assign";var c=this.nextId();this.recurse(a,c),this.return_(c),s="fn.assign="+this.generateFunction("assign","s,v,l")}var l=rn(i.body);r.stage="inputs",o(l,function(e,t){var n="fn"+t;r.state[n]={vars:[],body:[],own:{}},r.state.computing=n;var i=r.nextId();r.recurse(e,i),r.return_(i),r.state.inputs.push(n),e.watchId=t}),this.state.computing="fn",this.stage="main",this.recurse(i);var d='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+s+this.watchFns()+"return fn;",u=new Function("$filter","ensureSafeMemberName","ensureSafeObject","ensureSafeFunction","getStringValue","ensureSafeAssignContext","ifDefined","plus","text",d)(this.$filter,Kt,Xt,Zt,Gt,Jt,Qt,en,e);return this.state=this.stage=n,u.literal=sn(i),u.constant=cn(i),u},USE:"use",STRICT:"strict",watchFns:function(){var e=[],t=this.state.inputs,n=this;return o(t,function(t){e.push("var "+t+"="+n.generateFunction(t,"s"))}),t.length&&e.push("fn.inputs=["+t.join(",")+"];"),e.join("")},generateFunction:function(e,t){return"function("+t+"){"+this.varsPrefix(e)+this.body(e)+"};"},filterPrefix:function(){var e=[],t=this;return o(this.state.filters,function(n,r){e.push(n+"=$filter("+t.escape(r)+")")}),e.length?"var "+e.join(",")+";":""},varsPrefix:function(e){return this.state[e].vars.length?"var "+this.state[e].vars.join(",")+";":""},body:function(e){return this.state[e].body.join("")},recurse:function(e,t,r,i,a,s){var c,l,d,u,m=this;if(i=i||h,!s&&E(e.watchId))return t=t||this.nextId(),void this.if_("i",this.lazyAssign(t,this.computedMember("i",e.watchId)),this.lazyRecurse(e,t,r,i,a,!0));switch(e.type){case io.Program:o(e.body,function(t,r){m.recurse(t.expression,n,n,function(e){l=e}),r!==e.body.length-1?m.current().body.push(l,";"):m.return_(l)});break;case io.Literal:u=this.escape(e.value),this.assign(t,u),i(u);break;case io.UnaryExpression:this.recurse(e.argument,n,n,function(e){l=e}),u=e.operator+"("+this.ifDefined(l,0)+")",this.assign(t,u),i(u);break;case io.BinaryExpression:this.recurse(e.left,n,n,function(e){c=e}),this.recurse(e.right,n,n,function(e){l=e}),u="+"===e.operator?this.plus(c,l):"-"===e.operator?this.ifDefined(c,0)+e.operator+this.ifDefined(l,0):"("+c+")"+e.operator+"("+l+")",this.assign(t,u),i(u);break;case io.LogicalExpression:t=t||this.nextId(),m.recurse(e.left,t),m.if_("&&"===e.operator?t:m.not(t),m.lazyRecurse(e.right,t)),i(t);break;case io.ConditionalExpression:t=t||this.nextId(),m.recurse(e.test,t),m.if_(t,m.lazyRecurse(e.alternate,t),m.lazyRecurse(e.consequent,t)),i(t);break;case io.Identifier:t=t||this.nextId(),r&&(r.context="inputs"===m.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",e.name)+"?l:s"),r.computed=!1,r.name=e.name),Kt(e.name),m.if_("inputs"===m.stage||m.not(m.getHasOwnProperty("l",e.name)),function(){m.if_("inputs"===m.stage||"s",function(){a&&1!==a&&m.if_(m.not(m.nonComputedMember("s",e.name)),m.lazyAssign(m.nonComputedMember("s",e.name),"{}")),m.assign(t,m.nonComputedMember("s",e.name))})},t&&m.lazyAssign(t,m.nonComputedMember("l",e.name))),(m.state.expensiveChecks||un(e.name))&&m.addEnsureSafeObject(t),i(t);break;case io.MemberExpression:c=r&&(r.context=this.nextId())||this.nextId(),t=t||this.nextId(),m.recurse(e.object,c,n,function(){m.if_(m.notNull(c),function(){e.computed?(l=m.nextId(),m.recurse(e.property,l),m.getStringValue(l),m.addEnsureSafeMemberName(l),a&&1!==a&&m.if_(m.not(m.computedMember(c,l)),m.lazyAssign(m.computedMember(c,l),"{}")),u=m.ensureSafeObject(m.computedMember(c,l)),m.assign(t,u),r&&(r.computed=!0,r.name=l)):(Kt(e.property.name),a&&1!==a&&m.if_(m.not(m.nonComputedMember(c,e.property.name)),m.lazyAssign(m.nonComputedMember(c,e.property.name),"{}")),u=m.nonComputedMember(c,e.property.name),(m.state.expensiveChecks||un(e.property.name))&&(u=m.ensureSafeObject(u)),m.assign(t,u),r&&(r.computed=!1,r.name=e.property.name))},function(){m.assign(t,"undefined")}),i(t)},!!a);break;case io.CallExpression:t=t||this.nextId(),e.filter?(l=m.filter(e.callee.name),d=[],o(e.arguments,function(e){var t=m.nextId();m.recurse(e,t),d.push(t)}),u=l+"("+d.join(",")+")",m.assign(t,u),i(t)):(l=m.nextId(),c={},d=[],m.recurse(e.callee,l,c,function(){m.if_(m.notNull(l),function(){m.addEnsureSafeFunction(l),o(e.arguments,function(e){m.recurse(e,m.nextId(),n,function(e){d.push(m.ensureSafeObject(e))})}),c.name?(m.state.expensiveChecks||m.addEnsureSafeObject(c.context),u=m.member(c.context,c.name,c.computed)+"("+d.join(",")+")"):u=l+"("+d.join(",")+")",u=m.ensureSafeObject(u),m.assign(t,u)},function(){m.assign(t,"undefined")}),i(t)}));break;case io.AssignmentExpression:if(l=this.nextId(),c={},!on(e.left))throw Zi("lval","Trying to assing a value to a non l-value");this.recurse(e.left,n,c,function(){m.if_(m.notNull(c.context),function(){m.recurse(e.right,l),m.addEnsureSafeObject(m.member(c.context,c.name,c.computed)),m.addEnsureSafeAssignContext(c.context),u=m.member(c.context,c.name,c.computed)+e.operator+l,m.assign(t,u),i(t||u)})},1);break;case io.ArrayExpression:d=[],o(e.elements,function(e){m.recurse(e,m.nextId(),n,function(e){d.push(e)})}),u="["+d.join(",")+"]",this.assign(t,u),i(u);break;case io.ObjectExpression:d=[],o(e.properties,function(e){m.recurse(e.value,m.nextId(),n,function(t){d.push(m.escape(e.key.type===io.Identifier?e.key.name:""+e.key.value)+":"+t)})}),u="{"+d.join(",")+"}",this.assign(t,u),i(u);break;case io.ThisExpression:this.assign(t,"s"),i("s");break;case io.NGValueParameter:this.assign(t,"v"),i("v")}},getHasOwnProperty:function(e,t){var n=e+"."+t,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,e+"&&("+this.escape(t)+" in "+e+")")),r[n]},assign:function(e,t){return e?(this.current().body.push(e,"=",t,";"),e):void 0},filter:function(e){return this.state.filters.hasOwnProperty(e)||(this.state.filters[e]=this.nextId(!0)),this.state.filters[e]},ifDefined:function(e,t){return"ifDefined("+e+","+this.escape(t)+")"},plus:function(e,t){return"plus("+e+","+t+")"},return_:function(e){this.current().body.push("return ",e,";")},if_:function(e,t,n){if(e===!0)t();else{var r=this.current().body;r.push("if(",e,"){"),t(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(e){return"!("+e+")"},notNull:function(e){return e+"!=null"},nonComputedMember:function(e,t){return e+"."+t},computedMember:function(e,t){return e+"["+t+"]"},member:function(e,t,n){return n?this.computedMember(e,t):this.nonComputedMember(e,t)},addEnsureSafeObject:function(e){this.current().body.push(this.ensureSafeObject(e),";")},addEnsureSafeMemberName:function(e){this.current().body.push(this.ensureSafeMemberName(e),";")},addEnsureSafeFunction:function(e){this.current().body.push(this.ensureSafeFunction(e),";")},addEnsureSafeAssignContext:function(e){this.current().body.push(this.ensureSafeAssignContext(e),";")},ensureSafeObject:function(e){return"ensureSafeObject("+e+",text)"},ensureSafeMemberName:function(e){return"ensureSafeMemberName("+e+",text)"},ensureSafeFunction:function(e){return"ensureSafeFunction("+e+",text)"},getStringValue:function(e){this.assign(e,"getStringValue("+e+",text)")},ensureSafeAssignContext:function(e){return"ensureSafeAssignContext("+e+",text)"},lazyRecurse:function(e,t,n,r,i,o){var a=this;return function(){a.recurse(e,t,n,r,i,o)}},lazyAssign:function(e,t){var n=this;return function(){n.assign(e,t)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)},escape:function(e){if(C(e))return"'"+e.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(w(e))return e.toString();if(e===!0)return"true";if(e===!1)return"false";if(null===e)return"null";if("undefined"==typeof e)return"undefined";throw Zi("esc","IMPOSSIBLE")},nextId:function(e,t){var n="v"+this.state.nextId++;return e||this.current().vars.push(n+(t?"="+t:"")),n},current:function(){return this.state[this.state.computing]}},dn.prototype={compile:function(e,t){var n=this,r=this.astBuilder.ast(e);this.expression=e,this.expensiveChecks=t,nn(r,n.$filter);var i,a;(i=an(r))&&(a=this.recurse(i));var s,c=rn(r.body);c&&(s=[],o(c,function(e,t){var r=n.recurse(e);e.input=r,s.push(r),e.watchId=t}));var l=[];o(r.body,function(e){l.push(n.recurse(e.expression))});var d=0===r.body.length?function(){}:1===r.body.length?l[0]:function(e,t){var n;return o(l,function(r){n=r(e,t)}),n};return a&&(d.assign=function(e,t,n){return a(e,n,t)}),s&&(d.inputs=s),d.literal=sn(r),d.constant=cn(r),d},recurse:function(e,t,r){var i,a,s,c=this;if(e.input)return this.inputs(e.input,e.watchId);switch(e.type){case io.Literal:return this.value(e.value,t);case io.UnaryExpression:return a=this.recurse(e.argument),this["unary"+e.operator](a,t);case io.BinaryExpression:return i=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](i,a,t);case io.LogicalExpression:return i=this.recurse(e.left),a=this.recurse(e.right),this["binary"+e.operator](i,a,t);case io.ConditionalExpression:return this["ternary?:"](this.recurse(e.test),this.recurse(e.alternate),this.recurse(e.consequent),t);case io.Identifier:return Kt(e.name,c.expression),c.identifier(e.name,c.expensiveChecks||un(e.name),t,r,c.expression);case io.MemberExpression:return i=this.recurse(e.object,!1,!!r),e.computed||(Kt(e.property.name,c.expression),a=e.property.name),e.computed&&(a=this.recurse(e.property)),e.computed?this.computedMember(i,a,t,r,c.expression):this.nonComputedMember(i,a,c.expensiveChecks,t,r,c.expression);case io.CallExpression:return s=[],o(e.arguments,function(e){s.push(c.recurse(e))}),e.filter&&(a=this.$filter(e.callee.name)),e.filter||(a=this.recurse(e.callee,!0)),e.filter?function(e,r,i,o){for(var c=[],l=0;l<s.length;++l)c.push(s[l](e,r,i,o));var d=a.apply(n,c,o);return t?{context:n,name:n,value:d}:d}:function(e,n,r,i){var o,l=a(e,n,r,i);if(null!=l.value){Xt(l.context,c.expression),Zt(l.value,c.expression);for(var d=[],u=0;u<s.length;++u)d.push(Xt(s[u](e,n,r,i),c.expression));o=Xt(l.value.apply(l.context,d),c.expression)}return t?{value:o}:o};case io.AssignmentExpression:return i=this.recurse(e.left,!0,1),a=this.recurse(e.right),function(e,n,r,o){var s=i(e,n,r,o),l=a(e,n,r,o);return Xt(s.value,c.expression),Jt(s.context),s.context[s.name]=l,t?{value:l}:l};case io.ArrayExpression:return s=[],o(e.elements,function(e){s.push(c.recurse(e))}),function(e,n,r,i){for(var o=[],a=0;a<s.length;++a)o.push(s[a](e,n,r,i));return t?{value:o}:o};case io.ObjectExpression:return s=[],o(e.properties,function(e){s.push({key:e.key.type===io.Identifier?e.key.name:""+e.key.value,value:c.recurse(e.value)})}),function(e,n,r,i){for(var o={},a=0;a<s.length;++a)o[s[a].key]=s[a].value(e,n,r,i);return t?{value:o}:o};case io.ThisExpression:return function(e){return t?{value:e}:e};case io.NGValueParameter:return function(e,n,r,i){return t?{value:r}:r}}},"unary+":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=E(a)?+a:0,t?{value:a}:a}},"unary-":function(e,t){return function(n,r,i,o){var a=e(n,r,i,o);return a=E(a)?-a:0,t?{value:a}:a}},"unary!":function(e,t){return function(n,r,i,o){var a=!e(n,r,i,o);return t?{value:a}:a}},"binary+":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),c=t(r,i,o,a),l=en(s,c);return n?{value:l}:l}},"binary-":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a),c=t(r,i,o,a),l=(E(s)?s:0)-(E(c)?c:0);return n?{value:l}:l}},"binary*":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)*t(r,i,o,a);return n?{value:s}:s}},"binary/":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)/t(r,i,o,a);return n?{value:s}:s}},"binary%":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)%t(r,i,o,a);return n?{value:s}:s}},"binary===":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)===t(r,i,o,a);return n?{value:s}:s}},"binary!==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!==t(r,i,o,a);return n?{value:s}:s}},"binary==":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)==t(r,i,o,a);return n?{value:s}:s}},"binary!=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)!=t(r,i,o,a);return n?{value:s}:s}},"binary<":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<t(r,i,o,a);return n?{value:s}:s}},"binary>":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>t(r,i,o,a);return n?{value:s}:s}},"binary<=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)<=t(r,i,o,a);return n?{value:s}:s}},"binary>=":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)>=t(r,i,o,a);return n?{value:s}:s}},"binary&&":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)&&t(r,i,o,a);return n?{value:s}:s}},"binary||":function(e,t,n){return function(r,i,o,a){var s=e(r,i,o,a)||t(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(e,t,n,r){return function(i,o,a,s){var c=e(i,o,a,s)?t(i,o,a,s):n(i,o,a,s);return r?{value:c}:c}},value:function(e,t){return function(){return t?{context:n,name:n,value:e}:e}},identifier:function(e,t,r,i,o){return function(a,s,c,l){var d=s&&e in s?s:a;i&&1!==i&&d&&!d[e]&&(d[e]={});var u=d?d[e]:n;return t&&Xt(u,o),r?{context:d,name:e,value:u}:u}},computedMember:function(e,t,n,r,i){return function(o,a,s,c){var l,d,u=e(o,a,s,c);return null!=u&&(l=t(o,a,s,c),l=Gt(l),Kt(l,i),r&&1!==r&&u&&!u[l]&&(u[l]={}),d=u[l],Xt(d,i)),n?{context:u,name:l,value:d}:d}},nonComputedMember:function(e,t,r,i,o,a){return function(s,c,l,d){var u=e(s,c,l,d);o&&1!==o&&u&&!u[t]&&(u[t]={});var m=null!=u?u[t]:n;return(r||un(t))&&Xt(m,a),i?{context:u,name:t,value:m}:m}},inputs:function(e,t){
return function(n,r,i,o){return o?o[t]:e(n,r,i)}}};var oo=function(e,t,n){this.lexer=e,this.$filter=t,this.options=n,this.ast=new io(this.lexer),this.astCompiler=n.csp?new dn(this.ast,t):new ln(this.ast,t)};oo.prototype={constructor:oo,parse:function(e){return this.astCompiler.compile(e,this.options.expensiveChecks)}};var ao=(ge(),ge(),Object.prototype.valueOf),so=r("$sce"),co={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Oi=r("$compile"),lo=t.createElement("a"),uo=Tn(e.location.href);_n.$inject=["$document"],Hn.$inject=["$provide"],Ln.$inject=["$locale"],Fn.$inject=["$locale"];var mo=".",fo={yyyy:Bn("FullYear",4),yy:Bn("FullYear",2,0,!0),y:Bn("FullYear",1),MMMM:Un("Month"),MMM:Un("Month",!0),MM:Bn("Month",2,1),M:Bn("Month",1,1),dd:Bn("Date",2),d:Bn("Date",1),HH:Bn("Hours",2),H:Bn("Hours",1),hh:Bn("Hours",2,-12),h:Bn("Hours",1,-12),mm:Bn("Minutes",2),m:Bn("Minutes",1),ss:Bn("Seconds",2),s:Bn("Seconds",1),sss:Bn("Milliseconds",3),EEEE:Un("Day"),EEE:Un("Day",!0),a:Kn,Z:qn,ww:Yn(2),w:Yn(1),G:Gn,GG:Gn,GGG:Gn,GGGG:Xn},po=/((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,ho=/^\-?\d+$/;Zn.$inject=["$locale"];var go=v(Cr),vo=v(xr);er.$inject=["$parse"];var $o=v({restrict:"E",compile:function(e,t){return t.href||t.xlinkHref?void 0:function(e,t){if("a"===t[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===Ir.call(t.prop("href"))?"xlink:href":"href";t.on("click",function(e){t.attr(n)||e.preventDefault()})}}}}),bo={};o($i,function(e,t){function n(e,n,i){e.$watch(i[r],function(e){i.$set(t,!!e)})}if("multiple"!=e){var r=ut("ng-"+t),i=n;"checked"===e&&(i=function(e,t,i){i.ngModel!==i[r]&&n(e,t,i)}),bo[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(Ei,function(e,t){bo[t]=function(){return{priority:100,link:function(e,n,r){if("ngPattern"===t&&"/"==r.ngPattern.charAt(0)){var i=r.ngPattern.match(yr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}e.$watch(r[t],function(e){r.$set(t,e)})}}}}),o(["src","srcset","href"],function(e){var t=ut("ng-"+e);bo[t]=function(){return{priority:99,link:function(n,r,i){var o=e,a=e;"href"===e&&"[object SVGAnimatedString]"===Ir.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(t,function(t){return t?(i.$set(a,t),void(Tr&&o&&r.prop(o,i[a]))):void("href"===e&&i.$set(a,null))})}}}});var Eo={$addControl:h,$$renameControl:nr,$removeControl:h,$setValidity:h,$setDirty:h,$setPristine:h,$setSubmitted:h},yo="ng-submitted";rr.$inject=["$element","$attrs","$scope","$animate","$interpolate"];var Mo=function(e){return["$timeout","$parse",function(t,r){function i(e){return""===e?r('this[""]').assign:r(e).assign||h}var o={name:"form",restrict:e?"EAC":"E",require:["form","^^?form"],controller:rr,compile:function(r,o){r.addClass(na).addClass(ea);var a=o.name?"name":e&&o.ngForm?"ngForm":!1;return{pre:function(e,r,o,s){var c=s[0];if(!("action"in o)){var l=function(t){e.$apply(function(){c.$commitViewValue(),c.$setSubmitted()}),t.preventDefault()};oi(r[0],"submit",l),r.on("$destroy",function(){t(function(){ai(r[0],"submit",l)},0,!1)})}var d=s[1]||c.$$parentForm;d.$addControl(c);var m=a?i(c.$name):h;a&&(m(e,c),o.$observe(a,function(t){c.$name!==t&&(m(e,n),c.$$parentForm.$$renameControl(c,t),(m=i(c.$name))(e,c))})),r.on("$destroy",function(){c.$$parentForm.$removeControl(c),m(e,n),u(c,Eo)})}}}};return o}]},Co=Mo(),wo=Mo(!0),xo=/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/,Ao=/^[A-Za-z][A-Za-z\d.+-]*:\/*(?:\w+(?::\w+)?@)?[^\s/]+(?::\d+)?(?:\/[\w#!:.?+=&%@\-/]*)?$/,ko=/^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i,To=/^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,So=/^(\d{4})-(\d{2})-(\d{2})$/,No=/^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,_o=/^(\d{4})-W(\d\d)$/,Do=/^(\d{4})-(\d\d)$/,Ho=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Oo={text:or,date:lr("date",So,cr(So,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":lr("datetimelocal",No,cr(No,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:lr("time",Ho,cr(Ho,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:lr("week",_o,sr,"yyyy-Www"),month:lr("month",Do,cr(Do,["yyyy","MM"]),"yyyy-MM"),number:ur,url:mr,email:fr,radio:pr,checkbox:gr,hidden:h,button:h,submit:h,reset:h,file:h},Io=["$browser","$sniffer","$filter","$parse",function(e,t,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(Oo[Cr(a.type)]||Oo.text)(i,o,a,s[0],t,e,n,r)}}}}],Ro=/^(true|false|\d+)$/,Po=function(){return{restrict:"A",priority:100,compile:function(e,t){return Ro.test(t.ngValue)?function(e,t,n){n.$set("value",e.$eval(n.ngValue))}:function(e,t,n){e.$watch(n.ngValue,function(e){n.$set("value",e)})}}}},Lo=["$compile",function(e){return{restrict:"AC",compile:function(t){return e.$$addBindingClass(t),function(t,n,r){e.$$addBindingInfo(n,r.ngBind),n=n[0],t.$watch(r.ngBind,function(e){n.textContent=b(e)?"":e})}}}}],Fo=["$interpolate","$compile",function(e,t){return{compile:function(n){return t.$$addBindingClass(n),function(n,r,i){var o=e(r.attr(i.$attr.ngBindTemplate));t.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(e){r.textContent=b(e)?"":e})}}}}],jo=["$sce","$parse","$compile",function(e,t,n){return{restrict:"A",compile:function(r,i){var o=t(i.ngBindHtml),a=t(i.ngBindHtml,function(e){return(e||"").toString()});return n.$$addBindingClass(r),function(t,r,i){n.$$addBindingInfo(r,i.ngBindHtml),t.$watch(a,function(){r.html(e.getTrustedHtml(o(t))||"")})}}}}],Vo=v({restrict:"A",require:"ngModel",link:function(e,t,n,r){r.$viewChangeListeners.push(function(){e.$eval(n.ngChange)})}}),Bo=vr("",!0),Uo=vr("Odd",0),qo=vr("Even",1),zo=tr({compile:function(e,t){t.$set("ngCloak",n),e.removeClass("ng-cloak")}}),Wo=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Yo={},Ko={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(e){var t=ut("ng-"+e);Yo[t]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[t],null,!0);return function(t,n){n.on(e,function(n){var i=function(){a(t,{$event:n})};Ko[e]&&r.$$phase?t.$evalAsync(i):t.$apply(i)})}}}}]});var Go=["$animate",function(e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,c,l;n.$watch(i.ngIf,function(n){n?c||a(function(n,o){c=o,n[n.length++]=t.createComment(" end ngIf: "+i.ngIf+" "),s={clone:n},e.enter(n,r.parent(),r)}):(l&&(l.remove(),l=null),c&&(c.$destroy(),c=null),s&&(l=he(s.clone),e.leave(l).then(function(){l=null}),s=null))})}}}],Xo=["$templateRequest","$anchorScroll","$animate",function(e,t,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:Lr.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,c,l,d){var u,m,f,p=0,h=function(){m&&(m.remove(),m=null),u&&(u.$destroy(),u=null),f&&(n.leave(f).then(function(){m=null}),m=f,f=null)};r.$watch(o,function(o){var c=function(){!E(s)||s&&!r.$eval(s)||t()},m=++p;o?(e(o,!0).then(function(e){if(m===p){var t=r.$new();l.template=e;var s=d(t,function(e){h(),n.enter(e,null,i).then(c)});u=t,f=s,u.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){m===p&&(h(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):(h(),l.template=null)})}}}}],Zo=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){return/SVG/.test(r[0].toString())?(r.empty(),void e(Ae(o.template,t).childNodes)(n,function(e){r.append(e)},{futureParentElement:r})):(r.html(o.template),void e(r.contents())(n))}}}],Jo=tr({priority:450,compile:function(){return{pre:function(e,t,n){e.$eval(n.ngInit)}}}}),Qo=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(e,t,r,i){var a=t.attr(r.$attr.ngList)||", ",s="false"!==r.ngTrim,c=s?Ur(a):a,l=function(e){if(!b(e)){var t=[];return e&&o(e.split(c),function(e){e&&t.push(s?Ur(e):e)}),t}};i.$parsers.push(l),i.$formatters.push(function(e){return Vr(e)?e.join(a):n}),i.$isEmpty=function(e){return!e||!e.length}}}},ea="ng-valid",ta="ng-invalid",na="ng-pristine",ra="ng-dirty",ia="ng-untouched",oa="ng-touched",aa="ng-pending",sa=r("ngModel"),ca=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$rootScope","$q","$interpolate",function(e,t,r,i,a,s,c,l,d,u){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=n,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=n,this.$name=u(r.name||"",!1)(e),this.$$parentForm=Eo;var m,f=a(r.ngModel),p=f.assign,g=f,v=p,$=null,y=this;this.$$setOptions=function(e){if(y.$options=e,e&&e.getterSetter){var t=a(r.ngModel+"()"),n=a(r.ngModel+"($$$p)");g=function(e){var n=f(e);return A(n)&&(n=t(e)),n},v=function(e,t){A(f(e))?n(e,{$$$p:y.$modelValue}):p(e,y.$modelValue)}}else if(!f.assign)throw sa("nonassign","Expression '{0}' is non-assignable. Element: {1}",r.ngModel,J(i))},this.$render=h,this.$isEmpty=function(e){return b(e)||""===e||null===e||e!==e};var M=0;$r({ctrl:this,$element:i,set:function(e,t){e[t]=!0},unset:function(e,t){delete e[t]},$animate:s}),this.$setPristine=function(){y.$dirty=!1,y.$pristine=!0,s.removeClass(i,ra),s.addClass(i,na)},this.$setDirty=function(){y.$dirty=!0,y.$pristine=!1,s.removeClass(i,na),s.addClass(i,ra),y.$$parentForm.$setDirty()},this.$setUntouched=function(){y.$touched=!1,y.$untouched=!0,s.setClass(i,ia,oa)},this.$setTouched=function(){y.$touched=!0,y.$untouched=!1,s.setClass(i,oa,ia)},this.$rollbackViewValue=function(){c.cancel($),y.$viewValue=y.$$lastCommittedViewValue,y.$render()},this.$validate=function(){if(!w(y.$modelValue)||!isNaN(y.$modelValue)){var e=y.$$lastCommittedViewValue,t=y.$$rawModelValue,r=y.$valid,i=y.$modelValue,o=y.$options&&y.$options.allowInvalid;y.$$runValidators(t,e,function(e){o||r===e||(y.$modelValue=e?t:n,y.$modelValue!==i&&y.$$writeModelToScope())})}},this.$$runValidators=function(e,t,r){function i(){var e=y.$$parserName||"parse";return b(m)?(c(e,null),!0):(m||(o(y.$validators,function(e,t){c(t,null)}),o(y.$asyncValidators,function(e,t){c(t,null)})),c(e,m),m)}function a(){var n=!0;return o(y.$validators,function(r,i){var o=r(e,t);n=n&&o,c(i,o)}),n?!0:(o(y.$asyncValidators,function(e,t){c(t,null)}),!1)}function s(){var r=[],i=!0;o(y.$asyncValidators,function(o,a){var s=o(e,t);if(!O(s))throw sa("$asyncValidators","Expected asynchronous validator to return a promise but got '{0}' instead.",s);c(a,n),r.push(s.then(function(){c(a,!0)},function(e){i=!1,c(a,!1)}))}),r.length?d.all(r).then(function(){l(i)},h):l(!0)}function c(e,t){u===M&&y.$setValidity(e,t)}function l(e){u===M&&r(e)}M++;var u=M;return i()&&a()?void s():void l(!1)},this.$commitViewValue=function(){var e=y.$viewValue;c.cancel($),(y.$$lastCommittedViewValue!==e||""===e&&y.$$hasNativeValidators)&&(y.$$lastCommittedViewValue=e,y.$pristine&&this.$setDirty(),this.$$parseAndValidate())},this.$$parseAndValidate=function(){function t(){y.$modelValue!==a&&y.$$writeModelToScope()}var r=y.$$lastCommittedViewValue,i=r;if(m=b(i)?n:!0)for(var o=0;o<y.$parsers.length;o++)if(i=y.$parsers[o](i),b(i)){m=!1;break}w(y.$modelValue)&&isNaN(y.$modelValue)&&(y.$modelValue=g(e));var a=y.$modelValue,s=y.$options&&y.$options.allowInvalid;y.$$rawModelValue=i,s&&(y.$modelValue=i,t()),y.$$runValidators(i,y.$$lastCommittedViewValue,function(e){s||(y.$modelValue=e?i:n,t())})},this.$$writeModelToScope=function(){v(e,y.$modelValue),o(y.$viewChangeListeners,function(e){try{e()}catch(n){t(n)}})},this.$setViewValue=function(e,t){y.$viewValue=e,(!y.$options||y.$options.updateOnDefault)&&y.$$debounceViewValueCommit(t)},this.$$debounceViewValueCommit=function(t){var n,r=0,i=y.$options;i&&E(i.debounce)&&(n=i.debounce,w(n)?r=n:w(n[t])?r=n[t]:w(n["default"])&&(r=n["default"])),c.cancel($),r?$=c(function(){y.$commitViewValue()},r):l.$$phase?y.$commitViewValue():e.$apply(function(){y.$commitViewValue()})},e.$watch(function(){var t=g(e);if(t!==y.$modelValue&&(y.$modelValue===y.$modelValue||t===t)){y.$modelValue=y.$$rawModelValue=t,m=n;for(var r=y.$formatters,i=r.length,o=t;i--;)o=r[i](o);y.$viewValue!==o&&(y.$viewValue=y.$$lastCommittedViewValue=o,y.$render(),y.$$runValidators(t,o,h))}return t})}],la=["$rootScope",function(e){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:ca,priority:1,compile:function(t){return t.addClass(na).addClass(ia).addClass(ea),{pre:function(e,t,n,r){var i=r[0],o=r[1]||i.$$parentForm;i.$$setOptions(r[2]&&r[2].$options),o.$addControl(i),n.$observe("name",function(e){i.$name!==e&&i.$$parentForm.$$renameControl(i,e)}),e.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(t,n,r,i){var o=i[0];o.$options&&o.$options.updateOn&&n.on(o.$options.updateOn,function(e){o.$$debounceViewValueCommit(e&&e.type)}),n.on("blur",function(n){o.$touched||(e.$$phase?t.$evalAsync(o.$setTouched):t.$apply(o.$setTouched))})}}}}}],da=/(\s+|^)default(\s+|$)/,ua=function(){return{restrict:"A",controller:["$scope","$attrs",function(e,t){var n=this;this.$options=j(e.$eval(t.ngModelOptions)),E(this.$options.updateOn)?(this.$options.updateOnDefault=!1,this.$options.updateOn=Ur(this.$options.updateOn.replace(da,function(){return n.$options.updateOnDefault=!0," "}))):this.$options.updateOnDefault=!0}]}},ma=tr({terminal:!0,priority:1e3}),fa=r("ngOptions"),pa=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,ha=["$compile","$parse",function(e,n){function r(e,t,r){function o(e,t,n,r,i){this.selectValue=e,this.viewValue=t,this.label=n,this.group=r,this.disabled=i}function a(e){var t;if(!l&&i(e))t=e;else{t=[];for(var n in e)e.hasOwnProperty(n)&&"$"!==n.charAt(0)&&t.push(n)}return t}var s=e.match(pa);if(!s)throw fa("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",e,J(t));var c=s[5]||s[7],l=s[6],d=/ as /.test(s[0])&&s[1],u=s[9],m=n(s[2]?s[1]:c),f=d&&n(d),p=f||m,h=u&&n(u),g=u?function(e,t){return h(r,t)}:function(e){return Xe(e)},v=function(e,t){return g(e,C(e,t))},$=n(s[2]||s[1]),b=n(s[3]||""),E=n(s[4]||""),y=n(s[8]),M={},C=l?function(e,t){return M[l]=t,M[c]=e,M}:function(e){return M[c]=e,M};return{trackBy:u,getTrackByValue:v,getWatchables:n(y,function(e){var t=[];e=e||[];for(var n=a(e),i=n.length,o=0;i>o;o++){var c=e===n?o:n[o],l=(e[c],C(e[c],c)),d=g(e[c],l);if(t.push(d),s[2]||s[1]){var u=$(r,l);t.push(u)}if(s[4]){var m=E(r,l);t.push(m)}}return t}),getOptions:function(){for(var e=[],t={},n=y(r)||[],i=a(n),s=i.length,c=0;s>c;c++){var l=n===i?c:i[c],d=n[l],m=C(d,l),f=p(r,m),h=g(f,m),M=$(r,m),w=b(r,m),x=E(r,m),A=new o(h,f,M,w,x);e.push(A),t[h]=A}return{items:e,selectValueMap:t,getOptionFromViewValue:function(e){return t[v(e)]},getViewValueFromOption:function(e){return u?Lr.copy(e.viewValue):e.viewValue}}}}}function a(t,n,i,a){function l(e,t){e.element=t,t.disabled=e.disabled,e.label!==t.label&&(t.label=e.label,t.textContent=e.label),e.value!==t.value&&(t.value=e.selectValue)}function d(e,t,n,r){var i;return t&&Cr(t.nodeName)===n?i=t:(i=r.cloneNode(!1),t?e.insertBefore(i,t):e.appendChild(i)),i}function u(e){for(var t;e;)t=e.nextSibling,Be(e),e=t}function m(e){var t=h&&h[0],n=M&&M[0];if(t||n)for(;e&&(e===t||e===n||e.nodeType===Qr||""===e.value);)e=e.nextSibling;return e}function f(){var e=C&&g.readValue();C=w.getOptions();var t={},r=n[0].firstChild;if(y&&n.prepend(h),r=m(r),C.items.forEach(function(e){var i,o,a;e.group?(i=t[e.group],i||(o=d(n[0],r,"optgroup",c),r=o.nextSibling,o.label=e.group,i=t[e.group]={groupElement:o,currentOptionElement:o.firstChild}),a=d(i.groupElement,i.currentOptionElement,"option",s),l(e,a),i.currentOptionElement=a.nextSibling):(a=d(n[0],r,"option",s),l(e,a),r=a.nextSibling)}),Object.keys(t).forEach(function(e){u(t[e].currentOptionElement)}),u(r),p.$render(),!p.$isEmpty(e)){var i=g.readValue();(w.trackBy?B(e,i):e===i)||(p.$setViewValue(i),p.$render())}}var p=a[1];if(p){for(var h,g=a[0],v=i.multiple,$=0,b=n.children(),E=b.length;E>$;$++)if(""===b[$].value){h=b.eq($);break}var y=!!h,M=Sr(s.cloneNode(!1));M.val("?");var C,w=r(i.ngOptions,n,t),x=function(){y||n.prepend(h),n.val(""),h.prop("selected",!0),h.attr("selected",!0)},A=function(){y||h.remove()},k=function(){n.prepend(M),n.val("?"),M.prop("selected",!0),M.attr("selected",!0)},T=function(){M.remove()};v?(p.$isEmpty=function(e){return!e||0===e.length},g.writeValue=function(e){C.items.forEach(function(e){e.element.selected=!1}),e&&e.forEach(function(e){var t=C.getOptionFromViewValue(e);t&&!t.disabled&&(t.element.selected=!0)})},g.readValue=function(){var e=n.val()||[],t=[];return o(e,function(e){var n=C.selectValueMap[e];n&&!n.disabled&&t.push(C.getViewValueFromOption(n))}),t},w.trackBy&&t.$watchCollection(function(){return Vr(p.$viewValue)?p.$viewValue.map(function(e){return w.getTrackByValue(e)}):void 0},function(){p.$render()})):(g.writeValue=function(e){var t=C.getOptionFromViewValue(e);t&&!t.disabled?n[0].value!==t.selectValue&&(T(),A(),n[0].value=t.selectValue,t.element.selected=!0,t.element.setAttribute("selected","selected")):null===e||y?(T(),x()):(A(),k())},g.readValue=function(){var e=C.selectValueMap[n.val()];return e&&!e.disabled?(A(),T(),C.getViewValueFromOption(e)):null},w.trackBy&&t.$watch(function(){return w.getTrackByValue(p.$viewValue)},function(){p.$render()})),y?(h.remove(),e(h)(t),h.removeClass("ng-scope")):h=Sr(s.cloneNode(!1)),f(),t.$watchCollection(w.getWatchables,f)}}var s=t.createElement("option"),c=t.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","?ngModel"],link:{pre:function(e,t,n,r){r[0].registerOption=h},post:a}}}],ga=["$locale","$interpolate","$log",function(e,t,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,c){function l(e){s.text(e||"")}var d,u=c.count,m=c.$attr.when&&s.attr(c.$attr.when),f=c.offset||0,p=a.$eval(m)||{},g={},v=t.startSymbol(),$=t.endSymbol(),E=v+u+"-"+f+$,y=Lr.noop;o(c,function(e,t){var n=i.exec(t);if(n){var r=(n[1]?"-":"")+Cr(n[2]);p[r]=s.attr(c.$attr[t])}}),o(p,function(e,n){g[n]=t(e.replace(r,E))}),a.$watch(u,function(t){var r=parseFloat(t),i=isNaN(r);if(i||r in p||(r=e.pluralCat(r-f)),r!==d&&!(i&&w(d)&&isNaN(d))){y();var o=g[r];b(o)?(null!=t&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+m),y=h,l()):y=a.$watch(o,l),d=r}})}}}],va=["$parse","$animate",function(e,a){var s="$$NG_REMOVED",c=r("ngRepeat"),l=function(e,t,n,r,i,o,a){e[n]=r,i&&(e[i]=o),e.$index=t,e.$first=0===t,e.$last=t===a-1,e.$middle=!(e.$first||e.$last),e.$odd=!(e.$even=0===(1&t))},d=function(e){return e.clone[0]},u=function(e){return e.clone[e.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,m){var f=m.ngRepeat,p=t.createComment(" end ngRepeat: "+f+" "),h=f.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!h)throw c("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",f);var g=h[1],v=h[2],$=h[3],b=h[4];if(h=g.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/),!h)throw c("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",g);var E=h[3]||h[1],y=h[2];if($&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test($)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test($)))throw c("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",$);var M,C,w,x,A={$id:Xe};return b?M=e(b):(w=function(e,t){return Xe(t)},x=function(e){return e}),function(e,t,r,m,h){M&&(C=function(t,n,r){return y&&(A[y]=t),A[E]=n,A.$index=r,M(e,A)});var g=ge();e.$watchCollection(v,function(r){var m,v,b,M,A,k,T,S,N,_,D,H,O=t[0],I=ge();if($&&(e[$]=r),i(r))N=r,S=C||w;else{S=C||x,N=[];for(var R in r)wr.call(r,R)&&"$"!==R.charAt(0)&&N.push(R)}for(M=N.length,D=new Array(M),m=0;M>m;m++)if(A=r===N?m:N[m],k=r[A],T=S(A,k,m),g[T])_=g[T],delete g[T],I[T]=_,D[m]=_;else{if(I[T])throw o(D,function(e){e&&e.scope&&(g[e.id]=e)}),c("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",f,T,k);D[m]={id:T,scope:n,clone:n},I[T]=!0}for(var P in g){if(_=g[P],H=he(_.clone),a.leave(H),H[0].parentNode)for(m=0,v=H.length;v>m;m++)H[m][s]=!0;_.scope.$destroy()}for(m=0;M>m;m++)if(A=r===N?m:N[m],k=r[A],_=D[m],_.scope){b=O;do b=b.nextSibling;while(b&&b[s]);d(_)!=b&&a.move(he(_.clone),null,Sr(O)),O=u(_),l(_.scope,m,E,k,y,A,M)}else h(function(e,t){_.scope=t;var n=p.cloneNode(!1);e[e.length++]=n,a.enter(e,null,Sr(O)),O=n,_.clone=e,I[_.id]=_,l(_.scope,m,E,k,y,A,M)});g=I})}}}}],$a="ng-hide",ba="ng-hide-animate",Ea=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngShow,function(t){e[t?"removeClass":"addClass"](n,$a,{tempClasses:ba})})}}}],ya=["$animate",function(e){return{restrict:"A",multiElement:!0,link:function(t,n,r){t.$watch(r.ngHide,function(t){e[t?"addClass":"removeClass"](n,$a,{tempClasses:ba})})}}}],Ma=tr(function(e,t,n){e.$watch(n.ngStyle,function(e,n){n&&e!==n&&o(n,function(e,n){t.css(n,"")}),e&&t.css(e)},!0)}),Ca=["$animate",function(e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=i.ngSwitch||i.on,c=[],l=[],d=[],u=[],m=function(e,t){return function(){e.splice(t,1)}};n.$watch(s,function(n){var r,i;for(r=0,i=d.length;i>r;++r)e.cancel(d[r]);for(d.length=0,r=0,i=u.length;i>r;++r){var s=he(l[r].clone);u[r].$destroy();var f=d[r]=e.leave(s);f.then(m(d,r))}l.length=0,u.length=0,(c=a.cases["!"+n]||a.cases["?"])&&o(c,function(n){n.transclude(function(r,i){u.push(i);var o=n.element;r[r.length++]=t.createComment(" end ngSwitchWhen: ");var a={clone:r};l.push(a),e.enter(r,o.parent(),o)})})})}}}],wa=tr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["!"+n.ngSwitchWhen]=r.cases["!"+n.ngSwitchWhen]||[],r.cases["!"+n.ngSwitchWhen].push({transclude:i,element:t})}}),xa=tr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(e,t,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:t})}}),Aa=tr({restrict:"EAC",link:function(e,t,n,i,o){if(!o)throw r("ngTransclude")("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",J(t));o(function(e){t.empty(),t.append(e)})}}),ka=["$templateCache",function(e){return{restrict:"E",terminal:!0,compile:function(t,n){if("text/ng-template"==n.type){var r=n.id,i=t[0].text;e.put(r,i)}}}}],Ta={$setViewValue:h,$render:h},Sa=["$element","$scope","$attrs",function(e,r,i){var o=this,a=new Ze;o.ngModelCtrl=Ta,o.unknownOption=Sr(t.createElement("option")),o.renderUnknownOption=function(t){var n="? "+Xe(t)+" ?";o.unknownOption.val(n),e.prepend(o.unknownOption),e.val(n)},r.$on("$destroy",function(){o.renderUnknownOption=h}),o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.readValue=function(){return o.removeUnknownOption(),e.val()},o.writeValue=function(t){o.hasOption(t)?(o.removeUnknownOption(),e.val(t),""===t&&o.emptyOption.prop("selected",!0)):null==t&&o.emptyOption?(o.removeUnknownOption(),e.val("")):o.renderUnknownOption(t)},o.addOption=function(e,t){fe(e,'"option value"'),""===e&&(o.emptyOption=t);var n=a.get(e)||0;a.put(e,n+1),o.ngModelCtrl.$render(),Er(t)},o.removeOption=function(e){var t=a.get(e);t&&(1===t?(a.remove(e),""===e&&(o.emptyOption=n)):a.put(e,t-1))},o.hasOption=function(e){return!!a.get(e)},o.registerOption=function(e,t,n,r,i){if(r){var a;n.$observe("value",function(e){E(a)&&o.removeOption(a),a=e,o.addOption(e,t)})}else i?e.$watch(i,function(e,r){n.$set("value",e),r!==e&&o.removeOption(r),o.addOption(e,t)}):o.addOption(n.value,t);t.on("$destroy",function(){o.removeOption(n.value),o.ngModelCtrl.$render()})}}],Na=function(){function e(e,t,n,r){var i=r[1];if(i){var a=r[0];if(a.ngModelCtrl=i,i.$render=function(){a.writeValue(i.$viewValue)},t.on("change",function(){e.$apply(function(){i.$setViewValue(a.readValue())})}),n.multiple){a.readValue=function(){var e=[];return o(t.find("option"),function(t){t.selected&&e.push(t.value)}),e},a.writeValue=function(e){var n=new Ze(e);o(t.find("option"),function(e){e.selected=E(n.get(e.value))})};var s,c=NaN;e.$watch(function(){c!==i.$viewValue||B(s,i.$viewValue)||(s=V(i.$viewValue),i.$render()),c=i.$viewValue}),i.$isEmpty=function(e){return!e||0===e.length}}}}return{restrict:"E",require:["select","?ngModel"],controller:Sa,priority:1,link:{pre:e}}},_a=["$interpolate",function(e){return{restrict:"E",priority:100,compile:function(t,n){if(E(n.value))var r=e(n.value,!0);else{var i=e(t.text(),!0);i||n.$set("value",t.text())}return function(e,t,n){var o="$selectController",a=t.parent(),s=a.data(o)||a.parent().data(o);s&&s.registerOption(e,t,n,r,i)}}}}],Da=v({restrict:"E",terminal:!1}),Ha=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){r&&(n.required=!0,r.$validators.required=function(e,t){return!n.required||!r.$isEmpty(t)},n.$observe("required",function(){r.$validate()}))}}},Oa=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,i,o){if(o){var a,s=i.ngPattern||i.pattern;i.$observe("pattern",function(e){if(C(e)&&e.length>0&&(e=new RegExp("^"+e+"$")),e&&!e.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",s,e,J(t));a=e||n,o.$validate()}),o.$validators.pattern=function(e,t){return o.$isEmpty(t)||b(a)||a.test(t)}}}}},Ia=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=-1;n.$observe("maxlength",function(e){var t=f(e);i=isNaN(t)?-1:t,r.$validate()}),r.$validators.maxlength=function(e,t){return 0>i||r.$isEmpty(t)||t.length<=i}}}}},Ra=function(){return{restrict:"A",require:"?ngModel",link:function(e,t,n,r){if(r){var i=0;n.$observe("minlength",function(e){i=f(e)||0,r.$validate()}),r.$validators.minlength=function(e,t){return r.$isEmpty(t)||t.length>=i}}}}};return e.angular.bootstrap?void console.log("WARNING: Tried to load angular more than once."):(de(),Ee(Lr),Lr.module("ngLocale",[],["$provide",function(e){function t(e){e+="";var t=e.indexOf(".");return-1==t?0:e.length-t-1}function r(e,r){var i=r;n===i&&(i=Math.min(t(e),3));var o=Math.pow(10,i),a=(e*o|0)%o;return{v:i,f:a}}var i={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};e.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",pluralCat:function(e,t){var n=0|e,o=r(e,t);return 1==n&&0==o.v?i.ONE:i.OTHER}})}]),void Sr(t).ready(function(){oe(t,ae)}))}(window,document),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>'),function(e,t,n){"use strict";function r(e,t,n){if(!e)throw ngMinErr("areq","Argument '{0}' is {1}",t||"?",n||"required");return e}function i(e,t){return e||t?e?t?(B(e)&&(e=e.join(" ")),B(t)&&(t=t.join(" ")),e+" "+t):e:t:""}function o(e){var t={};return e&&(e.to||e.from)&&(t.to=e.to,t.from=e.from),t}function a(e,t,n){var r="";return e=B(e)?e:e&&U(e)&&e.length?e.split(/\s+/):[],V(e,function(e,i){e&&e.length>0&&(r+=i>0?" ":"",r+=n?t+e:e+t)}),r}function s(e,t){var n=e.indexOf(t);t>=0&&e.splice(n,1)}function c(e){if(e instanceof j)switch(e.length){case 0:return[];case 1:if(e[0].nodeType===G)return e;break;default:return j(l(e))}return e.nodeType===G?j(e):void 0}function l(e){if(!e[0])return e;for(var t=0;t<e.length;t++){var n=e[t];if(n.nodeType==G)return n}}function d(e,t,n){V(t,function(t){e.addClass(t,n)})}function u(e,t,n){V(t,function(t){e.removeClass(t,n)})}function m(e){return function(t,n){n.addClass&&(d(e,t,n.addClass),n.addClass=null),n.removeClass&&(u(e,t,n.removeClass),n.removeClass=null)}}function f(e){if(e=e||{},!e.$$prepared){var t=e.domOperation||L;e.domOperation=function(){e.$$domOperationFired=!0,t(),t=L},e.$$prepared=!0}return e}function p(e,t){h(e,t),g(e,t)}function h(e,t){t.from&&(e.css(t.from),t.from=null)}function g(e,t){t.to&&(e.css(t.to),t.to=null)}function v(e,t,n){var r=(t.addClass||"")+" "+(n.addClass||""),i=(t.removeClass||"")+" "+(n.removeClass||""),o=$(e.attr("class"),r,i);n.preparationClasses&&(t.preparationClasses=x(n.preparationClasses,t.preparationClasses),delete n.preparationClasses);var a=t.domOperation!==L?t.domOperation:null;return F(t,n),a&&(t.domOperation=a),o.addClass?t.addClass=o.addClass:t.addClass=null,o.removeClass?t.removeClass=o.removeClass:t.removeClass=null,t}function $(e,t,n){function r(e){U(e)&&(e=e.split(" "));var t={};return V(e,function(e){e.length&&(t[e]=!0)}),t}var i=1,o=-1,a={};e=r(e),t=r(t),V(t,function(e,t){a[t]=i}),n=r(n),V(n,function(e,t){a[t]=a[t]===i?null:o});var s={addClass:"",removeClass:""};return V(a,function(t,n){var r,a;t===i?(r="addClass",a=!e[n]):t===o&&(r="removeClass",a=e[n]),a&&(s[r].length&&(s[r]+=" "),s[r]+=n)}),s}function b(e){return e instanceof t.element?e[0]:e}function E(e,t,n){var r="";t&&(r=a(t,J,!0)),n.addClass&&(r=x(r,a(n.addClass,X))),n.removeClass&&(r=x(r,a(n.removeClass,Z))),r.length&&(n.preparationClasses=r,e.addClass(r))}function y(e,t){t.preparationClasses&&(e.removeClass(t.preparationClasses),t.preparationClasses=null),t.activeClasses&&(e.removeClass(t.activeClasses),t.activeClasses=null)}function M(e,t){var n=t?"-"+t+"s":"";return w(e,[me,n]),[me,n]}function C(e,t){var n=t?"paused":"",r=R+ce;return w(e,[r,n]),[r,n]}function w(e,t){var n=t[0],r=t[1];e.style[n]=r}function x(e,t){return e?t?e+" "+t:e:t}function A(e){return[ue,e+"s"]}function k(e,t){var n=t?de:me;return[n,e+"s"]}function T(e,t,n){var r=Object.create(null),i=e.getComputedStyle(t)||{};return V(n,function(e,t){var n=i[e];if(n){var o=n.charAt(0);("-"===o||"+"===o||o>=0)&&(n=S(n)),0===n&&(n=null),r[t]=n}}),r}function S(e){var t=0,n=e.split(/\s*,\s*/);return V(n,function(e){"s"==e.charAt(e.length-1)&&(e=e.substring(0,e.length-1)),e=parseFloat(e)||0,t=t?Math.max(e,t):e}),t}function N(e){return 0===e||null!=e}function _(e,t){var n=O,r=e+"s";return t?n+=re:r+=" linear all",[n,r]}function D(){var e=Object.create(null);return{flush:function(){e=Object.create(null)},count:function(t){var n=e[t];return n?n.total:0},get:function(t){var n=e[t];return n&&n.value},put:function(t,n){e[t]?e[t].total++:e[t]={total:1,value:n}}}}function H(e,t,n){V(n,function(n){e[n]=W(e[n])?e[n]:t.style.getPropertyValue(n);
})}var O,I,R,P,L=t.noop,F=t.extend,j=t.element,V=t.forEach,B=t.isArray,U=t.isString,q=t.isObject,z=t.isUndefined,W=t.isDefined,Y=t.isFunction,K=t.isElement,G=1,X="-add",Z="-remove",J="ng-",Q="-active",ee="ng-animate",te="$$ngAnimateChildren",ne="";z(e.ontransitionend)&&W(e.onwebkittransitionend)?(ne="-webkit-",O="WebkitTransition",I="webkitTransitionEnd transitionend"):(O="transition",I="transitionend"),z(e.onanimationend)&&W(e.onwebkitanimationend)?(ne="-webkit-",R="WebkitAnimation",P="webkitAnimationEnd animationend"):(R="animation",P="animationend");var re="Duration",ie="Property",oe="Delay",ae="TimingFunction",se="IterationCount",ce="PlayState",le=9999,de=R+oe,ue=R+re,me=O+oe,fe=O+re,pe=["$$rAF",function(e){function t(e){r=r.concat(e),n()}function n(){if(r.length){for(var t=r.shift(),o=0;o<t.length;o++)t[o]();i||e(function(){i||n()})}}var r,i;return r=t.queue=[],t.waitUntilQuiet=function(t){i&&i(),i=e(function(){i=null,t(),n()})},t}],he=[function(){return function(e,n,r){var i=r.ngAnimateChildren;t.isString(i)&&0===i.length?n.data(te,!0):r.$observe("ngAnimateChildren",function(e){e="on"===e||"true"===e,n.data(te,e)})}}],ge="$$animateCss",ve=1e3,$e=3,be=1.5,Ee={transitionDuration:fe,transitionDelay:me,transitionProperty:O+ie,animationDuration:ue,animationDelay:de,animationIterationCount:R+se},ye={transitionDuration:fe,transitionDelay:me,animationDuration:ue,animationDelay:de},Me=["$animateProvider",function(e){var t=D(),n=D();this.$get=["$window","$$jqLite","$$AnimateRunner","$timeout","$$forceReflow","$sniffer","$$rAFScheduler","$animate",function(e,r,i,c,l,d,u,v){function $(e,t){var n="$$ngAnimateParentKey",r=e.parentNode,i=r[n]||(r[n]=++F);return i+"-"+e.getAttribute("class")+"-"+t}function E(n,r,i,o){var a=t.get(i);return a||(a=T(e,n,o),"infinite"===a.animationIterationCount&&(a.animationIterationCount=1)),t.put(i,a),a}function y(i,o,s,c){var l;if(t.count(s)>0&&(l=n.get(s),!l)){var d=a(o,"-stagger");r.addClass(i,d),l=T(e,i,c),l.animationDuration=Math.max(l.animationDuration,0),l.transitionDuration=Math.max(l.transitionDuration,0),r.removeClass(i,d),n.put(s,l)}return l||{}}function x(e){j.push(e),u.waitUntilQuiet(function(){t.flush(),n.flush();for(var e=l(),r=0;r<j.length;r++)j[r](e);j.length=0})}function S(e,t,n){var r=E(e,t,n,Ee),i=r.animationDelay,o=r.transitionDelay;return r.maxDelay=i&&o?Math.max(i,o):i||o,r.maxDuration=Math.max(r.animationDuration*r.animationIterationCount,r.transitionDuration),r}var D=m(r),F=0,j=[];return function(e,n){function l(){m()}function u(){m(!0)}function m(t){q||W&&z||(q=!0,z=!1,n.$$skipPreparationClasses||r.removeClass(e,fe),r.removeClass(e,he),C(U,!1),M(U,!1),V(re,function(e){U.style[e[0]]=""}),D(e,n),p(e,n),Object.keys(j).length&&V(j,function(e,t){e?U.style.setProperty(t,e):U.style.removeProperty(t)}),n.onDone&&n.onDone(),Y&&Y.complete(!t))}function E(e){Oe.blockTransition&&M(U,e),Oe.blockKeyframeAnimation&&C(U,!!e)}function T(){return Y=new i({end:l,cancel:u}),x(L),m(),{$$willAnimate:!1,start:function(){return Y},end:l}}function F(){function t(){if(!q){if(E(!1),V(re,function(e){var t=e[0],n=e[1];U.style[t]=n}),D(e,n),r.addClass(e,he),Oe.recalculateTimingStyles){if(pe=U.className+" "+fe,Ce=$(U,pe),De=S(U,pe,Ce),He=De.maxDelay,G=Math.max(He,0),te=De.maxDuration,0===te)return void m();Oe.hasTransitions=De.transitionDuration>0,Oe.hasAnimations=De.animationDuration>0}if(Oe.applyAnimationDelay&&(He="boolean"!=typeof n.delay&&N(n.delay)?parseFloat(n.delay):He,G=Math.max(He,0),De.animationDelay=He,Ie=k(He,!0),re.push(Ie),U.style[Ie[0]]=Ie[1]),ee=G*ve,ne=te*ve,n.easing){var t,s=n.easing;Oe.hasTransitions&&(t=O+ae,re.push([t,s]),U.style[t]=s),Oe.hasAnimations&&(t=R+ae,re.push([t,s]),U.style[t]=s)}De.transitionDuration&&l.push(I),De.animationDuration&&l.push(P),a=Date.now();var d=ee+be*ne,u=a+d,f=e.data(ge)||[],p=!0;if(f.length){var h=f[0];p=u>h.expectedEndTime,p?c.cancel(h.timer):f.push(m)}if(p){var v=c(i,d,!1);f[0]={timer:v,expectedEndTime:u},f.push(m),e.data(ge,f)}e.on(l.join(" "),o),n.to&&(n.cleanupStyles&&H(j,U,Object.keys(n.to)),g(e,n))}}function i(){var t=e.data(ge);if(t){for(var n=1;n<t.length;n++)t[n]();e.removeData(ge)}}function o(e){e.stopPropagation();var t=e.originalEvent||e,n=t.$manualTimeStamp||t.timeStamp||Date.now(),r=parseFloat(t.elapsedTime.toFixed($e));Math.max(n-a,0)>=ee&&r>=te&&(W=!0,m())}if(!q){if(!U.parentNode)return void m();var a,l=[],d=function(e){if(W)z&&e&&(z=!1,m());else if(z=!e,De.animationDuration){var t=C(U,z);z?re.push(t):s(re,t)}},u=Ne>0&&(De.transitionDuration&&0===we.transitionDuration||De.animationDuration&&0===we.animationDuration)&&Math.max(we.animationDelay,we.transitionDelay);u?c(t,Math.floor(u*Ne*ve),!1):t(),K.resume=function(){d(!0)},K.pause=function(){d(!1)}}}var j={},U=b(e);if(!U||!U.parentNode||!v.enabled())return T();n=f(n);var q,z,W,Y,K,G,ee,te,ne,re=[],oe=e.attr("class"),se=o(n);if(0===n.duration||!d.animations&&!d.transitions)return T();var ce=n.event&&B(n.event)?n.event.join(" "):n.event,de=ce&&n.structural,ue="",me="";de?ue=a(ce,J,!0):ce&&(ue=ce),n.addClass&&(me+=a(n.addClass,X)),n.removeClass&&(me.length&&(me+=" "),me+=a(n.removeClass,Z)),n.applyClassesEarly&&me.length&&D(e,n);var fe=[ue,me].join(" ").trim(),pe=oe+" "+fe,he=a(fe,Q),Ee=se.to&&Object.keys(se.to).length>0,Me=(n.keyframeStyle||"").length>0;if(!Me&&!Ee&&!fe)return T();var Ce,we;if(n.stagger>0){var xe=parseFloat(n.stagger);we={transitionDelay:xe,animationDelay:xe,transitionDuration:0,animationDuration:0}}else Ce=$(U,pe),we=y(U,fe,Ce,ye);n.$$skipPreparationClasses||r.addClass(e,fe);var Ae;if(n.transitionStyle){var ke=[O,n.transitionStyle];w(U,ke),re.push(ke)}if(n.duration>=0){Ae=U.style[O].length>0;var Te=_(n.duration,Ae);w(U,Te),re.push(Te)}if(n.keyframeStyle){var Se=[R,n.keyframeStyle];w(U,Se),re.push(Se)}var Ne=we?n.staggerIndex>=0?n.staggerIndex:t.count(Ce):0,_e=0===Ne;_e&&!n.skipBlocking&&M(U,le);var De=S(U,pe,Ce),He=De.maxDelay;G=Math.max(He,0),te=De.maxDuration;var Oe={};if(Oe.hasTransitions=De.transitionDuration>0,Oe.hasAnimations=De.animationDuration>0,Oe.hasTransitionAll=Oe.hasTransitions&&"all"==De.transitionProperty,Oe.applyTransitionDuration=Ee&&(Oe.hasTransitions&&!Oe.hasTransitionAll||Oe.hasAnimations&&!Oe.hasTransitions),Oe.applyAnimationDuration=n.duration&&Oe.hasAnimations,Oe.applyTransitionDelay=N(n.delay)&&(Oe.applyTransitionDuration||Oe.hasTransitions),Oe.applyAnimationDelay=N(n.delay)&&Oe.hasAnimations,Oe.recalculateTimingStyles=me.length>0,(Oe.applyTransitionDuration||Oe.applyAnimationDuration)&&(te=n.duration?parseFloat(n.duration):te,Oe.applyTransitionDuration&&(Oe.hasTransitions=!0,De.transitionDuration=te,Ae=U.style[O+ie].length>0,re.push(_(te,Ae))),Oe.applyAnimationDuration&&(Oe.hasAnimations=!0,De.animationDuration=te,re.push(A(te)))),0===te&&!Oe.recalculateTimingStyles)return T();if(null!=n.delay){var Ie=parseFloat(n.delay);Oe.applyTransitionDelay&&re.push(k(Ie)),Oe.applyAnimationDelay&&re.push(k(Ie,!0))}return null==n.duration&&De.transitionDuration>0&&(Oe.recalculateTimingStyles=Oe.recalculateTimingStyles||_e),ee=G*ve,ne=te*ve,n.skipBlocking||(Oe.blockTransition=De.transitionDuration>0,Oe.blockKeyframeAnimation=De.animationDuration>0&&we.animationDelay>0&&0===we.animationDuration),n.from&&(n.cleanupStyles&&H(j,U,Object.keys(n.from)),h(e,n)),Oe.blockTransition||Oe.blockKeyframeAnimation?E(te):n.skipBlocking||M(U,!1),{$$willAnimate:!0,end:l,start:function(){return q?void 0:(K={end:l,cancel:u,resume:null,pause:null},Y=new i(K),x(F),Y)}}}}]}],Ce=["$$animationProvider",function(e){function t(e){return e.parentNode&&11===e.parentNode.nodeType}e.drivers.push("$$animateCssDriver");var n="ng-animate-shim",r="ng-anchor",i="ng-anchor-out",o="ng-anchor-in";this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$sniffer","$$jqLite","$document",function(e,a,s,c,l,d,u){function f(e){return e.replace(/\bng-\S+\b/g,"")}function p(e,t){return U(e)&&(e=e.split(" ")),U(t)&&(t=t.split(" ")),e.filter(function(e){return-1===t.indexOf(e)}).join(" ")}function h(t,a,c){function l(e){var t={},n=b(e).getBoundingClientRect();return V(["width","height","top","left"],function(e){var r=n[e];switch(e){case"top":r+=$.scrollTop;break;case"left":r+=$.scrollLeft}t[e]=Math.floor(r)+"px"}),t}function d(){var t=e(g,{addClass:i,delay:!0,from:l(a)});return t.$$willAnimate?t:null}function u(e){return e.attr("class")||""}function m(){var t=f(u(c)),n=p(t,v),r=p(v,t),a=e(g,{to:l(c),addClass:o+" "+n,removeClass:i+" "+r,delay:!0});return a.$$willAnimate?a:null}function h(){g.remove(),a.removeClass(n),c.removeClass(n)}var g=j(b(a).cloneNode(!0)),v=f(u(g));a.addClass(n),c.addClass(n),g.addClass(r),y.append(g);var E,M=d();if(!M&&(E=m(),!E))return h();var C=M||E;return{start:function(){function e(){n&&n.end()}var t,n=C.start();return n.done(function(){return n=null,!E&&(E=m())?(n=E.start(),n.done(function(){n=null,h(),t.complete()}),n):(h(),void t.complete())}),t=new s({end:e,cancel:e})}}}function g(e,t,n,r){var i=v(e,L),o=v(t,L),a=[];return V(r,function(e){var t=e.out,r=e["in"],i=h(n,t,r);i&&a.push(i)}),i||o||0!==a.length?{start:function(){function e(){V(t,function(e){e.end()})}var t=[];i&&t.push(i.start()),o&&t.push(o.start()),V(a,function(e){t.push(e.start())});var n=new s({end:e,cancel:e});return s.all(t,function(e){n.complete(e)}),n}}:void 0}function v(t){var n=t.element,r=t.options||{};t.structural&&(r.event=t.event,r.structural=!0,r.applyClassesEarly=!0,"leave"===t.event&&(r.onDone=r.domOperation)),r.preparationClasses&&(r.event=x(r.event,r.preparationClasses));var i=e(n,r);return i.$$willAnimate?i:null}if(!l.animations&&!l.transitions)return L;var $=u[0].body,E=b(c),y=j(t(E)||$.contains(E)?E:$);m(d);return function(e){return e.from&&e.to?g(e.from,e.to,e.classes,e.anchors):v(e)}}]}],we=["$animateProvider",function(e){this.$get=["$injector","$$AnimateRunner","$$jqLite",function(t,n,r){function i(n){n=B(n)?n:n.split(" ");for(var r=[],i={},o=0;o<n.length;o++){var a=n[o],s=e.$$registeredAnimations[a];s&&!i[a]&&(r.push(t.get(s)),i[a]=!0)}return r}var o=m(r);return function(e,t,r,a){function s(){a.domOperation(),o(e,a)}function c(e,t,r,i,o){var a;switch(r){case"animate":a=[t,i.from,i.to,o];break;case"setClass":a=[t,h,g,o];break;case"addClass":a=[t,h,o];break;case"removeClass":a=[t,g,o];break;default:a=[t,o]}a.push(i);var s=e.apply(e,a);if(s)if(Y(s.start)&&(s=s.start()),s instanceof n)s.done(o);else if(Y(s))return s;return L}function l(e,t,r,i,o){var a=[];return V(i,function(i){var s=i[o];s&&a.push(function(){var i,o,a=!1,l=function(e){a||(a=!0,(o||L)(e),i.complete(!e))};return i=new n({end:function(){l()},cancel:function(){l(!0)}}),o=c(s,e,t,r,function(e){var t=e===!1;l(t)}),i})}),a}function d(e,t,r,i,o){var a=l(e,t,r,i,o);if(0===a.length){var s,c;"beforeSetClass"===o?(s=l(e,"removeClass",r,i,"beforeRemoveClass"),c=l(e,"addClass",r,i,"beforeAddClass")):"setClass"===o&&(s=l(e,"removeClass",r,i,"removeClass"),c=l(e,"addClass",r,i,"addClass")),s&&(a=a.concat(s)),c&&(a=a.concat(c))}if(0!==a.length)return function(e){var t=[];return a.length&&V(a,function(e){t.push(e())}),t.length?n.all(t,e):e(),function(e){V(t,function(t){e?t.cancel():t.end()})}}}3===arguments.length&&q(r)&&(a=r,r=null),a=f(a),r||(r=e.attr("class")||"",a.addClass&&(r+=" "+a.addClass),a.removeClass&&(r+=" "+a.removeClass));var u,m,h=a.addClass,g=a.removeClass,v=i(r);if(v.length){var $,b;"leave"==t?(b="leave",$="afterLeave"):(b="before"+t.charAt(0).toUpperCase()+t.substr(1),$=t),"enter"!==t&&"move"!==t&&(u=d(e,t,a,v,b)),m=d(e,t,a,v,$)}return u||m?{start:function(){function t(t){c=!0,s(),p(e,a),l.complete(t)}function r(e){c||((i||L)(e),t(e))}var i,o=[];u&&o.push(function(e){i=u(e)}),o.length?o.push(function(e){s(),e(!0)}):s(),m&&o.push(function(e){i=m(e)});var c=!1,l=new n({end:function(){r()},cancel:function(){r(!0)}});return n.chain(o,t),l}}:void 0}}]}],xe=["$$animationProvider",function(e){e.drivers.push("$$animateJsDriver"),this.$get=["$$animateJs","$$AnimateRunner",function(e,t){function n(t){var n=t.element,r=t.event,i=t.options,o=t.classes;return e(n,r,o,i)}return function(e){if(e.from&&e.to){var r=n(e.from),i=n(e.to);if(!r&&!i)return;return{start:function(){function e(){return function(){V(o,function(e){e.end()})}}function n(e){a.complete(e)}var o=[];r&&o.push(r.start()),i&&o.push(i.start()),t.all(o,n);var a=new t({end:e(),cancel:e()});return a}}}return n(e)}}]}],Ae="data-ng-animate",ke="$ngAnimatePin",Te=["$animateProvider",function(e){function t(e,t,n,r){return a[e].some(function(e){return e(t,n,r)})}function n(e,t){e=e||{};var n=(e.addClass||"").length>0,r=(e.removeClass||"").length>0;return t?n&&r:n||r}var i=1,o=2,a=this.rules={skip:[],cancel:[],join:[]};a.join.push(function(e,t,r){return!t.structural&&n(t.options)}),a.skip.push(function(e,t,r){return!t.structural&&!n(t.options)}),a.skip.push(function(e,t,n){return"leave"==n.event&&t.structural}),a.skip.push(function(e,t,n){return n.structural&&n.state===o&&!t.structural}),a.cancel.push(function(e,t,n){return n.structural&&t.structural}),a.cancel.push(function(e,t,n){return n.state===o&&t.structural}),a.cancel.push(function(e,t,n){var r=t.options,i=n.options;return r.addClass&&r.addClass===i.removeClass||r.removeClass&&r.removeClass===i.addClass}),this.$get=["$$rAF","$rootScope","$rootElement","$document","$$HashMap","$$animation","$$AnimateRunner","$templateRequest","$$jqLite","$$forceReflow",function(a,s,d,u,h,g,$,M,C,w){function x(){var e=!1;return function(t){e?t():s.$$postDigest(function(){e=!0,t()})}}function A(e,t){return v(e,t,{})}function k(e,t,n){var r=b(t),i=b(e),o=[],a=L[n];return a&&V(a,function(e){e.node.contains(r)?o.push(e.callback):"leave"===n&&e.node.contains(i)&&o.push(e.callback)}),o}function T(e,r,l){function d(t,n,r,i){C(function(){var t=k(h,e,n);t.length&&a(function(){V(t,function(t){t(e,r,i)})})}),t.progress(n,r,i)}function u(t){y(e,l),Z(e,l),p(e,l),l.domOperation(),M.complete(!t)}var m,h;e=c(e),e&&(m=b(e),h=e.parent()),l=f(l);var M=new $,C=x();if(B(l.addClass)&&(l.addClass=l.addClass.join(" ")),l.addClass&&!U(l.addClass)&&(l.addClass=null),B(l.removeClass)&&(l.removeClass=l.removeClass.join(" ")),l.removeClass&&!U(l.removeClass)&&(l.removeClass=null),l.from&&!q(l.from)&&(l.from=null),l.to&&!q(l.to)&&(l.to=null),!m)return u(),M;var w=[m.className,l.addClass,l.removeClass].join(" ");if(!X(w))return u(),M;var T=["enter","move","leave"].indexOf(r)>=0,_=!R||I.get(m),P=!_&&O.get(m)||{},L=!!P.state;if(_||L&&P.state==i||(_=!D(e,h,r)),_)return u(),M;T&&S(e);var F={structural:T,element:e,event:r,close:u,options:l,runner:M};if(L){var j=t("skip",e,F,P);if(j)return P.state===o?(u(),M):(v(e,P.options,l),P.runner);var z=t("cancel",e,F,P);if(z)if(P.state===o)P.runner.end();else{if(!P.structural)return v(e,P.options,F.options),P.runner;P.close()}else{var W=t("join",e,F,P);if(W){if(P.state!==o)return E(e,T?r:null,l),r=F.event=P.event,l=v(e,P.options,F.options),P.runner;A(e,l)}}}else A(e,l);var Y=F.structural;if(Y||(Y="animate"===F.event&&Object.keys(F.options.to||{}).length>0||n(F.options)),!Y)return u(),N(e),M;var K=(P.counter||0)+1;return F.counter=K,H(e,i,F),s.$$postDigest(function(){var t=O.get(m),i=!t;t=t||{};var a=e.parent()||[],s=a.length>0&&("animate"===t.event||t.structural||n(t.options));if(i||t.counter!==K||!s)return i&&(Z(e,l),p(e,l)),(i||T&&t.event!==r)&&(l.domOperation(),M.end()),void(s||N(e));r=!t.structural&&n(t.options,!0)?"setClass":t.event,H(e,o);var c=g(e,r,t.options);c.done(function(t){u(!t);var n=O.get(m);n&&n.counter===K&&N(b(e)),d(M,r,"close",{})}),M.setHost(c),d(M,r,"start",{})}),M}function S(e){var t=b(e),n=t.querySelectorAll("["+Ae+"]");V(n,function(e){var t=parseInt(e.getAttribute(Ae)),n=O.get(e);switch(t){case o:n.runner.end();case i:n&&O.remove(e)}})}function N(e){var t=b(e);t.removeAttribute(Ae),O.remove(t)}function _(e,t){return b(e)===b(t)}function D(e,t,n){var r,i=j(u[0].body),o=_(e,i)||"HTML"===e[0].nodeName,a=_(e,d),s=!1,c=e.data(ke);for(c&&(t=c);t&&t.length;){a||(a=_(t,d));var l=t[0];if(l.nodeType!==G)break;var m=O.get(l)||{};if(s||(s=m.structural||I.get(l)),z(r)||r===!0){var f=t.data(te);W(f)&&(r=f)}if(s&&r===!1)break;a||(a=_(t,d),a||(c=t.data(ke),c&&(t=c))),o||(o=_(t,i)),t=t.parent()}var p=!s||r;return p&&a&&o}function H(e,t,n){n=n||{},n.state=t;var r=b(e);r.setAttribute(Ae,t);var i=O.get(r),o=i?F(i,n):n;O.put(r,o)}var O=new h,I=new h,R=null,P=s.$watch(function(){return 0===M.totalPendingRequests},function(e){e&&(P(),s.$$postDigest(function(){s.$$postDigest(function(){null===R&&(R=!0)})}))}),L={},Y=e.classNameFilter(),X=Y?function(e){return Y.test(e)}:function(){return!0},Z=m(C);return{on:function(e,t,n){var r=l(t);L[e]=L[e]||[],L[e].push({node:r,callback:n})},off:function(e,t,n){function r(e,t,n){var r=l(t);return e.filter(function(e){var t=e.node===r&&(!n||e.callback===n);return!t})}var i=L[e];i&&(L[e]=1===arguments.length?null:r(i,t,n))},pin:function(e,t){r(K(e),"element","not an element"),r(K(t),"parentElement","not an element"),e.data(ke,t)},push:function(e,t,n,r){return n=n||{},n.domOperation=r,T(e,t,n)},enabled:function(e,t){var n=arguments.length;if(0===n)t=!!R;else{var r=K(e);if(r){var i=b(e),o=I.get(i);1===n?t=!o:(t=!!t,t?o&&I.remove(i):I.put(i,!0))}else t=R=!!e}return t}}}]}],Se=["$$rAF",function(e){function t(t){n.push(t),n.length>1||e(function(){for(var e=0;e<n.length;e++)n[e]();n=[]})}var n=[];return function(){var e=!1;return t(function(){e=!0}),function(n){e?n():t(n)}}}],Ne=["$q","$sniffer","$$animateAsyncRun",function(e,t,n){function r(e){this.setHost(e),this._doneCallbacks=[],this._runInAnimationFrame=n(),this._state=0}var i=0,o=1,a=2;return r.chain=function(e,t){function n(){return r===e.length?void t(!0):void e[r](function(e){return e===!1?void t(!1):(r++,void n())})}var r=0;n()},r.all=function(e,t){function n(n){i=i&&n,++r===e.length&&t(i)}var r=0,i=!0;V(e,function(e){e.done(n)})},r.prototype={setHost:function(e){this.host=e||{}},done:function(e){this._state===a?e():this._doneCallbacks.push(e)},progress:L,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){t===!1?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;t._state===i&&(t._state=o,t._runInAnimationFrame(function(){t._resolve(e)}))},_resolve:function(e){this._state!==a&&(V(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=a)}},r}],_e=["$animateProvider",function(e){function t(e,t){e.data(s,t)}function n(e){e.removeData(s)}function r(e){return e.data(s)}var o="ng-animate-ref",a=this.drivers=[],s="$$animationRunner";this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$HashMap","$$rAFScheduler",function(e,s,c,l,d,u){function h(e){function t(e){if(e.processed)return e;e.processed=!0;var n=e.domNode,r=n.parentNode;o.put(n,e);for(var a;r;){if(a=o.get(r)){a.processed||(a=t(a));break}r=r.parentNode}return(a||i).children.push(e),e}function n(e){var t,n=[],r=[];for(t=0;t<e.children.length;t++)r.push(e.children[t]);var i=r.length,o=0,a=[];for(t=0;t<r.length;t++){var s=r[t];0>=i&&(i=o,o=0,n.push(a),a=[]),a.push(s.fn),s.children.forEach(function(e){o++,r.push(e)}),i--}return a.length&&n.push(a),n}var r,i={children:[]},o=new d;for(r=0;r<e.length;r++){var a=e[r];o.put(a.domNode,e[r]={domNode:a.domNode,fn:a.fn,children:[]})}for(r=0;r<e.length;r++)t(e[r]);return n(i)}var g=[],v=m(e);return function(d,m,$){function E(e){var t="["+o+"]",n=e.hasAttribute(o)?[e]:e.querySelectorAll(t),r=[];return V(n,function(e){var t=e.getAttribute(o);t&&t.length&&r.push(e)}),r}function y(e){var t=[],n={};V(e,function(e,r){var i=e.element,a=b(i),s=e.event,c=["enter","move"].indexOf(s)>=0,l=e.structural?E(a):[];if(l.length){var d=c?"to":"from";V(l,function(e){var t=e.getAttribute(o);n[t]=n[t]||{},n[t][d]={animationID:r,element:j(e)}})}else t.push(e)});var r={},i={};return V(n,function(n,o){var a=n.from,s=n.to;if(!a||!s){var c=a?a.animationID:s.animationID,l=c.toString();return void(r[l]||(r[l]=!0,t.push(e[c])))}var d=e[a.animationID],u=e[s.animationID],m=a.animationID.toString();if(!i[m]){var f=i[m]={structural:!0,beforeStart:function(){d.beforeStart(),u.beforeStart()},close:function(){d.close(),u.close()},classes:M(d.classes,u.classes),from:d,to:u,anchors:[]};f.classes.length?t.push(f):(t.push(d),t.push(u))}i[m].anchors.push({out:a.element,"in":s.element})}),t}function M(e,t){e=e.split(" "),t=t.split(" ");for(var n=[],r=0;r<e.length;r++){var i=e[r];if("ng-"!==i.substring(0,3))for(var o=0;o<t.length;o++)if(i===t[o]){n.push(i);break}}return n.join(" ")}function C(e){for(var t=a.length-1;t>=0;t--){var n=a[t];if(c.has(n)){var r=c.get(n),i=r(e);if(i)return i}}}function w(){d.addClass(ee),_&&e.addClass(d,_)}function x(e,t){function n(e){r(e).setHost(t)}e.from&&e.to?(n(e.from.element),n(e.to.element)):n(e.element)}function A(){var e=r(d);!e||"leave"===m&&$.$$domOperationFired||e.end()}function k(t){d.off("$destroy",A),n(d),v(d,$),p(d,$),$.domOperation(),_&&e.removeClass(d,_),d.removeClass(ee),S.complete(!t)}$=f($);var T=["enter","move","leave"].indexOf(m)>=0,S=new l({end:function(){k()},cancel:function(){k(!0)}});if(!a.length)return k(),S;t(d,S);var N=i(d.attr("class"),i($.addClass,$.removeClass)),_=$.tempClasses;return _&&(N+=" "+_,$.tempClasses=null),g.push({element:d,classes:N,event:m,structural:T,options:$,beforeStart:w,close:k}),d.on("$destroy",A),g.length>1?S:(s.$$postDigest(function(){var e=[];V(g,function(t){r(t.element)?e.push(t):t.close()}),g.length=0;var t=y(e),n=[];V(t,function(e){n.push({domNode:b(e.from?e.from.element:e.element),fn:function(){e.beforeStart();var t,n=e.close,i=e.anchors?e.from.element||e.to.element:e.element;if(r(i)){var o=C(e);o&&(t=o.start)}if(t){var a=t();a.done(function(e){n(!e)}),x(e,a)}else n()}})}),u(h(n))}),S)}}]}];t.module("ngAnimate",[]).directive("ngAnimateChildren",he).factory("$$rAFScheduler",pe).factory("$$AnimateRunner",Ne).factory("$$animateAsyncRun",Se).provider("$$animateQueue",Te).provider("$$animation",_e).provider("$animateCss",Me).provider("$$animateCssDriver",Ce).provider("$$animateJs",we).provider("$$animateJsDriver",xe)}(window,window.angular),function(e,t,n){"use strict";function r(){function e(e,t,r,i){return function(o,s,c){var l=c.$normalize(t);!n[l]||a(s,r)||c[l]||o.$watch(c[e],function(e){e=i?!e:!!e,s.attr(t,e)})}}var n={ariaHidden:!0,ariaChecked:!0,ariaDisabled:!0,ariaRequired:!0,ariaInvalid:!0,ariaMultiline:!0,ariaValue:!0,tabindex:!0,bindKeypress:!0,bindRoleForClick:!0};this.config=function(e){n=t.extend(n,e)},this.$get=function(){return{config:function(e){return n[e]},$$watchExpr:e}}}var i=t.module("ngAria",["ng"]).provider("$aria",r),o=["BUTTON","A","INPUT","TEXTAREA","SELECT","DETAILS","SUMMARY"],a=function(e,t){return-1!==t.indexOf(e[0].nodeName)?!0:void 0};i.directive("ngShow",["$aria",function(e){return e.$$watchExpr("ngShow","aria-hidden",[],!0)}]).directive("ngHide",["$aria",function(e){return e.$$watchExpr("ngHide","aria-hidden",[],!1)}]).directive("ngModel",["$aria",function(e){function t(t,n,r){return e.config(n)&&!r.attr(t)}function n(e,t){return!t.attr("role")&&t.attr("type")===e&&"INPUT"!==t[0].nodeName}function r(e,t){var n=e.type,r=e.role;return"checkbox"===(n||r)||"menuitemcheckbox"===r?"checkbox":"radio"===(n||r)||"menuitemradio"===r?"radio":"range"===n||"progressbar"===r||"slider"===r?"range":"textbox"===(n||r)||"TEXTAREA"===t[0].nodeName?"multiline":""}return{restrict:"A",require:"?ngModel",priority:200,compile:function(i,s){var c=r(s,i);return{pre:function(e,t,n,r){"checkbox"===c&&"checkbox"!==n.type&&(r.$isEmpty=function(e){return e===!1})},post:function(r,i,s,l){function d(){return l.$modelValue}function u(){return f?(f=!1,function(e){var t=s.value==l.$viewValue;i.attr("aria-checked",t),i.attr("tabindex",0-!t)}):function(e){i.attr("aria-checked",s.value==l.$viewValue)}}function m(){i.attr("aria-checked",!l.$isEmpty(l.$viewValue))}var f=t("tabindex","tabindex",i)&&!a(i,o);switch(c){case"radio":case"checkbox":n(c,i)&&i.attr("role",c),t("aria-checked","ariaChecked",i)&&r.$watch(d,"radio"===c?u():m),f&&i.attr("tabindex",0);break;case"range":if(n(c,i)&&i.attr("role","slider"),e.config("ariaValue")){var p=!i.attr("aria-valuemin")&&(s.hasOwnProperty("min")||s.hasOwnProperty("ngMin")),h=!i.attr("aria-valuemax")&&(s.hasOwnProperty("max")||s.hasOwnProperty("ngMax")),g=!i.attr("aria-valuenow");p&&s.$observe("min",function(e){i.attr("aria-valuemin",e)}),h&&s.$observe("max",function(e){i.attr("aria-valuemax",e)}),g&&r.$watch(d,function(e){i.attr("aria-valuenow",e)})}f&&i.attr("tabindex",0);break;case"multiline":t("aria-multiline","ariaMultiline",i)&&i.attr("aria-multiline",!0)}l.$validators.required&&t("aria-required","ariaRequired",i)&&r.$watch(function(){return l.$error.required},function(e){i.attr("aria-required",!!e)}),t("aria-invalid","ariaInvalid",i)&&r.$watch(function(){return l.$invalid},function(e){i.attr("aria-invalid",!!e)})}}}}}]).directive("ngDisabled",["$aria",function(e){return e.$$watchExpr("ngDisabled","aria-disabled",[])}]).directive("ngMessages",function(){return{restrict:"A",require:"?ngMessages",link:function(e,t,n,r){t.attr("aria-live")||t.attr("aria-live","assertive")}}}).directive("ngClick",["$aria","$parse",function(e,t){return{restrict:"A",compile:function(n,r){var i=t(r.ngClick,null,!0);return function(t,n,r){a(n,o)||(e.config("bindRoleForClick")&&!n.attr("role")&&n.attr("role","button"),e.config("tabindex")&&!n.attr("tabindex")&&n.attr("tabindex",0),e.config("bindKeypress")&&!r.ngKeypress&&n.on("keypress",function(e){function n(){i(t,{$event:e})}var r=e.which||e.keyCode;(32===r||13===r)&&t.$apply(n)}))}}}}]).directive("ngDblclick",["$aria",function(e){return function(t,n,r){!e.config("tabindex")||n.attr("tabindex")||a(n,o)||n.attr("tabindex",0)}}])}(window,window.angular),function(e,t,n){"use strict";!function(){t.module("ngMaterial",["ng","ngAnimate","ngAria","material.core","material.core.gestures","material.core.layout","material.core.theming.palette","material.core.theming","material.core.animate","material.components.autocomplete","material.components.bottomSheet","material.components.backdrop","material.components.button","material.components.card","material.components.checkbox","material.components.chips","material.components.content","material.components.datepicker","material.components.dialog","material.components.divider","material.components.fabActions","material.components.fabShared","material.components.fabSpeedDial","material.components.fabToolbar","material.components.fabTrigger","material.components.gridList","material.components.icon","material.components.input","material.components.list","material.components.menu","material.components.menuBar","material.components.progressCircular","material.components.progressLinear","material.components.radioButton","material.components.select","material.components.showHide","material.components.sidenav","material.components.slider","material.components.sticky","material.components.subheader","material.components.swipe","material.components.switch","material.components.tabs","material.components.toast","material.components.toolbar","material.components.tooltip","material.components.virtualRepeat","material.components.whiteframe"])}(),function(){function e(e,t){if(t.has("$swipe")){var n="You are using the ngTouch module. \nAngular Material already has mobile click, tap, and swipe support... \nngTouch is not supported with Angular Material!";e.warn(n)}}function n(e,t){e.decorator("$$rAF",["$delegate",r]),t.theme("default").primaryPalette("indigo").accentPalette("pink").warnPalette("deep-orange").backgroundPalette("grey")}function r(e){return e.throttle=function(t){var n,r,i,o;return function(){n=arguments,o=this,i=t,r||(r=!0,e(function(){i.apply(o,Array.prototype.slice.call(n)),r=!1}))}},e}t.module("material.core",["ngAnimate","material.core.animate","material.core.layout","material.core.gestures","material.core.theming"]).config(n).run(e),e.$inject=["$log","$injector"],n.$inject=["$provide","$mdThemingProvider"]}(),function(){function e(e){function t(e){return n?"webkit"+e.charAt(0).toUpperCase()+e.substring(1):e}var n=/webkit/i.test(e.vendorPrefix);return{KEY_CODE:{COMMA:188,ENTER:13,ESCAPE:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT_ARROW:37,UP_ARROW:38,RIGHT_ARROW:39,DOWN_ARROW:40,TAB:9,BACKSPACE:8,DELETE:46},CSS:{TRANSITIONEND:"transitionend"+(n?" webkitTransitionEnd":""),ANIMATIONEND:"animationend"+(n?" webkitAnimationEnd":""),TRANSFORM:t("transform"),TRANSFORM_ORIGIN:t("transformOrigin"),TRANSITION:t("transition"),TRANSITION_DURATION:t("transitionDuration"),ANIMATION_PLAY_STATE:t("animationPlayState"),ANIMATION_DURATION:t("animationDuration"),ANIMATION_NAME:t("animationName"),ANIMATION_TIMING:t("animationTimingFunction"),ANIMATION_DIRECTION:t("animationDirection")},MEDIA:{xs:"(max-width: 599px)","gt-xs":"(min-width: 600px)",sm:"(min-width: 600px) and (max-width: 959px)","gt-sm":"(min-width: 960px)",md:"(min-width: 960px) and (max-width: 1279px)","gt-md":"(min-width: 1280px)",lg:"(min-width: 1280px) and (max-width: 1919px)","gt-lg":"(min-width: 1920px)",xl:"(min-width: 1920px)"},MEDIA_PRIORITY:["xl","gt-lg","lg","gt-md","md","gt-sm","sm","gt-xs","xs"]}}t.module("material.core").factory("$mdConstant",e),e.$inject=["$sniffer"]}(),function(){function e(e,n){function r(){return[].concat($)}function i(){return $.length}function o(e){return $.length&&e>-1&&e<$.length}function a(e){return e?o(m(e)+1):!1}function s(e){return e?o(m(e)-1):!1}function c(e){return o(e)?$[e]:null}function l(e,t){return $.filter(function(n){return n[e]===t})}function d(e,n){return e?(t.isNumber(n)||(n=$.length),$.splice(n,0,e),m(e)):-1}function u(e){f(e)&&$.splice(m(e),1)}function m(e){return $.indexOf(e)}function f(e){return e&&m(e)>-1}function p(){return $.length?$[0]:null}function h(){return $.length?$[$.length-1]:null}function g(e,r,i,a){i=i||v;for(var s=m(r);;){if(!o(s))return null;var c=s+(e?-1:1),l=null;if(o(c)?l=$[c]:n&&(l=e?h():p(),c=m(l)),null===l||c===a)return null;if(i(l))return l;t.isUndefined(a)&&(a=c),s=c}}var v=function(){return!0};e&&!t.isArray(e)&&(e=Array.prototype.slice.call(e)),n=!!n;var $=e||[];return{items:r,count:i,inRange:o,contains:f,indexOf:m,itemAt:c,findBy:l,add:d,remove:u,first:p,last:h,next:t.bind(null,g,!1),previous:t.bind(null,g,!0),hasPrevious:s,hasNext:a}}t.module("material.core").config(["$provide",function(t){t.decorator("$mdUtil",["$delegate",function(t){return t.iterator=e,t}])}])}(),function(){function e(e,n,r){function i(e){var n=m[e];t.isUndefined(n)&&(n=m[e]=o(e));var r=p[n];return t.isUndefined(r)&&(r=a(n)),r}function o(t){return e.MEDIA[t]||("("!==t.charAt(0)?"("+t+")":t)}function a(e){var t=f[e];return t||(t=f[e]=r.matchMedia(e)),t.addListener(s),p[t.media]=!!t.matches}function s(e){n.$evalAsync(function(){p[e.media]=!!e.matches})}function c(e){return f[e]}function l(t,n){for(var r=0;r<e.MEDIA_PRIORITY.length;r++){var i=e.MEDIA_PRIORITY[r];if(f[m[i]].matches){var o=u(t,n+"-"+i);if(t[o])return t[o]}}return t[u(t,n)]}function d(n,r,i){var o=[];return n.forEach(function(n){var a=u(r,n);t.isDefined(r[a])&&o.push(r.$observe(a,t.bind(void 0,i,null)));for(var s in e.MEDIA)a=u(r,n+"-"+s),t.isDefined(r[a])&&o.push(r.$observe(a,t.bind(void 0,i,s)))}),function(){o.forEach(function(e){e()})}}function u(e,t){return h[t]||(h[t]=e.$normalize(t))}var m={},f={},p={},h={};return i.getResponsiveAttribute=l,i.getQuery=c,i.watchResponsiveAttributes=d,i}t.module("material.core").factory("$mdMedia",e),e.$inject=["$mdConstant","$rootScope","$window"]}(),function(){function r(r,o,a,s,c,l,d,u,m){function f(e){return e[0]||e}var p=l.startSymbol(),h=l.endSymbol(),g="{{"===p&&"}}"===h,v=function(e,n,r){var i=!1;if(e&&e.length){var o=m.getComputedStyle(e[0]);i=t.isDefined(o[n])&&(r?o[n]==r:!0);
}return i},$={dom:{},now:e.performance?t.bind(e.performance,e.performance.now):Date.now||function(){return(new Date).getTime()},clientRect:function(e,t,n){var r=f(e);t=f(t||r.offsetParent||document.body);var i=r.getBoundingClientRect(),o=n?t.getBoundingClientRect():{left:0,top:0,width:0,height:0};return{left:i.left-o.left,top:i.top-o.top,width:i.width,height:i.height}},offsetRect:function(e,t){return $.clientRect(e,t,!0)},nodesToArray:function(e){e=e||[];for(var t=[],n=0;n<e.length;++n)t.push(e.item(n));return t},scrollTop:function(e){e=t.element(e||r[0].body);var i=e[0]==r[0].body?r[0].body:n,o=i?i.scrollTop+i.parentElement.scrollTop:0;return o||Math.abs(e[0].getBoundingClientRect().top)},findFocusTarget:function(e,n){function r(e,n){var r,i=e[0].querySelectorAll(n);if(i&&i.length){var o=/\s*\[?([\-a-z]*)\]?\s*/i,a=o.exec(n),s=a?a[1]:null;i.length&&t.forEach(i,function(e){e=t.element(e);var n=e[0].getAttribute(s),i=n&&$.validateScope(e)?e.scope().$eval(n)!==!1:!0;i&&(r=e)})}return r}var i,o="[md-autofocus]";return i=r(e,n||o),i||n==o||(i=r(e,"[md-auto-focus]"),i||(i=r(e,o))),i},disableScrollAround:function(e,n){function i(e){function n(e){}function i(e){e.preventDefault()}e=t.element(e||s)[0];var o=50,a=t.element('<div class="md-scroll-mask" style="z-index: '+o+'">  <div class="md-scroll-mask-bar"></div></div>');return e.appendChild(a[0]),a.on("wheel",i),a.on("touchmove",i),r.on("keydown",n),function(){a.off("wheel"),a.off("touchmove"),a[0].parentNode.removeChild(a[0]),r.off("keydown",n),delete $.disableScrollAround._enableScrolling}}function o(){var e=s.parentNode,t=e.getAttribute("style")||"",n=s.getAttribute("style")||"",r=$.scrollTop(s),i=s.clientWidth;return s.scrollHeight>s.clientHeight+1&&(a(s,{position:"fixed",width:"100%",top:-r+"px"}),a(e,{overflowY:"scroll"})),s.clientWidth<i&&a(s,{overflow:"hidden"}),function(){s.setAttribute("style",n),e.setAttribute("style",t),s.scrollTop=r,e.scrollTop=r}}function a(e,t){for(var n in t)e.style[n]=t[n]}if($.disableScrollAround._count=$.disableScrollAround._count||0,++$.disableScrollAround._count,$.disableScrollAround._enableScrolling)return $.disableScrollAround._enableScrolling;e=t.element(e);var s=r[0].body,c=o(),l=i(n);return $.disableScrollAround._enableScrolling=function(){--$.disableScrollAround._count||(c(),l(),delete $.disableScrollAround._enableScrolling)}},enableScrolling:function(){var e=this.disableScrollAround._enableScrolling;e&&e()},floatingScrollbars:function(){if(this.floatingScrollbars.cached===n){var e=t.element('<div style="width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll"><div style="height: 60px;"></div></div>');r[0].body.appendChild(e[0]),this.floatingScrollbars.cached=e[0].offsetWidth==e[0].childNodes[0].offsetWidth,e.remove()}return this.floatingScrollbars.cached},forceFocus:function(t){var n=t[0]||t;document.addEventListener("click",function i(e){e.target===n&&e.$focus&&(n.focus(),e.stopImmediatePropagation(),e.preventDefault(),n.removeEventListener("click",i))},!0);var r=document.createEvent("MouseEvents");r.initMouseEvent("click",!1,!0,e,{},0,0,0,0,!1,!1,!1,!1,0,null),r.$material=!0,r.$focus=!0,n.dispatchEvent(r)},createBackdrop:function(e,t){return a($.supplant('<md-backdrop class="{0}">',[t]))(e)},supplant:function(e,t,n){return n=n||/\{([^\{\}]*)\}/g,e.replace(n,function(e,n){var r=n.split("."),i=t;try{for(var o in r)r.hasOwnProperty(o)&&(i=i[r[o]])}catch(a){i=e}return"string"==typeof i||"number"==typeof i?i:e})},fakeNgModel:function(){return{$fake:!0,$setTouched:t.noop,$setViewValue:function(e){this.$viewValue=e,this.$render(e),this.$viewChangeListeners.forEach(function(e){e()})},$isEmpty:function(e){return 0===(""+e).length},$parsers:[],$formatters:[],$viewChangeListeners:[],$render:t.noop}},debounce:function(e,t,r,i){var a;return function(){var s=r,c=Array.prototype.slice.call(arguments);o.cancel(a),a=o(function(){a=n,e.apply(s,c)},t||10,i)}},throttle:function(e,t){var n;return function(){var r=this,i=arguments,o=$.now();(!n||o-n>t)&&(e.apply(r,i),n=o)}},time:function(e){var t=$.now();return e(),$.now()-t},valueOnUse:function(e,t,n){var r=null,i=Array.prototype.slice.call(arguments),o=i.length>3?i.slice(3):[];Object.defineProperty(e,t,{get:function(){return null===r&&(r=n.apply(e,o)),r}})},nextUid:function(){return""+i++},validateScope:function(e){var n=e&&t.isDefined(e.scope());return n||d.warn("element.scope() is not available when 'debug mode' == false. @see https://docs.angularjs.org/guide/production!"),n},disconnectScope:function(e){if(e&&e.$root!==e&&!e.$$destroyed){var t=e.$parent;e.$$disconnected=!0,t.$$childHead===e&&(t.$$childHead=e.$$nextSibling),t.$$childTail===e&&(t.$$childTail=e.$$prevSibling),e.$$prevSibling&&(e.$$prevSibling.$$nextSibling=e.$$nextSibling),e.$$nextSibling&&(e.$$nextSibling.$$prevSibling=e.$$prevSibling),e.$$nextSibling=e.$$prevSibling=null}},reconnectScope:function(e){if(e&&e.$root!==e&&e.$$disconnected){var t=e,n=t.$parent;t.$$disconnected=!1,t.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=t,n.$$childTail=t):n.$$childHead=n.$$childTail=t}},getClosest:function(e,n,r){if(e instanceof t.element&&(e=e[0]),n=n.toUpperCase(),r&&(e=e.parentNode),!e)return null;do if(e.nodeName===n)return e;while(e=e.parentNode);return null},elementContains:function(n,r){var i=e.Node&&e.Node.prototype&&Node.prototype.contains,o=i?t.bind(n,n.contains):t.bind(n,function(e){return n===r||!!(16&this.compareDocumentPosition(e))});return o(r)},extractElementByName:function(e,n,r,i){function o(e){return a(e)||(r?s(e):null)}function a(e){if(e)for(var t=0,r=e.length;r>t;t++)if(e[t].nodeName.toLowerCase()===n)return e[t];return null}function s(e){var t;if(e)for(var n=0,r=e.length;r>n;n++){var i=e[n];if(!t)for(var a=0,s=i.childNodes.length;s>a;a++)t=t||o([i.childNodes[a]])}return t}var c=o(e);return!c&&i&&d.warn($.supplant("Unable to find node '{0}' in element '{1}'.",[n,e[0].outerHTML])),t.element(c||e)},initOptionalProperties:function(e,n,r){r=r||{},t.forEach(e.$$isolateBindings,function(i,o){if(i.optional&&t.isUndefined(e[o])){var a=t.isDefined(n[i.attrName]);e[o]=t.isDefined(r[o])?r[o]:a}})},nextTick:function(e,t,n){function r(){var e=n&&n.$$destroyed,t=e?[]:i.queue,r=e?null:i.digest;i.queue=[],i.timeout=null,i.digest=!1,t.forEach(function(e){e()}),r&&s.$digest()}var i=$.nextTick,a=i.timeout,c=i.queue||[];return c.push(e),null==t&&(t=!0),i.digest=i.digest||t,i.queue=c,a||(i.timeout=o(r,0,!1))},processTemplate:function(e){return g?e:e&&t.isString(e)?e.replace(/\{\{/g,p).replace(/}}/g,h):e},getParentWithPointerEvents:function(e){for(var t=e.parent();v(t,"pointer-events","none");)t=t.parent();return t},getNearestContentElement:function(e){for(var t=e.parent()[0];t&&t!==u[0]&&t!==document.body&&"MD-CONTENT"!==t.nodeName.toUpperCase();)t=t.parentNode;return t},hasComputedStyle:v};return $.dom.animator=c($),$}var i=0;t.module("material.core").factory("$mdUtil",r),r.$inject=["$document","$timeout","$compile","$rootScope","$$mdAnimate","$interpolate","$log","$rootElement","$window"],t.element.prototype.focus=t.element.prototype.focus||function(){return this.length&&this[0].focus(),this},t.element.prototype.blur=t.element.prototype.blur||function(){return this.length&&this[0].blur(),this}}(),function(){function e(e,n,r){function i(e,r,i){var o=t.element(e)[0]||e;!o||o.hasAttribute(r)&&0!==o.getAttribute(r).length||c(o,r)||(i=t.isString(i)?i.trim():"",i.length?e.attr(r,i):n.warn('ARIA: Attribute "',r,'", required for accessibility, is missing on node:',o))}function o(t,n,r){e(function(){i(t,n,r())})}function a(e,t){o(e,t,function(){return s(e)})}function s(e){return e.text().trim()}function c(e,t){function n(e){var t=e.currentStyle?e.currentStyle:r.getComputedStyle(e);return"none"===t.display}var i=e.hasChildNodes(),o=!1;if(i)for(var a=e.childNodes,s=0;s<a.length;s++){var c=a[s];1===c.nodeType&&c.hasAttribute(t)&&(n(c)||(o=!0))}return o}return{expect:i,expectAsync:o,expectWithText:a}}t.module("material.core").service("$mdAria",e),e.$inject=["$$rAF","$log","$window"]}(),function(){function e(e,n,r,i,o,a){this.compile=function(s){var c=s.templateUrl,l=s.template||"",d=s.controller,u=s.controllerAs,m=t.extend({},s.resolve||{}),f=t.extend({},s.locals||{}),p=s.transformTemplate||t.identity,h=s.bindToController;return t.forEach(m,function(e,n){t.isString(e)?m[n]=r.get(e):m[n]=r.invoke(e)}),t.extend(m,f),c?m.$template=n.get(c,{cache:a}).then(function(e){return e.data}):m.$template=e.when(l),e.all(m).then(function(e){var n,r=p(e.$template,s),a=s.element||t.element("<div>").html(r.trim()).contents(),c=i(a);return n={locals:e,element:a,link:function(r){if(e.$scope=r,d){var i=o(d,e,!0);h&&t.extend(i.instance,e);var s=i();a.data("$ngControllerController",s),a.children().data("$ngControllerController",s),u&&(r[u]=s),n.controller=s}return c(r)}}})}}t.module("material.core").service("$mdCompiler",e),e.$inject=["$q","$http","$injector","$compile","$controller","$templateCache"]}(),function(){function n(){}function r(n,r,i){function o(e){return function(t,n){n.distance<this.state.options.maxDistance&&this.dispatchEvent(t,e,n)}}function a(e,t,n){var r=p[t.replace(/^\$md./,"")];if(!r)throw new Error("Failed to register element with handler "+t+". Available handlers: "+Object.keys(p).join(", "));return r.registerElement(e,n)}function c(e,r){var i=new n(e);return t.extend(i,r),p[e]=i,g}var l=navigator.userAgent||navigator.vendor||e.opera,u=l.match(/ipad|iphone|ipod/i),m=l.match(/android/i),f="undefined"!=typeof e.jQuery&&t.element===e.jQuery,g={handler:c,register:a,isHijackingClicks:(u||m)&&!f&&!h};if(g.isHijackingClicks){var v=6;g.handler("click",{options:{maxDistance:v},onEnd:o("click")}),g.handler("focus",{options:{maxDistance:v},onEnd:function(e,t){function n(e){var t=["INPUT","SELECT","BUTTON","TEXTAREA","VIDEO","AUDIO"];return"-1"!=e.getAttribute("tabindex")&&!e.hasAttribute("DISABLED")&&(e.hasAttribute("tabindex")||e.hasAttribute("href")||-1!=t.indexOf(e.nodeName))}t.distance<this.state.options.maxDistance&&n(e.target)&&(this.dispatchEvent(e,"focus",t),e.target.focus())}}),g.handler("mouseup",{options:{maxDistance:v},onEnd:o("mouseup")}),g.handler("mousedown",{onStart:function(e){this.dispatchEvent(e,"mousedown")}})}return g.handler("press",{onStart:function(e,t){this.dispatchEvent(e,"$md.pressdown")},onEnd:function(e,t){this.dispatchEvent(e,"$md.pressup")}}).handler("hold",{options:{maxDistance:6,delay:500},onCancel:function(){i.cancel(this.state.timeout)},onStart:function(e,n){return this.state.registeredParent?(this.state.pos={x:n.x,y:n.y},void(this.state.timeout=i(t.bind(this,function(){this.dispatchEvent(e,"$md.hold"),this.cancel()}),this.state.options.delay,!1))):this.cancel()},onMove:function(e,t){e.preventDefault();var n=this.state.pos.x-t.x,r=this.state.pos.y-t.y;Math.sqrt(n*n+r*r)>this.options.maxDistance&&this.cancel()},onEnd:function(){this.onCancel()}}).handler("drag",{options:{minDistance:6,horizontal:!0,cancelMultiplier:1.5},onStart:function(e){this.state.registeredParent||this.cancel()},onMove:function(e,t){var n,r;e.preventDefault(),this.state.dragPointer?this.dispatchDragMove(e):(this.state.options.horizontal?(n=Math.abs(t.distanceX)>this.state.options.minDistance,r=Math.abs(t.distanceY)>this.state.options.minDistance*this.state.options.cancelMultiplier):(n=Math.abs(t.distanceY)>this.state.options.minDistance,r=Math.abs(t.distanceX)>this.state.options.minDistance*this.state.options.cancelMultiplier),n?(this.state.dragPointer=s(e),d(e,this.state.dragPointer),this.dispatchEvent(e,"$md.dragstart",this.state.dragPointer)):r&&this.cancel())},dispatchDragMove:r.throttle(function(e){this.state.isRunning&&(d(e,this.state.dragPointer),this.dispatchEvent(e,"$md.drag",this.state.dragPointer))}),onEnd:function(e,t){this.state.dragPointer&&(d(e,this.state.dragPointer),this.dispatchEvent(e,"$md.dragend",this.state.dragPointer))}}).handler("swipe",{options:{minVelocity:.65,minDistance:10},onEnd:function(e,t){var n;Math.abs(t.velocityX)>this.state.options.minVelocity&&Math.abs(t.distanceX)>this.state.options.minDistance?(n="left"==t.directionX?"$md.swipeleft":"$md.swiperight",this.dispatchEvent(e,n)):Math.abs(t.velocityY)>this.state.options.minVelocity&&Math.abs(t.distanceY)>this.state.options.minDistance&&(n="up"==t.directionY?"$md.swipeup":"$md.swipedown",this.dispatchEvent(e,n))}})}function i(e){this.name=e,this.state={}}function o(){function n(e,n,r){r=r||m;var i=new t.element.Event(n);i.$material=!0,i.pointer=r,i.srcEvent=e,t.extend(i,{clientX:r.x,clientY:r.y,screenX:r.x,screenY:r.y,pageX:r.x,pageY:r.y,ctrlKey:e.ctrlKey,altKey:e.altKey,shiftKey:e.shiftKey,metaKey:e.metaKey}),t.element(r.target).trigger(i)}function r(t,n,r){r=r||m;var i;"click"===n||"mouseup"==n||"mousedown"==n?(i=document.createEvent("MouseEvents"),i.initMouseEvent(n,!0,!0,e,t.detail,r.x,r.y,r.x,r.y,t.ctrlKey,t.altKey,t.shiftKey,t.metaKey,t.button,t.relatedTarget||null)):(i=document.createEvent("CustomEvent"),i.initCustomEvent(n,!0,!0,{})),i.$material=!0,i.pointer=r,i.srcEvent=t,r.target.dispatchEvent(i)}var o="undefined"!=typeof e.jQuery&&t.element===e.jQuery;return i.prototype={options:{},dispatchEvent:o?n:r,onStart:t.noop,onMove:t.noop,onEnd:t.noop,onCancel:t.noop,start:function(e,n){if(!this.state.isRunning){var r=this.getNearestParent(e.target),i=r&&r.$mdGesture[this.name]||{};this.state={isRunning:!0,options:t.extend({},this.options,i),registeredParent:r},this.onStart(e,n)}},move:function(e,t){this.state.isRunning&&this.onMove(e,t)},end:function(e,t){this.state.isRunning&&(this.onEnd(e,t),this.state.isRunning=!1)},cancel:function(e,t){this.onCancel(e,t),this.state={}},getNearestParent:function(e){for(var t=e;t;){if((t.$mdGesture||{})[this.name])return t;t=t.parentNode}return null},registerElement:function(e,t){function n(){delete e[0].$mdGesture[r.name],e.off("$destroy",n)}var r=this;return e[0].$mdGesture=e[0].$mdGesture||{},e[0].$mdGesture[this.name]=t||{},e.on("$destroy",n),n}},i}function a(e,n){function r(e){var t=!e.clientX&&!e.clientY;t||e.$material||e.isIonicTap||l(e)||(e.preventDefault(),e.stopPropagation())}function i(e){var t=0===e.clientX&&0===e.clientY;t||e.$material||e.isIonicTap||l(e)?(g=null,"label"==e.target.tagName.toLowerCase()&&(g={x:e.x,y:e.y})):(e.preventDefault(),e.stopPropagation(),g=null)}function o(e,t){var r;for(var i in p)r=p[i],r instanceof n&&("start"===e&&r.cancel(),r[e](t,m))}function a(e){if(!m){var t=+Date.now();f&&!c(e,f)&&t-f.endTime<1500||(m=s(e),o("start",e))}}function u(e){m&&c(e,m)&&(d(e,m),o("move",e))}function h(e){m&&c(e,m)&&(d(e,m),m.endTime=+Date.now(),o("end",e),f=m,m=null)}document.contains||(document.contains=function(e){return document.body.contains(e)}),!v&&e.isHijackingClicks&&(document.addEventListener("click",i,!0),document.addEventListener("mouseup",r,!0),document.addEventListener("mousedown",r,!0),document.addEventListener("focus",r,!0),v=!0);var $="mousedown touchstart pointerdown",b="mousemove touchmove pointermove",E="mouseup mouseleave touchend touchcancel pointerup pointercancel";t.element(document).on($,a).on(b,u).on(E,h).on("$$mdGestureReset",function(){f=m=null})}function s(e){var t=u(e),n={startTime:+Date.now(),target:e.target,type:e.type.charAt(0)};return n.startX=n.x=t.pageX,n.startY=n.y=t.pageY,n}function c(e,t){return e&&t&&e.type.charAt(0)===t.type}function l(e){return g&&g.x==e.x&&g.y==e.y}function d(e,t){var n=u(e),r=t.x=n.pageX,i=t.y=n.pageY;t.distanceX=r-t.startX,t.distanceY=i-t.startY,t.distance=Math.sqrt(t.distanceX*t.distanceX+t.distanceY*t.distanceY),t.directionX=t.distanceX>0?"right":t.distanceX<0?"left":"",t.directionY=t.distanceY>0?"down":t.distanceY<0?"up":"",t.duration=+Date.now()-t.startTime,t.velocityX=t.distanceX/t.duration,t.velocityY=t.distanceY/t.duration}function u(e){return e=e.originalEvent||e,e.touches&&e.touches[0]||e.changedTouches&&e.changedTouches[0]||e}var m,f,p={},h=!1,g=null,v=!1;t.module("material.core.gestures",[]).provider("$mdGesture",n).factory("$$MdGestureHandler",o).run(a),n.prototype={skipClickHijack:function(){return h=!0},$get:["$$MdGestureHandler","$$rAF","$timeout",function(e,t,n){return new r(e,t,n)}]},r.$inject=["$$MdGestureHandler","$$rAF","$timeout"],a.$inject=["$mdGesture","$$MdGestureHandler"]}(),function(){function e(){function e(e){function n(e){return c.optionsFactory=e.options,c.methods=(e.methods||[]).concat(a),l}function r(e,t){return s[e]=t,l}function i(t,n){if(n=n||{},n.methods=n.methods||[],n.options=n.options||function(){return{}},/^cancel|hide|show$/.test(t))throw new Error("Preset '"+t+"' in "+e+" is reserved!");if(n.methods.indexOf("_options")>-1)throw new Error("Method '_options' in "+e+" is reserved!");return c.presets[t]={methods:n.methods.concat(a),optionsFactory:n.options,argOption:n.argOption},l}function o(n,r){function i(e){return e=e||{},e._options&&(e=e._options),u.show(t.extend({},d,e))}function o(e){return u.destroy(e)}function a(t,n){var i={};return i[e]=m,r.invoke(t||function(){return n},{},i)}var l,d,u=n(),m={hide:u.hide,cancel:u.cancel,show:i,destroy:o};return l=c.methods||[],d=a(c.optionsFactory,{}),t.forEach(s,function(e,t){m[t]=e}),t.forEach(c.presets,function(e,n){function r(e){this._options=t.extend({},i,e)}var i=a(e.optionsFactory,{}),o=(e.methods||[]).concat(l);if(t.extend(i,{$type:n}),t.forEach(o,function(e){r.prototype[e]=function(t){return this._options[e]=t,this}}),e.argOption){var s="show"+n.charAt(0).toUpperCase()+n.slice(1);m[s]=function(e){var t=m[n](e);return m.show(t)}}m[n]=function(n){return arguments.length&&e.argOption&&!t.isObject(n)&&!t.isArray(n)?(new r)[e.argOption](n):new r(n)}}),m}var a=["onHide","onShow","onRemove"],s={},c={presets:{}},l={setDefaults:n,addPreset:i,addMethod:r,$get:o};return l.addPreset("build",{methods:["controller","controllerAs","resolve","template","templateUrl","themable","transformTemplate","parent"]}),o.$inject=["$$interimElement","$injector"],l}function r(e,r,i,o,a,s,c,l,d,u,m){return function(){function f(e){e=e||{};var t=new v(e||{}),n=!e.skipHide&&E.length?$.hide():r.when(!0);return n["finally"](function(){E.push(t),t.show()["catch"](function(e){return e})}),t.deferred.promise}function p(e,t){function i(n){return n.remove(e,!1,t||{})["catch"](function(e){return e}),n.deferred.promise}if(!E.length)return r.when(e);if(t=t||{},t.closeAll){var o=r.all(E.reverse().map(i));return E=[],o}if(t.closeTo!==n)return r.all(E.splice(t.closeTo).map(i));var a=E.pop();return i(a)}function h(e,t){var n=E.shift();return n?(n.remove(e,!0,t||{})["catch"](function(e){return e}),n.deferred.promise):r.when(e)}function g(e){var n=e?null:E.shift(),i=t.element(e).length?t.element(e)[0].parentNode:null;if(i){var o=E.filter(function(e){var t=e.options.element[0];return t===i});o.length>0&&(n=o[0],E.splice(E.indexOf(n),1))}return n?n.remove(b,!1,{$destroy:!0}):r.when(b)}function v(m){function f(){return r(function(e,t){function n(e){C.deferred.reject(e),t(e)}g(m).then(function(t){w=v(t,m),x=y(w,m,t.controller).then(e,n)},n)})}function p(e,n,i){function o(e){C.deferred.resolve(e)}function a(e){C.deferred.reject(e)}return w?(m=t.extend(m||{},i||{}),m.cancelAutoHide&&m.cancelAutoHide(),m.element.triggerHandler("$mdInterimElementRemove"),m.$destroy===!0?M(m.element,m).then(function(){n&&a(e)||o(e)}):(r.when(x)["finally"](function(){M(m.element,m).then(function(){n&&a(e)||o(e)},a)}),C.deferred.promise)):r.when(!1)}function h(e){return e=e||{},e.template&&(e.template=l.processTemplate(e.template)),t.extend({preserveScope:!1,cancelAutoHide:t.noop,scope:e.scope||o.$new(e.isolateScope),onShow:function(e,t,n){return c.enter(t,n.parent)},onRemove:function(e,t){return t&&c.leave(t)||r.when()}},e)}function g(e){var t=e.skipCompile?null:d.compile(e);return t||r(function(t){t({locals:{},link:function(){return e.element}})})}function v(e,n){t.extend(e.locals,n);var r=e.link(n.scope);return n.element=r,n.parent=b(r,n),n.themable&&u(r),r}function b(n,r){var i=r.parent;if(i=t.isFunction(i)?i(r.scope,n,r):t.isString(i)?t.element(e[0].querySelector(i)):t.element(i),!(i||{}).length){var o;return s[0]&&s[0].querySelector&&(o=s[0].querySelector(":not(svg) > body")),o||(o=s[0]),"#comment"==o.nodeName&&(o=e[0].body),t.element(o)}return i}function E(){var e,r=t.noop;m.hideDelay&&(e=a($.hide,m.hideDelay),r=function(){a.cancel(e)}),m.cancelAutoHide=function(){r(),m.cancelAutoHide=n}}function y(e,n,i){var o=n.onShowing||t.noop,a=n.onComplete||t.noop;return o(n.scope,e,n,i),r(function(t,o){try{r.when(n.onShow(n.scope,e,n,i)).then(function(){a(n.scope,e,n),E(),t(e)},o)}catch(s){o(s.message)}})}function M(e,n){var r=n.onRemoving||t.noop;return i(function(t,o){try{var a=i.when(n.onRemove(n.scope,e,n)||!0);r(e,a),1==n.$destroy?t(e):a.then(function(){!n.preserveScope&&n.scope&&n.scope.$destroy(),t(e)},o)}catch(s){o(s.message)}})}var C,w,x=r.when(!0);return m=h(m),C={options:m,deferred:r.defer(),show:f,remove:p}}var $,b=!1,E=[];return $={show:f,hide:p,cancel:h,destroy:g,$injector_:m}}}return e.$get=r,r.$inject=["$document","$q","$$q","$rootScope","$timeout","$rootElement","$animate","$mdUtil","$mdCompiler","$mdTheming","$injector"],e}t.module("material.core").provider("$$interimElement",e)}(),function(){!function(){function e(e){function a(e){return e.replace(c,"").replace(l,function(e,t,n,r){return r?n.toUpperCase():n})}var c=/^((?:x|data)[\:\-_])/i,l=/([\:\-\_]+(.))/g,d=["","xs","gt-xs","sm","gt-sm","md","gt-md","lg","gt-lg","xl"],u=["layout","flex","flex-order","flex-offset","layout-align"],m=["show","hide","layout-padding","layout-margin"];t.forEach(d,function(n){t.forEach(u,function(t){var r=n?t+"-"+n:t;e.directive(a(r),i(r))}),t.forEach(m,function(t){var r=n?t+"-"+n:t;e.directive(a(r),o(r))})}),e.directive("mdLayoutCss",n).directive("ngCloak",r("ng-cloak")).directive("layoutWrap",o("layout-wrap")).directive("layoutNoWrap",o("layout-no-wrap")).directive("layoutFill",o("layout-fill")).directive("layoutLtMd",s("layout-lt-md",!0)).directive("layoutLtLg",s("layout-lt-lg",!0)).directive("flexLtMd",s("flex-lt-md",!0)).directive("flexLtLg",s("flex-lt-lg",!0)).directive("layoutAlignLtMd",s("layout-align-lt-md")).directive("layoutAlignLtLg",s("layout-align-lt-lg")).directive("flexOrderLtMd",s("flex-order-lt-md")).directive("flexOrderLtLg",s("flex-order-lt-lg")).directive("offsetLtMd",s("flex-offset-lt-md")).directive("offsetLtLg",s("flex-offset-lt-lg")).directive("hideLtMd",s("hide-lt-md")).directive("hideLtLg",s("hide-lt-lg")).directive("showLtMd",s("show-lt-md")).directive("showLtLg",s("show-lt-lg"))}function n(){return{restrict:"A",priority:"900",compile:function(e,n){return w.enabled=!1,t.noop}}}function r(e){return["$timeout",function(n){return{restrict:"A",priority:-10,compile:function(r){return w.enabled?(r.addClass(e),function(t,r){n(function(){r.removeClass(e)},10,!1)}):t.noop}}}]}function i(e){function n(t,n,r){var i=a(n,e,r),o=r.$observe(r.$normalize(e),i);i(m(e,r,"")),t.$on("$destroy",function(){o()})}return["$mdUtil","$interpolate","$log",function(r,i,o){return h=r,g=i,v=o,{restrict:"A",compile:function(r,i){var o;return w.enabled&&(c(e,i,r,v),l(e,m(e,i,""),d(r,e,i)),o=n),o||t.noop}}}]}function o(e){function n(t,n){n.addClass(e)}return["$mdUtil","$interpolate","$log",function(r,i,o){return h=r,g=i,v=o,{restrict:"A",compile:function(r,i){var o;return w.enabled&&(l(e,m(e,i,""),d(r,e,i)),n(null,r),o=n),o||t.noop}}}]}function a(e,n){var r;return function(i){var o=l(n,i||"");t.isDefined(o)&&(r&&e.removeClass(r),r=o?n+"-"+o.replace(b,"-"):n,e.addClass(r))}}function s(e){var n=e.split("-");return["$log",function(r){return r.warn(e+"has been deprecated. Please use a `"+n[0]+"-gt-<xxx>` variant."),t.noop}]}function c(e,t,n,r){var i,o,a,s=n[0].nodeName.toLowerCase();switch(e.replace($,"")){case"flex":("md-button"==s||"fieldset"==s)&&(o="<"+s+" "+e+"></"+s+">",a="https://github.com/philipwalton/flexbugs#9-some-html-elements-cant-be-flex-containers",i="Markup '{0}' may not work as expected in IE Browsers. Consult '{1}' for details.",r.warn(h.supplant(i,[o,a])))}}function l(e,n,r){var i=n;if(!u(n)){switch(e.replace($,"")){case"layout":f(n,y)||(n=y[0]);break;case"flex":f(n,E)||isNaN(n)&&(n="");break;case"flex-offset":case"flex-order":(!n||isNaN(+n))&&(n="0");break;case"layout-align":var o=p(n);n=h.supplant("{main}-{cross}",o);break;case"layout-padding":case"layout-margin":case"layout-fill":case"layout-wrap":case"layout-no-wrap":n=""}n!=i&&(r||t.noop)(n)}return n}function d(e,t,n){return function(e){u(e)||(n[n.$normalize(t)]=e)}}function u(e){return(e||"").indexOf(g.startSymbol())>-1}function m(e,t,n){var r=t.$normalize(e);return t[r]?t[r].replace(b,"-"):n||null}function f(e,t,n){e=n&&e?e.replace(b,n):e;var r=!1;return e&&t.forEach(function(t){t=n?t.replace(b,n):t,r=r||t===e}),r}function p(e){var t,n={main:"start",cross:"stretch"};return e=e||"",(0==e.indexOf("-")||0==e.indexOf(" "))&&(e="none"+e),t=e.toLowerCase().trim().replace(b,"-").split("-"),t.length&&"space"===t[0]&&(t=[t[0]+"-"+t[1],t[2]]),t.length>0&&(n.main=t[0]||n.main),t.length>1&&(n.cross=t[1]||n.cross),M.indexOf(n.main)<0&&(n.main="start"),C.indexOf(n.cross)<0&&(n.cross="stretch"),n}var h,g,v,$=/(-gt)?-(sm|md|lg)/g,b=/\s+/g,E=["grow","initial","auto","none","noshrink","nogrow"],y=["row","column"],M=["","start","center","end","stretch","space-around","space-between"],C=["","start","center","end","stretch"],w={enabled:!0,breakpoints:[]};e(t.module("material.core.layout",["ng"]))}()}(),function(){function e(e,n){function r(e){return e&&""!==e}var i,o=[],a={};return i={notFoundError:function(t){e.error("No instance found for handle",t)},getInstances:function(){return o},get:function(e){if(!r(e))return null;var t,n,i;for(t=0,n=o.length;n>t;t++)if(i=o[t],i.$$mdHandle===e)return i;return null},register:function(e,n){function r(){var t=o.indexOf(e);-1!==t&&o.splice(t,1)}function i(){var t=a[n];t&&(t.resolve(e),delete a[n])}return n?(e.$$mdHandle=n,o.push(e),i(),r):t.noop},when:function(e){if(r(e)){var t=n.defer(),o=i.get(e);return o?t.resolve(o):a[e]=t,t.promise}return n.reject("Invalid `md-component-id` value.")}}}t.module("material.core").factory("$mdComponentRegistry",e),e.$inject=["$log","$q"]}(),function(){!function(){function e(e){function n(e){return e.hasClass("md-icon-button")?{isMenuItem:e.hasClass("md-menu-item"),fitRipple:!0,center:!0}:{isMenuItem:e.hasClass("md-menu-item"),dimBackground:!0}}return{attach:function(r,i,o){return o=t.extend(n(i),o),e.attach(r,i,o)}}}t.module("material.core").factory("$mdButtonInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){!function(){function e(e){function n(n,r,i){return e.attach(n,r,t.extend({center:!0,dimBackground:!1,fitRipple:!0},i))}return{attach:n}}t.module("material.core").factory("$mdCheckboxInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){!function(){function e(e){function n(n,r,i){return e.attach(n,r,t.extend({center:!1,dimBackground:!0,outline:!1,rippleSize:"full"},i))}return{attach:n}}t.module("material.core").factory("$mdListInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){function e(e,n){return{controller:t.noop,link:function(t,r,i){i.hasOwnProperty("mdInkRippleCheckbox")?n.attach(t,r):e.attach(t,r)}}}function n(e){function n(n,i,o){return i.controller("mdNoInk")?t.noop:e.instantiate(r,{$scope:n,$element:i,rippleOptions:o})}return{attach:n}}function r(e,n,r,i,o,a){this.$window=i,this.$timeout=o,this.$mdUtil=a,this.$scope=e,this.$element=n,this.options=r,this.mousedown=!1,this.ripples=[],this.timeout=null,this.lastRipple=null,a.valueOnUse(this,"container",this.createContainer),this.$element.addClass("md-ink-ripple"),(n.controller("mdInkRipple")||{}).createRipple=t.bind(this,this.createRipple),(n.controller("mdInkRipple")||{}).setColor=t.bind(this,this.color),this.bindEvents()}function i(e,n){(e.mousedown||e.lastRipple)&&(e.mousedown=!1,e.$mdUtil.nextTick(t.bind(e,n),!1))}function o(){return{controller:t.noop}}t.module("material.core").factory("$mdInkRipple",n).directive("mdInkRipple",e).directive("mdNoInk",o).directive("mdNoBar",o).directive("mdNoStretch",o);var a=450;e.$inject=["$mdButtonInkRipple","$mdCheckboxInkRipple"],n.$inject=["$injector"],r.$inject=["$scope","$element","rippleOptions","$window","$timeout","$mdUtil"],r.prototype.color=function(e){function n(){var e=r.options&&r.options.colorElement?r.options.colorElement:[],t=e.length?e[0]:r.$element[0];return t?r.$window.getComputedStyle(t).color:"rgb(0,0,0)"}var r=this;return t.isDefined(e)&&(r._color=r._parseColor(e)),r._color||r._parseColor(r.inkRipple())||r._parseColor(n())},r.prototype.calculateColor=function(){return this.color()},r.prototype._parseColor=function(e,t){function n(e){var t="#"===e[0]?e.substr(1):e,n=t.length/3,r=t.substr(0,n),i=t.substr(n,n),o=t.substr(2*n);return 1===n&&(r+=r,i+=i,o+=o),"rgba("+parseInt(r,16)+","+parseInt(i,16)+","+parseInt(o,16)+",0.1)"}function r(e){return e.replace(")",", 0.1)").replace("(","a(")}return t=t||1,e?0===e.indexOf("rgba")?e.replace(/\d?\.?\d*\s*\)\s*$/,(.1*t).toString()+")"):0===e.indexOf("rgb")?r(e):0===e.indexOf("#")?n(e):void 0:void 0},r.prototype.bindEvents=function(){this.$element.on("mousedown",t.bind(this,this.handleMousedown)),this.$element.on("mouseup touchend",t.bind(this,this.handleMouseup)),this.$element.on("mouseleave",t.bind(this,this.handleMouseup)),this.$element.on("touchmove",t.bind(this,this.handleTouchmove))},r.prototype.handleMousedown=function(e){if(!this.mousedown)if(e.hasOwnProperty("originalEvent")&&(e=e.originalEvent),this.mousedown=!0,this.options.center)this.createRipple(this.container.prop("clientWidth")/2,this.container.prop("clientWidth")/2);else if(e.srcElement!==this.$element[0]){var t=this.$element[0].getBoundingClientRect(),n=e.clientX-t.left,r=e.clientY-t.top;this.createRipple(n,r)}else this.createRipple(e.offsetX,e.offsetY)},r.prototype.handleMouseup=function(){i(this,this.clearRipples)},r.prototype.handleTouchmove=function(){i(this,this.deleteRipples)},r.prototype.deleteRipples=function(){for(var e=0;e<this.ripples.length;e++)this.ripples[e].remove()},r.prototype.clearRipples=function(){for(var e=0;e<this.ripples.length;e++)this.fadeInComplete(this.ripples[e])},r.prototype.createContainer=function(){var e=t.element('<div class="md-ripple-container"></div>');return this.$element.append(e),e},r.prototype.clearTimeout=function(){this.timeout&&(this.$timeout.cancel(this.timeout),this.timeout=null)},r.prototype.isRippleAllowed=function(){var e=this.$element[0];do{if(!e.tagName||"BODY"===e.tagName)break;if(e&&t.isFunction(e.hasAttribute)){if(e.hasAttribute("disabled"))return!1;if("false"===this.inkRipple()||"0"===this.inkRipple())return!1}}while(e=e.parentNode);return!0},r.prototype.inkRipple=function(){return this.$element.attr("md-ink-ripple")},r.prototype.createRipple=function(e,n){function r(e){return e?e.replace("rgba","rgb").replace(/,[^\),]+\)/,")"):"rgb(0,0,0)"}function i(e,t,n){return e?Math.max(t,n):Math.sqrt(Math.pow(t,2)+Math.pow(n,2))}if(this.isRippleAllowed()){var o=this,s=t.element('<div class="md-ripple"></div>'),c=this.$element.prop("clientWidth"),l=this.$element.prop("clientHeight"),d=2*Math.max(Math.abs(c-e),e),u=2*Math.max(Math.abs(l-n),n),m=i(this.options.fitRipple,d,u),f=this.calculateColor();s.css({left:e+"px",top:n+"px",background:"black",width:m+"px",height:m+"px",backgroundColor:r(f),borderColor:r(f)}),this.lastRipple=s,this.clearTimeout(),this.timeout=this.$timeout(function(){o.clearTimeout(),o.mousedown||o.fadeInComplete(s)},.35*a,!1),this.options.dimBackground&&this.container.css({backgroundColor:f}),this.container.append(s),this.ripples.push(s),s.addClass("md-ripple-placed"),this.$mdUtil.nextTick(function(){s.addClass("md-ripple-scaled md-ripple-active"),o.$timeout(function(){o.clearRipples()},a,!1)},!1)}},r.prototype.fadeInComplete=function(e){this.lastRipple===e?this.timeout||this.mousedown||this.removeRipple(e):this.removeRipple(e)},r.prototype.removeRipple=function(e){var t=this,n=this.ripples.indexOf(e);0>n||(this.ripples.splice(this.ripples.indexOf(e),1),e.removeClass("md-ripple-active"),0===this.ripples.length&&this.container.css({backgroundColor:""
}),this.$timeout(function(){t.fadeOutComplete(e)},a,!1))},r.prototype.fadeOutComplete=function(e){e.remove(),this.lastRipple=null}}(),function(){!function(){function e(e){function n(n,r,i){return e.attach(n,r,t.extend({center:!1,dimBackground:!0,outline:!1,rippleSize:"full"},i))}return{attach:n}}t.module("material.core").factory("$mdTabInkRipple",e),e.$inject=["$mdInkRipple"]}()}(),function(){t.module("material.core.theming.palette",[]).constant("$mdColorPalette",{red:{50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 A100",contrastStrongLightColors:"400 500 600 700 A200 A400 A700"},pink:{50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"500 600 A200 A400 A700"},purple:{50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200 A400 A700"},"deep-purple":{50:"#ede7f6",100:"#d1c4e9",200:"#b39ddb",300:"#9575cd",400:"#7e57c2",500:"#673ab7",600:"#5e35b1",700:"#512da8",800:"#4527a0",900:"#311b92",A100:"#b388ff",A200:"#7c4dff",A400:"#651fff",A700:"#6200ea",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200"},indigo:{50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 A100",contrastStrongLightColors:"300 400 A200 A400"},blue:{50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100",contrastStrongLightColors:"500 600 700 A200 A400 A700"},"light-blue":{50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea",contrastDefaultColor:"dark",contrastLightColors:"600 700 800 900 A700",contrastStrongLightColors:"600 700 800 A700"},cyan:{50:"#e0f7fa",100:"#b2ebf2",200:"#80deea",300:"#4dd0e1",400:"#26c6da",500:"#00bcd4",600:"#00acc1",700:"#0097a7",800:"#00838f",900:"#006064",A100:"#84ffff",A200:"#18ffff",A400:"#00e5ff",A700:"#00b8d4",contrastDefaultColor:"dark",contrastLightColors:"700 800 900",contrastStrongLightColors:"700 800 900"},teal:{50:"#e0f2f1",100:"#b2dfdb",200:"#80cbc4",300:"#4db6ac",400:"#26a69a",500:"#009688",600:"#00897b",700:"#00796b",800:"#00695c",900:"#004d40",A100:"#a7ffeb",A200:"#64ffda",A400:"#1de9b6",A700:"#00bfa5",contrastDefaultColor:"dark",contrastLightColors:"500 600 700 800 900",contrastStrongLightColors:"500 600 700"},green:{50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853",contrastDefaultColor:"dark",contrastLightColors:"600 700 800 900",contrastStrongLightColors:"600 700"},"light-green":{50:"#f1f8e9",100:"#dcedc8",200:"#c5e1a5",300:"#aed581",400:"#9ccc65",500:"#8bc34a",600:"#7cb342",700:"#689f38",800:"#558b2f",900:"#33691e",A100:"#ccff90",A200:"#b2ff59",A400:"#76ff03",A700:"#64dd17",contrastDefaultColor:"dark",contrastLightColors:"700 800 900",contrastStrongLightColors:"700 800 900"},lime:{50:"#f9fbe7",100:"#f0f4c3",200:"#e6ee9c",300:"#dce775",400:"#d4e157",500:"#cddc39",600:"#c0ca33",700:"#afb42b",800:"#9e9d24",900:"#827717",A100:"#f4ff81",A200:"#eeff41",A400:"#c6ff00",A700:"#aeea00",contrastDefaultColor:"dark",contrastLightColors:"900",contrastStrongLightColors:"900"},yellow:{50:"#fffde7",100:"#fff9c4",200:"#fff59d",300:"#fff176",400:"#ffee58",500:"#ffeb3b",600:"#fdd835",700:"#fbc02d",800:"#f9a825",900:"#f57f17",A100:"#ffff8d",A200:"#ffff00",A400:"#ffea00",A700:"#ffd600",contrastDefaultColor:"dark"},amber:{50:"#fff8e1",100:"#ffecb3",200:"#ffe082",300:"#ffd54f",400:"#ffca28",500:"#ffc107",600:"#ffb300",700:"#ffa000",800:"#ff8f00",900:"#ff6f00",A100:"#ffe57f",A200:"#ffd740",A400:"#ffc400",A700:"#ffab00",contrastDefaultColor:"dark"},orange:{50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00",contrastDefaultColor:"dark",contrastLightColors:"800 900",contrastStrongLightColors:"800 900"},"deep-orange":{50:"#fbe9e7",100:"#ffccbc",200:"#ffab91",300:"#ff8a65",400:"#ff7043",500:"#ff5722",600:"#f4511e",700:"#e64a19",800:"#d84315",900:"#bf360c",A100:"#ff9e80",A200:"#ff6e40",A400:"#ff3d00",A700:"#dd2c00",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300 400 A100 A200",contrastStrongLightColors:"500 600 700 800 900 A400 A700"},brown:{50:"#efebe9",100:"#d7ccc8",200:"#bcaaa4",300:"#a1887f",400:"#8d6e63",500:"#795548",600:"#6d4c41",700:"#5d4037",800:"#4e342e",900:"#3e2723",A100:"#d7ccc8",A200:"#bcaaa4",A400:"#8d6e63",A700:"#5d4037",contrastDefaultColor:"light",contrastDarkColors:"50 100 200",contrastStrongLightColors:"300 400"},grey:{50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",1000:"#000000",A100:"#ffffff",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161",contrastDefaultColor:"dark",contrastLightColors:"600 700 800 900"},"blue-grey":{50:"#eceff1",100:"#cfd8dc",200:"#b0bec5",300:"#90a4ae",400:"#78909c",500:"#607d8b",600:"#546e7a",700:"#455a64",800:"#37474f",900:"#263238",A100:"#cfd8dc",A200:"#b0bec5",A400:"#78909c",A700:"#455a64",contrastDefaultColor:"light",contrastDarkColors:"50 100 200 300",contrastStrongLightColors:"400 500"}})}(),function(){function e(e){function r(e,t){return t=t||{},u[e]=a(e,t),$}function i(e,n){return a(e,t.extend({},u[e]||{},n))}function a(e,t){var n=x.filter(function(e){return!t[e]});if(n.length)throw new Error("Missing colors %1 in palette %2!".replace("%1",n.join(", ")).replace("%2",e));return t}function c(e,n){if(m[e])return m[e];n=n||"default";var r="string"==typeof n?m[n]:n,i=new l(e);return r&&t.forEach(r.colors,function(e,n){i.colors[n]={name:e.name,hues:t.extend({},e.hues)}}),m[e]=i,i}function l(e){function n(e){if(e=0===arguments.length?!0:!!e,e!==r.isDark){r.isDark=e,r.foregroundPalette=r.isDark?h:p,r.foregroundShadow=r.isDark?g:v;var n=r.isDark?w:C,i=r.isDark?C:w;return t.forEach(n,function(e,t){var n=r.colors[t],o=i[t];if(n)for(var a in n.hues)n.hues[a]===o[a]&&(n.hues[a]=e[a])}),r}}var r=this;r.name=e,r.colors={},r.dark=n,n(!1),y.forEach(function(e){var n=(r.isDark?w:C)[e];r[e+"Palette"]=function(i,o){var a=r.colors[e]={name:i,hues:t.extend({},n,o)};return Object.keys(a.hues).forEach(function(e){if(!n[e])throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4".replace("%1",e).replace("%2",r.name).replace("%3",i).replace("%4",Object.keys(n).join(", ")))}),Object.keys(a.hues).map(function(e){return a.hues[e]}).forEach(function(t){if(-1==x.indexOf(t))throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5".replace("%1",t).replace("%2",r.name).replace("%3",e).replace("%4",i).replace("%5",x.join(", ")))}),r},r[e+"Color"]=function(){var t=Array.prototype.slice.call(arguments);return console.warn("$mdThemingProviderTheme."+e+"Color() has been deprecated. Use $mdThemingProviderTheme."+e+"Palette() instead."),r[e+"Palette"].apply(r,t)}})}function f(e,r){function i(e){return e===n||""===e?!0:o.THEMES[e]!==n}function o(t,r){r===n&&(r=t,t=n),t===n&&(t=e),o.inherit(r,r)}return o.inherit=function(n,o){function a(e){if(e){i(e)||r.warn("Attempted to use unregistered theme '"+e+"'. Register it with $mdThemingProvider.theme().");var t=n.data("$mdThemeName");t&&n.removeClass("md-"+t+"-theme"),n.addClass("md-"+e+"-theme"),n.data("$mdThemeName",e),s&&n.data("$mdThemeController",s)}}var s=o.controller("mdTheme"),c=n.attr("md-theme-watch");if((E||t.isDefined(c))&&"false"!=c){var l=e.$watch(function(){return s&&s.$mdTheme||("default"==b?"":b)},a);n.on("$destroy",l)}else{var d=s&&s.$mdTheme||("default"==b?"":b);a(d)}},o.THEMES=t.extend({},m),o.defaultTheme=function(){return b},o.registered=i,o.generateTheme=s,o}u={},m={};var $,b="default",E=!1;return t.extend(u,e),f.$inject=["$rootScope","$log"],$={definePalette:r,extendPalette:i,theme:c,setDefaultTheme:function(e){b=e},alwaysWatchTheme:function(e){E=e},generateThemesOnDemand:function(e){A=e},$get:f,_LIGHT_DEFAULT_HUES:C,_DARK_DEFAULT_HUES:w,_PALETTES:u,_THEMES:m,_parseRules:o,_rgba:d}}function r(e,t,n){return{priority:100,link:{pre:function(r,i,o){var a={$setTheme:function(t){e.registered(t)||n.warn("attempted to use unregistered theme '"+t+"'"),a.$mdTheme=t}};i.data("$mdThemeController",a),a.$setTheme(t(o.mdTheme)(r)),o.$observe("mdTheme",a.$setTheme)}}}}function i(e){return e}function o(e,n,r){c(e,n),r=r.replace(/THEME_NAME/g,e.name);var i=[],o=e.colors[n],a=new RegExp(".md-"+e.name+"-theme","g"),s=new RegExp("('|\")?{{\\s*("+n+")-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|')?","g"),l=/'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?(contrast)?\s*\}\}'?"?/g,m=u[o.name];return r=r.replace(l,function(t,n,r,i,o){return"foreground"===n?"shadow"==r?e.foregroundShadow:e.foregroundPalette[r]||e.foregroundPalette[1]:(0===r.indexOf("hue")&&(r=e.colors[n].hues[r]),d((u[e.colors[n].name][r]||"")[o?"contrast":"value"],i))}),t.forEach(o.hues,function(t,n){var o=r.replace(s,function(e,n,r,i,o){return d(m[t]["color"===i?"value":"contrast"],o)});if("default"!==n&&(o=o.replace(a,".md-"+e.name+"-theme.md-"+n)),"default"==e.name){var c=/((?:(?:(?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)+) )?)((?:(?:\w|\.|-)+)?)\.md-default-theme((?: |>|\.|\w|-|:|\(|\)|\[|\]|"|'|=)*)/g;o=o.replace(c,function(e,t,n,r){return e+", "+t+n+r})}i.push(o)}),i}function a(e){function n(e){var n=e.contrastDefaultColor,r=e.contrastLightColors||[],i=e.contrastStrongLightColors||[],o=e.contrastDarkColors||[];"string"==typeof r&&(r=r.split(" ")),"string"==typeof i&&(i=i.split(" ")),"string"==typeof o&&(o=o.split(" ")),delete e.contrastDefaultColor,delete e.contrastLightColors,delete e.contrastStrongLightColors,delete e.contrastDarkColors,t.forEach(e,function(a,s){function c(){return"light"===n?o.indexOf(s)>-1?$:i.indexOf(s)>-1?E:b:r.indexOf(s)>-1?i.indexOf(s)>-1?E:b:$}if(!t.isObject(a)){var d=l(a);if(!d)throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected.".replace("%1",a).replace("%2",e.name).replace("%3",s));e[s]={value:d,contrast:c()}}})}var r=document.head,i=r?r.firstElementChild:null,o=e.has("$MD_THEME_CSS")?e.get("$MD_THEME_CSS"):"";if(i&&0!==o.length){t.forEach(u,n);var a=o.split(/\}(?!(\}|'|"|;))/).filter(function(e){return e&&e.length}).map(function(e){return e.trim()+"}"}),c=new RegExp("md-("+y.join("|")+")","g");y.forEach(function(e){k[e]=""}),a.forEach(function(e){for(var t,n=(e.match(c),0);t=y[n];n++)if(e.indexOf(".md-"+t)>-1)return k[t]+=e;for(n=0;t=y[n];n++)if(e.indexOf(t)>-1)return k[t]+=e;return k[M]+=e}),A||t.forEach(m,function(e){f[e.name]||s(e.name)})}}function s(e){var t=m[e],n=document.head,r=n?n.firstElementChild:null;f[e]||(y.forEach(function(e){for(var i=o(t,e,k[e]);i.length;){var a=i.shift();if(a){var s=document.createElement("style");s.setAttribute("md-theme-style",""),s.appendChild(document.createTextNode(a)),n.insertBefore(s,r)}}}),t.colors.primary.name==t.colors.accent.name&&console.warn("$mdThemingProvider: Using the same palette for primary and accent. This violates the material design spec."),f[t.name]=!0)}function c(e,t){if(!u[(e.colors[t]||{}).name])throw new Error("You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3".replace("%1",e.name).replace("%2",t).replace("%3",Object.keys(u).join(", ")))}function l(e){if(t.isArray(e)&&3==e.length)return e;if(/^rgb/.test(e))return e.replace(/(^\s*rgba?\(|\)\s*$)/g,"").split(",").map(function(e,t){return 3==t?parseFloat(e,10):parseInt(e,10)});if("#"==e.charAt(0)&&(e=e.substring(1)),/^([a-fA-F0-9]{3}){1,2}$/g.test(e)){var n=e.length/3,r=e.substr(0,n),i=e.substr(n,n),o=e.substr(2*n);return 1===n&&(r+=r,i+=i,o+=o),[parseInt(r,16),parseInt(i,16),parseInt(o,16)]}}function d(e,n){return e?(4==e.length&&(e=t.copy(e),n?e.pop():n=e.pop()),n&&("number"==typeof n||"string"==typeof n&&n.length)?"rgba("+e.join(",")+","+n+")":"rgb("+e.join(",")+")"):"rgb('0,0,0')"}t.module("material.core.theming",["material.core.theming.palette"]).directive("mdTheme",r).directive("mdThemable",i).provider("$mdTheming",e).run(a);var u,m,f={},p={name:"dark",1:"rgba(0,0,0,0.87)",2:"rgba(0,0,0,0.54)",3:"rgba(0,0,0,0.26)",4:"rgba(0,0,0,0.12)"},h={name:"light",1:"rgba(255,255,255,1.0)",2:"rgba(255,255,255,0.7)",3:"rgba(255,255,255,0.3)",4:"rgba(255,255,255,0.12)"},g="1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)",v="",$=l("rgba(0,0,0,0.87)"),b=l("rgba(255,255,255,0.87)"),E=l("rgb(255,255,255)"),y=["primary","accent","warn","background"],M="primary",C={accent:{"default":"A200","hue-1":"A100","hue-2":"A400","hue-3":"A700"},background:{"default":"A100","hue-1":"300","hue-2":"800","hue-3":"900"}},w={background:{"default":"800","hue-1":"600","hue-2":"300","hue-3":"900"}};y.forEach(function(e){var t={"default":"500","hue-1":"300","hue-2":"800","hue-3":"A100"};C[e]||(C[e]=t),w[e]||(w[e]=t)});var x=["50","100","200","300","400","500","600","700","800","900","A100","A200","A400","A700"],A=!1;e.$inject=["$mdColorPalette"],r.$inject=["$mdTheming","$interpolate","$log"],i.$inject=["$mdTheming"];var k={};a.$inject=["$injector"]}(),function(){function e(e,n,r,i,o){var a;return a={translate3d:function(e,t,n,r){function i(n){return o(e,{to:n||t,addClass:r.transitionOutClass,removeClass:r.transitionInClass}).start()}return o(e,{from:t,to:n,addClass:r.transitionInClass}).start().then(function(){return i})},waitTransitionEnd:function(e,t){var o=3e3;return n(function(n,a){function s(t){t&&t.target!==e[0]||(t&&r.cancel(c),e.off(i.CSS.TRANSITIONEND,s),n())}t=t||{};var c=r(s,t.timeout||o);e.on(i.CSS.TRANSITIONEND,s)})},calculateZoomToOrigin:function(n,r){function i(){var e=n?n.parent():null,t=e?e.parent():null;return t?a.clientRect(t):null}var o=r.element,s=r.bounds,c="translate3d( {centerX}px, {centerY}px, 0 ) scale( {scaleX}, {scaleY} )",l=t.bind(null,e.supplant,c),d=l({centerX:0,centerY:0,scaleX:.5,scaleY:.5});if(o||s){var u=o?a.clientRect(o)||i():a.copyRect(s),m=a.copyRect(n[0].getBoundingClientRect()),f=a.centerPointFor(m),p=a.centerPointFor(u);d=l({centerX:p.x-f.x,centerY:p.y-f.y,scaleX:Math.round(100*Math.min(.5,u.width/m.width))/100,scaleY:Math.round(100*Math.min(.5,u.height/m.height))/100})}return d},toCss:function(e){function n(e,n,i){t.forEach(n.split(" "),function(e){r[e]=i})}var r={},o="left top right bottom width height x y min-width min-height max-width max-height";return t.forEach(e,function(e,a){if(!t.isUndefined(e))if(o.indexOf(a)>=0)r[a]=e+"px";else switch(a){case"transition":n(a,i.CSS.TRANSITION,e);break;case"transform":n(a,i.CSS.TRANSFORM,e);break;case"transformOrigin":n(a,i.CSS.TRANSFORM_ORIGIN,e)}}),r},toTransformCss:function(e,n,r){var o={};return t.forEach(i.CSS.TRANSFORM.split(" "),function(t){o[t]=e}),n&&(r=r||"all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important",o.transition=r),o},copyRect:function(e,n){return e?(n=n||{},t.forEach("left top right bottom width height".split(" "),function(t){n[t]=Math.round(e[t])}),n.width=n.width||n.right-n.left,n.height=n.height||n.bottom-n.top,n):null},clientRect:function(e){var n=t.element(e)[0].getBoundingClientRect(),r=function(e){return e&&e.width>0&&e.height>0};return r(n)?a.copyRect(n):null},centerPointFor:function(e){return e?{x:Math.round(e.left+e.width/2),y:Math.round(e.top+e.height/2)}:{x:0,y:0}}}}t.module("material.core").factory("$$mdAnimate",["$q","$timeout","$mdConstant","$animateCss",function(t,n,r,i){return function(o){return e(o,t,n,r,i)}}])}(),function(){t.version.minor>=4?t.module("material.core.animate",[]):!function(){function e(e){return e.replace(/-[a-z]/g,function(e){return e.charAt(1).toUpperCase()})}var n=t.forEach,r=t.isDefined(document.documentElement.style.WebkitAppearance),i=r?"-webkit-":"",o=(r?"webkitTransitionEnd ":"")+"transitionend",a=(r?"webkitAnimationEnd ":"")+"animationend",s=["$document",function(e){return function(){return e[0].body.clientWidth+1}}],c=["$$rAF",function(e){return function(){var t=!1;return e(function(){t=!0}),function(n){t?n():e(n)}}}],l=["$q","$$rAFMutex",function(e,r){function i(e){this.setHost(e),this._doneCallbacks=[],this._runInAnimationFrame=r(),this._state=0}var o=0,a=1,s=2;return i.prototype={setHost:function(e){this.host=e||{}},done:function(e){this._state===s?e():this._doneCallbacks.push(e)},progress:t.noop,getPromise:function(){if(!this.promise){var t=this;this.promise=e(function(e,n){t.done(function(t){t===!1?n():e()})})}return this.promise},then:function(e,t){return this.getPromise().then(e,t)},"catch":function(e){return this.getPromise()["catch"](e)},"finally":function(e){return this.getPromise()["finally"](e)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(e){var t=this;t._state===o&&(t._state=a,t._runInAnimationFrame(function(){t._resolve(e)}))},_resolve:function(e){this._state!==s&&(n(this._doneCallbacks,function(t){t(e)}),this._doneCallbacks.length=0,this._state=s)}},i}];t.module("material.core.animate",[]).factory("$$forceReflow",s).factory("$$AnimateRunner",l).factory("$$rAFMutex",c).factory("$animateCss",["$window","$$rAF","$$AnimateRunner","$$forceReflow","$$jqLite","$timeout",function(t,s,c,l,d,u){function m(r,s){var l=[],d=E(r);s.transitionStyle&&l.push([i+"transition",s.transitionStyle]),s.keyframeStyle&&l.push([i+"animation",s.keyframeStyle]),s.delay&&l.push([i+"transition-delay",s.delay+"s"]),s.duration&&l.push([i+"transition-duration",s.duration+"s"]);var m=s.keyframeStyle||s.to&&(s.duration>0||s.transitionStyle),h=!!s.addClass||!!s.removeClass,M=m||h;y(r,!0),$(r,s);var C,w,x=!1;return{close:t.close,start:function(){function t(){return x?void 0:(x=!0,C&&w&&r.off(C,w),f(r,s),v(r,s),n(l,function(t){d.style[e(t[0])]=""}),m.complete(!0),m)}var m=new c;return g(function(){if(y(r,!1),!M)return t();n(l,function(t){var n=t[0],r=t[1];d.style[e(n)]=r}),f(r,s);var c=p(r);if(0===c.duration)return t();var m=[];s.easing&&(c.transitionDuration&&m.push([i+"transition-timing-function",s.easing]),c.animationDuration&&m.push([i+"animation-timing-function",s.easing])),s.delay&&c.animationDelay&&m.push([i+"animation-delay",s.delay+"s"]),s.duration&&c.animationDuration&&m.push([i+"animation-duration",s.duration+"s"]),n(m,function(t){var n=t[0],r=t[1];d.style[e(n)]=r,l.push(t)});var h=c.delay,g=1e3*h,v=c.duration,$=1e3*v,E=Date.now();C=[],c.transitionDuration&&C.push(o),c.animationDuration&&C.push(a),C=C.join(" "),w=function(e){e.stopPropagation();var n=e.originalEvent||e,r=n.timeStamp||Date.now(),i=parseFloat(n.elapsedTime.toFixed(3));Math.max(r-E,0)>=g&&i>=v&&t()},r.on(C,w),b(r,s),u(t,g+1.5*$,!1)}),m}}}function f(e,t){t.addClass&&(d.addClass(e,t.addClass),t.addClass=null),t.removeClass&&(d.removeClass(e,t.removeClass),t.removeClass=null)}function p(e){function n(e){return r?"Webkit"+e.charAt(0).toUpperCase()+e.substr(1):e}var i=E(e),o=t.getComputedStyle(i),a=h(o[n("transitionDuration")]),s=h(o[n("animationDuration")]),c=h(o[n("transitionDelay")]),l=h(o[n("animationDelay")]);s*=parseInt(o[n("animationIterationCount")],10)||1;var d=Math.max(s,a),u=Math.max(l,c);return{duration:d,delay:u,animationDuration:s,transitionDuration:a,animationDelay:l,transitionDelay:c}}function h(e){var t=0,r=(e||"").split(/\s*,\s*/);return n(r,function(e){"s"==e.charAt(e.length-1)&&(e=e.substring(0,e.length-1)),e=parseFloat(e)||0,t=t?Math.max(e,t):e}),t}function g(e){M&&M(),C.push(e),M=s(function(){M=null;for(var e=l(),t=0;t<C.length;t++)C[t](e);C.length=0})}function v(e,t){$(e,t),b(e,t)}function $(e,t){t.from&&(e.css(t.from),t.from=null)}function b(e,t){t.to&&(e.css(t.to),t.to=null)}function E(e){for(var t=0;t<e.length;t++)if(1===e[t].nodeType)return e[t]}function y(t,n){var r=E(t),o=e(i+"transition-delay");r.style[o]=n?"-9999s":""}var M,C=[];return m}])}()}(),function(){t.module("material.components.autocomplete",["material.core","material.components.icon","material.components.virtualRepeat"])}(),function(){function e(e){return{restrict:"E",link:function(t,n,r){t.$on("$destroy",function(){e.destroy()})}}}function n(e){function n(e,n,o,a,s,c,l){function d(r,i,l,d){i=o.extractElementByName(i,"md-bottom-sheet"),f=o.createBackdrop(r,"md-bottom-sheet-backdrop md-opaque"),l.clickOutsideToClose&&f.on("click",function(){o.nextTick(s.cancel,!0)}),a.inherit(f,l.parent),e.enter(f,l.parent,null);var u=new m(i,l.parent);return l.bottomSheet=u,a.inherit(u.element,l.parent),l.disableParentScroll&&(l.restoreScroll=o.disableScrollAround(u.element,l.parent)),e.enter(u.element,l.parent).then(function(){var e=o.findFocusTarget(i)||t.element(i[0].querySelector("button")||i[0].querySelector("a")||i[0].querySelector("[ng-click]"));e.focus(),l.escapeToClose&&(l.rootElementKeyupCallback=function(e){e.keyCode===n.KEY_CODE.ESCAPE&&o.nextTick(s.cancel,!0)},c.on("keyup",l.rootElementKeyupCallback))})}function u(t,n,r){var i=r.bottomSheet;return e.leave(f),e.leave(i.element).then(function(){r.disableParentScroll&&(r.restoreScroll(),delete r.restoreScroll),i.cleanup()})}function m(e,t){function a(t){e.css(n.CSS.TRANSITION_DURATION,"0ms")}function c(t){var r=t.pointer.distanceY;5>r&&(r=Math.max(-i,r/2)),e.css(n.CSS.TRANSFORM,"translate3d(0,"+(i+r)+"px,0)")}function d(t){if(t.pointer.distanceY>0&&(t.pointer.distanceY>20||Math.abs(t.pointer.velocityY)>r)){var i=e.prop("offsetHeight")-t.pointer.distanceY,a=Math.min(i/t.pointer.velocityY*.75,500);e.css(n.CSS.TRANSITION_DURATION,a+"ms"),o.nextTick(s.cancel,!0)}else e.css(n.CSS.TRANSITION_DURATION,""),e.css(n.CSS.TRANSFORM,"")}var u=l.register(t,"drag",{horizontal:!1});return t.on("$md.dragstart",a).on("$md.drag",c).on("$md.dragend",d),{element:e,cleanup:function(){u(),t.off("$md.dragstart",a),t.off("$md.drag",c),t.off("$md.dragend",d)}}}var f;return{themable:!0,onShow:d,onRemove:u,escapeToClose:!0,clickOutsideToClose:!0,disableParentScroll:!0}}var r=.5,i=80;return n.$inject=["$animate","$mdConstant","$mdUtil","$mdTheming","$mdBottomSheet","$rootElement","$mdGesture"],e("$mdBottomSheet").setDefaults({methods:["disableParentScroll","escapeToClose","clickOutsideToClose"],options:n})}t.module("material.components.bottomSheet",["material.core","material.components.backdrop"]).directive("mdBottomSheet",e).provider("$mdBottomSheet",n),e.$inject=["$mdBottomSheet"],n.$inject=["$$interimElementProvider"]}(),function(){t.module("material.components.backdrop",["material.core"]).directive("mdBackdrop",["$mdTheming","$animate","$rootElement","$window","$log","$$rAF","$document",function(e,t,n,r,i,o,a){function s(s,l,d){var u=r.getComputedStyle(a[0].body);if("fixed"==u.position){var m=parseInt(u.height,10)+Math.abs(parseInt(u.top,10));l.css({height:m+"px"})}t.pin&&t.pin(l,n),o(function(){var t=l.parent()[0];if(t){"BODY"==t.nodeName&&l.css({position:"fixed"});var n=r.getComputedStyle(t);"static"==n.position&&i.warn(c)}e.inherit(l,l.parent())})}var c="<md-backdrop> may not work properly in a scrolled, static-positioned parent container.";return{restrict:"E",link:s}}])}(),function(){function e(e,n,r,i){function o(e){return t.isDefined(e.href)||t.isDefined(e.ngHref)||t.isDefined(e.ngLink)||t.isDefined(e.uiSref)}function a(e,t){if(o(t))return'<a class="md-button" ng-transclude></a>';var n="undefined"==typeof t.type?"button":t.type;return'<button class="md-button" type="'+n+'" ng-transclude></button>'}function s(a,s,c){var l=s[0];n(s),e.attach(a,s);var d=l.textContent.trim();d||r.expect(s,"aria-label"),o(c)&&t.isDefined(c.ngDisabled)&&a.$watch(c.ngDisabled,function(e){s.attr("tabindex",e?-1:0)}),s.on("click",function(e){c.disabled===!0&&(e.preventDefault(),e.stopImmediatePropagation())}),a.mouseActive=!1,s.on("mousedown",function(){a.mouseActive=!0,i(function(){a.mouseActive=!1},100)}).on("focus",function(){a.mouseActive===!1&&s.addClass("md-focused")}).on("blur",function(e){s.removeClass("md-focused")})}return{restrict:"EA",replace:!0,transclude:!0,template:a,link:s}}t.module("material.components.button",["material.core"]).directive("mdButton",e),e.$inject=["$mdButtonInkRipple","$mdTheming","$mdAria","$timeout"]}(),function(){function e(e){return{restrict:"E",link:function(t,n){e(n)}}}t.module("material.components.card",["material.core"]).directive("mdCard",e),e.$inject=["$mdTheming"]}(),function(){function e(e,n,r,i,o,a){function s(s,l){return l.type="checkbox",l.tabindex=l.tabindex||"0",s.attr("role",l.type),s.on("click",function(e){this.hasAttribute("disabled")&&e.stopImmediatePropagation()}),function(s,l,d,u){function m(e,t,n){d[e]&&s.$watch(d[e],function(e){n[e]&&l.attr(t,n[e])})}function f(e){var t=e.which||e.keyCode;(t===r.KEY_CODE.SPACE||t===r.KEY_CODE.ENTER)&&(e.preventDefault(),l.hasClass("md-focused")||l.addClass("md-focused"),p(e))}function p(e){l[0].hasAttribute("disabled")||s.$apply(function(){var t=d.ngChecked?d.checked:!u.$viewValue;u.$setViewValue(t,e&&e.type),u.$render()})}function h(){u.$viewValue?l.addClass(c):l.removeClass(c)}u=u||o.fakeNgModel(),i(l),d.ngChecked&&s.$watch(s.$eval.bind(s,d.ngChecked),u.$setViewValue.bind(u)),m("ngDisabled","tabindex",{"true":"-1","false":d.tabindex}),n.expectWithText(l,"aria-label"),e.link.pre(s,{on:t.noop,0:{}},d,[u]),s.mouseActive=!1,l.on("click",p).on("keypress",f).on("mousedown",function(){s.mouseActive=!0,a(function(){s.mouseActive=!1},100)}).on("focus",function(){s.mouseActive===!1&&l.addClass("md-focused")}).on("blur",function(){l.removeClass("md-focused")}),u.$render=h}}e=e[0];var c="md-checked";return{restrict:"E",transclude:!0,require:"?ngModel",priority:210,template:'<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-icon"></div></div><div ng-transclude class="md-label"></div>',compile:s}}t.module("material.components.checkbox",["material.core"]).directive("mdCheckbox",e),e.$inject=["inputDirective","$mdAria","$mdConstant","$mdTheming","$mdUtil","$timeout"]}(),function(){t.module("material.components.chips",["material.core","material.components.autocomplete"])}(),function(){function e(e){function t(e,t){this.$scope=e,this.$element=t}return{restrict:"E",controller:["$scope","$element",t],link:function(t,r,i){r[0];e(r),t.$broadcast("$mdContentLoaded",r),n(r[0])}}}function n(e){t.element(e).on("$md.pressdown",function(t){"t"===t.pointer.type&&(t.$materialScrollFixed||(t.$materialScrollFixed=!0,0===e.scrollTop?e.scrollTop=1:e.scrollHeight===e.scrollTop+e.offsetHeight&&(e.scrollTop-=1)))})}t.module("material.components.content",["material.core"]).directive("mdContent",e),e.$inject=["$mdTheming"]}(),function(){!function(){function e(){return{template:'<table aria-hidden="true" class="md-calendar-day-header"><thead></thead></table><div class="md-calendar-scroll-mask"><md-virtual-repeat-container class="md-calendar-scroll-container" md-offset-size="'+(i-r)+'"><table role="grid" tabindex="0" class="md-calendar" aria-readonly="true"><tbody role="rowgroup" md-virtual-repeat="i in ctrl.items" md-calendar-month md-month-offset="$index" class="md-calendar-month" md-start-index="ctrl.getSelectedMonthIndex()" md-item-size="'+r+'"></tbody></table></md-virtual-repeat-container></div>',scope:{minDate:"=mdMinDate",maxDate:"=mdMaxDate",dateFilter:"=mdDateFilter"},require:["ngModel","mdCalendar"],controller:n,controllerAs:"ctrl",bindToController:!0,link:function(e,t,n,r){var i=r[0],o=r[1];o.configureNgModel(i)}}}function n(e,t,n,r,i,o,a,c,l,d,u){if(a(e),this.items={length:2e3},this.maxDate&&this.minDate){var m=c.getMonthDistance(this.minDate,this.maxDate)+1;m=Math.max(m,1),m+=1,this.items.length=m}if(this.$animate=r,this.$q=i,this.$mdInkRipple=d,this.$mdUtil=u,this.keyCode=o.KEY_CODE,this.dateUtil=c,this.dateLocale=l,this.$element=e,this.$scope=n,this.calendarElement=e[0].querySelector(".md-calendar"),this.calendarScroller=e[0].querySelector(".md-virtual-repeat-scroller"),this.today=this.dateUtil.createDateAtMidnight(),this.firstRenderableDate=this.dateUtil.incrementMonths(this.today,-this.items.length/2),this.minDate&&this.minDate>this.firstRenderableDate)this.firstRenderableDate=this.minDate;else if(this.maxDate){this.items.length-2;this.firstRenderableDate=this.dateUtil.incrementMonths(this.maxDate,-(this.items.length-2))}this.id=s++,this.ngModelCtrl=null,this.selectedDate=null,this.displayDate=null,this.focusDate=null,this.isInitialized=!1,this.isMonthTransitionInProgress=!1,t.tabindex||e.attr("tabindex","-1");var f=this;this.cellClickHandler=function(){var e=this;this.hasAttribute("data-timestamp")&&n.$apply(function(){var t=Number(e.getAttribute("data-timestamp"));f.setNgModelValue(f.dateUtil.createDateAtMidnight(t))})},this.attachCalendarEventListeners()}t.module("material.components.datepicker",["material.core","material.components.icon","material.components.virtualRepeat"]).directive("mdCalendar",e);var r=265,i=45,o="md-calendar-selected-date",a="md-focus",s=0;n.$inject=["$element","$attrs","$scope","$animate","$q","$mdConstant","$mdTheming","$$mdDateUtil","$mdDateLocale","$mdInkRipple","$mdUtil"],n.prototype.configureNgModel=function(e){this.ngModelCtrl=e;var t=this;e.$render=function(){t.changeSelectedDate(t.ngModelCtrl.$viewValue)}},n.prototype.buildInitialCalendarDisplay=function(){this.buildWeekHeader(),this.hideVerticalScrollbar(),this.displayDate=this.selectedDate||this.today,this.isInitialized=!0},n.prototype.hideVerticalScrollbar=function(){var e=this.$element[0],t=e.querySelector(".md-calendar-scroll-mask"),n=this.calendarScroller,r=e.querySelector(".md-calendar-day-header").clientWidth,i=n.offsetWidth-n.clientWidth;t.style.width=r+"px",n.style.width=r+i+"px",n.style.paddingRight=i+"px"},n.prototype.attachCalendarEventListeners=function(){this.$element.on("keydown",t.bind(this,this.handleKeyEvent))},n.prototype.handleKeyEvent=function(e){var t=this;this.$scope.$apply(function(){if(e.which==t.keyCode.ESCAPE||e.which==t.keyCode.TAB)return t.$scope.$emit("md-calendar-close"),void(e.which==t.keyCode.TAB&&e.preventDefault());if(e.which===t.keyCode.ENTER)return t.setNgModelValue(t.displayDate),void e.preventDefault();var n=t.getFocusDateFromKeyEvent(e);n&&(n=t.boundDateByMinAndMax(n),e.preventDefault(),e.stopPropagation(),t.changeDisplayDate(n).then(function(){t.focus(n)}))})},n.prototype.getFocusDateFromKeyEvent=function(e){var t=this.dateUtil,n=this.keyCode;switch(e.which){case n.RIGHT_ARROW:return t.incrementDays(this.displayDate,1);case n.LEFT_ARROW:return t.incrementDays(this.displayDate,-1);case n.DOWN_ARROW:return e.metaKey?t.incrementMonths(this.displayDate,1):t.incrementDays(this.displayDate,7);case n.UP_ARROW:return e.metaKey?t.incrementMonths(this.displayDate,-1):t.incrementDays(this.displayDate,-7);case n.PAGE_DOWN:return t.incrementMonths(this.displayDate,1);case n.PAGE_UP:return t.incrementMonths(this.displayDate,-1);case n.HOME:return t.getFirstDateOfMonth(this.displayDate);case n.END:return t.getLastDateOfMonth(this.displayDate);default:return null}},n.prototype.getSelectedMonthIndex=function(){return this.dateUtil.getMonthDistance(this.firstRenderableDate,this.selectedDate||this.today);
},n.prototype.scrollToMonth=function(e){if(this.dateUtil.isValidDate(e)){var t=this.dateUtil.getMonthDistance(this.firstRenderableDate,e);this.calendarScroller.scrollTop=t*r}},n.prototype.setNgModelValue=function(e){this.$scope.$emit("md-calendar-change",e),this.ngModelCtrl.$setViewValue(e),this.ngModelCtrl.$render()},n.prototype.focus=function(e){var t=e||this.selectedDate||this.today,n=this.calendarElement.querySelector(".md-focus");n&&n.classList.remove(a);var r=this.getDateId(t),i=document.getElementById(r);i?(i.classList.add(a),i.focus()):this.focusDate=t},n.prototype.boundDateByMinAndMax=function(e){var t=e;return this.minDate&&e<this.minDate&&(t=new Date(this.minDate.getTime())),this.maxDate&&e>this.maxDate&&(t=new Date(this.maxDate.getTime())),t},n.prototype.changeSelectedDate=function(e){var t=this,n=this.selectedDate;this.selectedDate=e,this.changeDisplayDate(e).then(function(){if(n){var r=document.getElementById(t.getDateId(n));r&&(r.classList.remove(o),r.setAttribute("aria-selected","false"))}if(e){var i=document.getElementById(t.getDateId(e));i&&(i.classList.add(o),i.setAttribute("aria-selected","true"))}})},n.prototype.changeDisplayDate=function(e){if(!this.isInitialized)return this.buildInitialCalendarDisplay(),this.$q.when();if(!this.dateUtil.isValidDate(e)||this.isMonthTransitionInProgress)return this.$q.when();this.isMonthTransitionInProgress=!0;var t=this.animateDateChange(e);this.displayDate=e;var n=this;return t.then(function(){n.isMonthTransitionInProgress=!1}),t},n.prototype.animateDateChange=function(e){return this.scrollToMonth(e),this.$q.when()},n.prototype.buildWeekHeader=function(){for(var e=this.dateLocale.firstDayOfWeek,t=this.dateLocale.shortDays,n=document.createElement("tr"),r=0;7>r;r++){var i=document.createElement("th");i.textContent=t[(r+e)%7],n.appendChild(i)}this.$element.find("thead").append(n)},n.prototype.getDateId=function(e){return["md",this.id,e.getFullYear(),e.getMonth(),e.getDate()].join("-")}}()}(),function(){!function(){function e(){return{require:["^^mdCalendar","mdCalendarMonth"],scope:{offset:"=mdMonthOffset"},controller:n,controllerAs:"mdMonthCtrl",bindToController:!0,link:function(e,t,n,r){var i=r[0],o=r[1];o.calendarCtrl=i,o.generateContent(),e.$watch(function(){return o.offset},function(e,t){e!=t&&o.generateContent()})}}}function n(e,t,n){this.dateUtil=t,this.dateLocale=n,this.$element=e,this.calendarCtrl=null,this.offset,this.focusAfterAppend=null}t.module("material.components.datepicker").directive("mdCalendarMonth",e);var r="md-calendar-date-today",i="md-calendar-selected-date",o="md-focus";n.$inject=["$element","$$mdDateUtil","$mdDateLocale"],n.prototype.generateContent=function(){var e=this.calendarCtrl,t=this.dateUtil.incrementMonths(e.firstRenderableDate,this.offset);this.$element.empty(),this.$element.append(this.buildCalendarForMonth(t)),this.focusAfterAppend&&(this.focusAfterAppend.classList.add(o),this.focusAfterAppend.focus(),this.focusAfterAppend=null)},n.prototype.buildDateCell=function(e){var t=this.calendarCtrl,n=document.createElement("td");if(n.tabIndex=-1,n.classList.add("md-calendar-date"),n.setAttribute("role","gridcell"),e){n.setAttribute("tabindex","-1"),n.setAttribute("aria-label",this.dateLocale.longDateFormatter(e)),n.id=t.getDateId(e),n.setAttribute("data-timestamp",e.getTime()),this.dateUtil.isSameDay(e,t.today)&&n.classList.add(r),this.dateUtil.isValidDate(t.selectedDate)&&this.dateUtil.isSameDay(e,t.selectedDate)&&(n.classList.add(i),n.setAttribute("aria-selected","true"));var o=this.dateLocale.dates[e.getDate()];if(this.isDateEnabled(e)){var a=document.createElement("span");n.appendChild(a),a.classList.add("md-calendar-date-selection-indicator"),a.textContent=o,n.addEventListener("click",t.cellClickHandler),t.focusDate&&this.dateUtil.isSameDay(e,t.focusDate)&&(this.focusAfterAppend=n)}else n.classList.add("md-calendar-date-disabled"),n.textContent=o}return n},n.prototype.isDateEnabled=function(e){return this.dateUtil.isDateWithinRange(e,this.calendarCtrl.minDate,this.calendarCtrl.maxDate)&&(!t.isFunction(this.calendarCtrl.dateFilter)||this.calendarCtrl.dateFilter(e))},n.prototype.buildDateRow=function(e){var t=document.createElement("tr");return t.setAttribute("role","row"),t.setAttribute("aria-label",this.dateLocale.weekNumberFormatter(e)),t},n.prototype.buildCalendarForMonth=function(e){var t=this.dateUtil.isValidDate(e)?e:new Date,n=this.dateUtil.getFirstDateOfMonth(t),r=this.getLocaleDay_(n),i=this.dateUtil.getNumberOfDaysInMonth(t),o=document.createDocumentFragment(),a=1,s=this.buildDateRow(a);o.appendChild(s);var c=this.offset===this.calendarCtrl.items.length-1,l=0,d=document.createElement("td");if(d.classList.add("md-calendar-month-label"),this.calendarCtrl.maxDate&&n>this.calendarCtrl.maxDate&&d.classList.add("md-calendar-month-label-disabled"),d.textContent=this.dateLocale.monthHeaderFormatter(t),2>=r){d.setAttribute("colspan","7");var u=this.buildDateRow();if(u.appendChild(d),o.insertBefore(u,s),c)return o}else l=2,d.setAttribute("colspan","2"),s.appendChild(d);for(var m=l;r>m;m++)s.appendChild(this.buildDateCell());for(var f=r,p=n,h=1;i>=h;h++){if(7===f){if(c)return o;f=0,a++,s=this.buildDateRow(a),o.appendChild(s)}p.setDate(h);var g=this.buildDateCell(p);s.appendChild(g),f++}for(;s.childNodes.length<7;)s.appendChild(this.buildDateCell());for(;o.childNodes.length<6;){for(var v=this.buildDateRow(),m=0;7>m;m++)v.appendChild(this.buildDateCell());o.appendChild(v)}return o},n.prototype.getLocaleDay_=function(e){return(e.getDay()+(7-this.dateLocale.firstDayOfWeek))%7}}()}(),function(){!function(){t.module("material.components.datepicker").config(["$provide",function(e){function t(){this.months=null,this.shortMonths=null,this.days=null,this.shortDays=null,this.dates=null,this.firstDayOfWeek=0,this.formatDate=null,this.parseDate=null,this.monthHeaderFormatter=null,this.weekNumberFormatter=null,this.longDateFormatter=null,this.msgCalendar="",this.msgOpenCalendar=""}t.prototype.$get=function(e){function t(e){if(!e)return"";var t=e.toLocaleTimeString(),n=e;return 0!=e.getHours()||-1===t.indexOf("11:")&&-1===t.indexOf("23:")||(n=new Date(e.getFullYear(),e.getMonth(),e.getDate(),1,0,0)),n.toLocaleDateString()}function n(e){return new Date(e)}function r(e){e=e.trim();var t=/^(([a-zA-Z]{3,}|[0-9]{1,4})([ \.,]+|[\/\-])){2}([a-zA-Z]{3,}|[0-9]{1,4})$/;return t.test(e)}function i(e){return m.shortMonths[e.getMonth()]+" "+e.getFullYear()}function o(e){return"Week "+e}function a(e){return[m.days[e.getDay()],m.months[e.getMonth()],m.dates[e.getDate()],e.getFullYear()].join(" ")}for(var s=e.DATETIME_FORMATS.DAY.map(function(e){return e[0]}),c=Array(32),l=1;31>=l;l++)c[l]=l;var d="Calendar",u="Open calendar",m={months:this.months||e.DATETIME_FORMATS.MONTH,shortMonths:this.shortMonths||e.DATETIME_FORMATS.SHORTMONTH,days:this.days||e.DATETIME_FORMATS.DAY,shortDays:this.shortDays||s,dates:this.dates||c,firstDayOfWeek:this.firstDayOfWeek||0,formatDate:this.formatDate||t,parseDate:this.parseDate||n,isDateComplete:this.isDateComplete||r,monthHeaderFormatter:this.monthHeaderFormatter||i,weekNumberFormatter:this.weekNumberFormatter||o,longDateFormatter:this.longDateFormatter||a,msgCalendar:this.msgCalendar||d,msgOpenCalendar:this.msgOpenCalendar||u};return m},t.prototype.$get.$inject=["$locale"],e.provider("$mdDateLocale",new t)}])}()}(),function(){!function(){function n(){return{template:'<md-button class="md-datepicker-button md-icon-button" type="button" tabindex="-1" aria-hidden="true" ng-click="ctrl.openCalendarPane($event)"><md-icon class="md-datepicker-calendar-icon" md-svg-icon="md-calendar"></md-icon></md-button><div class="md-datepicker-input-container" ng-class="{\'md-datepicker-focused\': ctrl.isFocused}"><input class="md-datepicker-input" aria-haspopup="true" ng-focus="ctrl.setFocused(true)" ng-blur="ctrl.setFocused(false)"><md-button type="button" md-no-ink class="md-datepicker-triangle-button md-icon-button" ng-click="ctrl.openCalendarPane($event)" aria-label="{{::ctrl.dateLocale.msgOpenCalendar}}"><div class="md-datepicker-expand-triangle"></div></md-button></div><div class="md-datepicker-calendar-pane md-whiteframe-z1"><div class="md-datepicker-input-mask"><div class="md-datepicker-input-mask-opaque"></div></div><div class="md-datepicker-calendar"><md-calendar role="dialog" aria-label="{{::ctrl.dateLocale.msgCalendar}}" md-min-date="ctrl.minDate" md-max-date="ctrl.maxDate"md-date-filter="ctrl.dateFilter"ng-model="ctrl.date" ng-if="ctrl.isCalendarOpen"></md-calendar></div></div>',require:["ngModel","mdDatepicker","?^mdInputContainer"],scope:{minDate:"=mdMinDate",maxDate:"=mdMaxDate",placeholder:"@mdPlaceholder",dateFilter:"=mdDateFilter"},controller:r,controllerAs:"ctrl",bindToController:!0,link:function(e,t,n,r){var i=r[0],o=r[1],a=r[2];if(a)throw Error("md-datepicker should not be placed inside md-input-container.");o.configureNgModel(i)}}}function r(e,n,r,i,o,a,s,c,l,d,u,m){this.$compile=i,this.$timeout=o,this.$window=a,this.dateLocale=d,this.dateUtil=u,this.$mdConstant=s,this.$mdUtil=l,this.$$rAF=m,this.documentElement=t.element(document.documentElement),this.ngModelCtrl=null,this.inputElement=n[0].querySelector("input"),this.ngInputElement=t.element(this.inputElement),this.inputContainer=n[0].querySelector(".md-datepicker-input-container"),this.calendarPane=n[0].querySelector(".md-datepicker-calendar-pane"),this.calendarButton=n[0].querySelector(".md-datepicker-button"),this.inputMask=n[0].querySelector(".md-datepicker-input-mask-opaque"),this.$element=n,this.$attrs=r,this.$scope=e,this.date=null,this.isFocused=!1,this.isDisabled,this.setDisabled(n[0].disabled||t.isString(r.disabled)),this.isCalendarOpen=!1,this.calendarPaneOpenedFrom=null,this.calendarPane.id="md-date-pane"+l.nextUid(),c(n),this.bodyClickHandler=t.bind(this,this.handleBodyClick),this.windowResizeHandler=l.debounce(t.bind(this,this.closeCalendarPane),100),r.tabindex||n.attr("tabindex","-1"),this.installPropertyInterceptors(),this.attachChangeListeners(),this.attachInteractionListeners();var f=this;e.$on("$destroy",function(){f.detachCalendarPane()})}t.module("material.components.datepicker").directive("mdDatepicker",n);var i=3,o="md-datepicker-invalid",a=500,s=368,c=360;r.$inject=["$scope","$element","$attrs","$compile","$timeout","$window","$mdConstant","$mdTheming","$mdUtil","$mdDateLocale","$$mdDateUtil","$$rAF"],r.prototype.configureNgModel=function(e){this.ngModelCtrl=e;var t=this;e.$render=function(){var e=t.ngModelCtrl.$viewValue;if(e&&!(e instanceof Date))throw Error("The ng-model for md-datepicker must be a Date instance. Currently the model is a: "+typeof e);t.date=e,t.inputElement.value=t.dateLocale.formatDate(e),t.resizeInputElement(),t.updateErrorState()}},r.prototype.attachChangeListeners=function(){var e=this;e.$scope.$on("md-calendar-change",function(t,n){e.ngModelCtrl.$setViewValue(n),e.date=n,e.inputElement.value=e.dateLocale.formatDate(n),e.closeCalendarPane(),e.resizeInputElement(),e.updateErrorState()}),e.ngInputElement.on("input",t.bind(e,e.resizeInputElement)),e.ngInputElement.on("input",e.$mdUtil.debounce(e.handleInputEvent,a,e))},r.prototype.attachInteractionListeners=function(){var e=this,t=this.$scope,n=this.$mdConstant.KEY_CODE;e.ngInputElement.on("keydown",function(r){r.altKey&&r.keyCode==n.DOWN_ARROW&&(e.openCalendarPane(r),t.$digest())}),t.$on("md-calendar-close",function(){e.closeCalendarPane()})},r.prototype.installPropertyInterceptors=function(){var e=this;if(this.$attrs.ngDisabled){var t=this.$mdUtil.validateScope(this.$element)?this.$element.scope():null;t&&t.$watch(this.$attrs.ngDisabled,function(t){e.setDisabled(t)})}Object.defineProperty(this,"placeholder",{get:function(){return e.inputElement.placeholder},set:function(t){e.inputElement.placeholder=t||""}})},r.prototype.setDisabled=function(e){this.isDisabled=e,this.inputElement.disabled=e,this.calendarButton.disabled=e},r.prototype.updateErrorState=function(e){var n=e||this.date;this.clearErrorState(),this.dateUtil.isValidDate(n)?(this.dateUtil.isValidDate(this.minDate)&&this.ngModelCtrl.$setValidity("mindate",n>=this.minDate),this.dateUtil.isValidDate(this.maxDate)&&this.ngModelCtrl.$setValidity("maxdate",n<=this.maxDate),t.isFunction(this.dateFilter)&&this.ngModelCtrl.$setValidity("filtered",this.dateFilter(n))):this.ngModelCtrl.$setValidity("valid",null==n),this.ngModelCtrl.$valid||this.inputContainer.classList.add(o)},r.prototype.clearErrorState=function(){this.inputContainer.classList.remove(o),["mindate","maxdate","filtered","valid"].forEach(function(e){this.ngModelCtrl.$setValidity(e,!0)},this)},r.prototype.resizeInputElement=function(){this.inputElement.size=this.inputElement.value.length+i},r.prototype.handleInputEvent=function(){var e=this.inputElement.value,t=e?this.dateLocale.parseDate(e):null;this.dateUtil.setDateTimeToMidnight(t);var n=""==e||this.dateUtil.isValidDate(t)&&this.dateLocale.isDateComplete(e)&&this.isDateEnabled(t);n&&(this.ngModelCtrl.$setViewValue(t),this.date=t),this.updateErrorState(t)},r.prototype.isDateEnabled=function(e){return this.dateUtil.isDateWithinRange(e,this.minDate,this.maxDate)&&(!t.isFunction(this.dateFilter)||this.dateFilter(e))},r.prototype.attachCalendarPane=function(){var e=this.calendarPane;e.style.transform="",this.$element.addClass("md-datepicker-open");var t=this.inputContainer.getBoundingClientRect(),n=document.body.getBoundingClientRect(),r=t.top-n.top,i=t.left-n.left,o=n.top<0&&0==document.body.scrollTop?-n.top:document.body.scrollTop,a=n.left<0&&0==document.body.scrollLeft?-n.left:document.body.scrollLeft,l=o+this.$window.innerHeight,d=a+this.$window.innerWidth;if(i+c>d){if(d-c>0)i=d-c;else{i=a;var u=this.$window.innerWidth/c;e.style.transform="scale("+u+")"}e.classList.add("md-datepicker-pos-adjusted")}r+s>l&&l-s>o&&(r=l-s,e.classList.add("md-datepicker-pos-adjusted")),e.style.left=i+"px",e.style.top=r+"px",document.body.appendChild(e),this.inputMask.style.left=t.width+"px",this.$$rAF(function(){e.classList.add("md-pane-open")})},r.prototype.detachCalendarPane=function(){this.$element.removeClass("md-datepicker-open"),this.calendarPane.classList.remove("md-pane-open"),this.calendarPane.classList.remove("md-datepicker-pos-adjusted"),this.calendarPane.parentNode&&this.calendarPane.parentNode.removeChild(this.calendarPane)},r.prototype.openCalendarPane=function(t){if(!this.isCalendarOpen&&!this.isDisabled){this.isCalendarOpen=!0,this.calendarPaneOpenedFrom=t.target,this.$mdUtil.disableScrollAround(this.calendarPane),this.attachCalendarPane(),this.focusCalendar();var n=this;this.$mdUtil.nextTick(function(){n.documentElement.on("click touchstart",n.bodyClickHandler)},!1),e.addEventListener("resize",this.windowResizeHandler)}},r.prototype.closeCalendarPane=function(){this.isCalendarOpen&&(this.isCalendarOpen=!1,this.detachCalendarPane(),this.calendarPaneOpenedFrom.focus(),this.calendarPaneOpenedFrom=null,this.$mdUtil.enableScrolling(),this.documentElement.off("click touchstart",this.bodyClickHandler),e.removeEventListener("resize",this.windowResizeHandler))},r.prototype.getCalendarCtrl=function(){return t.element(this.calendarPane.querySelector("md-calendar")).controller("mdCalendar")},r.prototype.focusCalendar=function(){var e=this;this.$mdUtil.nextTick(function(){e.getCalendarCtrl().focus()},!1)},r.prototype.setFocused=function(e){this.isFocused=e},r.prototype.handleBodyClick=function(e){if(this.isCalendarOpen){var t=this.$mdUtil.getClosest(e.target,"md-calendar");t||this.closeCalendarPane(),this.$scope.$digest()}}}()}(),function(){!function(){t.module("material.components.datepicker").factory("$$mdDateUtil",function(){function e(e){return new Date(e.getFullYear(),e.getMonth(),1)}function n(e){return new Date(e.getFullYear(),e.getMonth()+1,0).getDate()}function r(e){return new Date(e.getFullYear(),e.getMonth()+1,1)}function i(e){return new Date(e.getFullYear(),e.getMonth()-1,1)}function o(e,t){return e.getFullYear()===t.getFullYear()&&e.getMonth()===t.getMonth()}function a(e,t){return e.getDate()==t.getDate()&&o(e,t)}function s(e,t){var n=r(e);return o(n,t)}function c(e,t){var n=i(e);return o(t,n)}function l(e,t){return v((e.getTime()+t.getTime())/2)}function d(t){var n=e(t);return Math.floor((n.getDay()+t.getDate()-1)/7)}function u(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate()+t)}function m(e,t){var r=new Date(e.getFullYear(),e.getMonth()+t,1),i=n(r);return i<e.getDate()?r.setDate(i):r.setDate(e.getDate()),r}function f(e,t){return 12*(t.getFullYear()-e.getFullYear())+(t.getMonth()-e.getMonth())}function p(e){return new Date(e.getFullYear(),e.getMonth(),n(e))}function h(e){return null!=e&&e.getTime&&!isNaN(e.getTime())}function g(e){h(e)&&e.setHours(0,0,0,0)}function v(e){var n;return n=t.isUndefined(e)?new Date:new Date(e),g(n),n}function $(e,n,r){return(!t.isDate(n)||e>=n)&&(!t.isDate(r)||r>=e)}return{getFirstDateOfMonth:e,getNumberOfDaysInMonth:n,getDateInNextMonth:r,getDateInPreviousMonth:i,isInNextMonth:s,isInPreviousMonth:c,getDateMidpoint:l,isSameMonthAndYear:o,getWeekOfMonth:d,incrementDays:u,incrementMonths:m,getLastDateOfMonth:p,isSameDay:a,getMonthDistance:f,isValidDate:h,setDateTimeToMidnight:g,createDateAtMidnight:v,isDateWithinRange:$}})}()}(),function(){function e(e,n,r){return{restrict:"E",link:function(i,o,a){n(o),e(function(){function e(){o.toggleClass("md-content-overflow",a.scrollHeight>a.clientHeight)}var n,a=o[0].querySelector("md-dialog-content");a&&(n=a.getElementsByTagName("img"),e(),t.element(n).on("load",e)),i.$on("$destroy",function(){r.destroy(o)})})}}}function r(e){function r(e,t){return{template:['<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}" ng-class="dialog.css">','  <md-dialog-content class="md-dialog-content" role="document" tabIndex="-1">','    <h2 class="md-title">{{ dialog.title }}</h2>','    <div ng-if="::dialog.mdHtmlContent" class="md-dialog-content-body" ','        ng-bind-html="::dialog.mdHtmlContent"></div>','    <div ng-if="::!dialog.mdHtmlContent" class="md-dialog-content-body">',"      <p>{{::dialog.mdTextContent}}</p>","    </div>","  </md-dialog-content>","  <md-dialog-actions>",'    <md-button ng-if="dialog.$type == \'confirm\'"               ng-click="dialog.abort()" class="md-primary">',"      {{ dialog.cancel }}","    </md-button>",'    <md-button ng-click="dialog.hide()" class="md-primary" md-autofocus="dialog.$type!=\'confirm\'">',"      {{ dialog.ok }}","    </md-button>","  </md-dialog-actions>","</md-dialog>"].join("").replace(/\s\s+/g,""),controller:function(){this.hide=function(){e.hide(!0)},this.abort=function(){e.cancel()}},controllerAs:"dialog",bindToController:!0,theme:t.defaultTheme()}}function i(e,r,i,s,c,l,d,u,m,f){function p(e,t,n,r){if(r){if(r.mdHtmlContent=r.htmlContent||n.htmlContent||"",r.mdTextContent=r.textContent||n.textContent||r.content||n.content||"",r.mdHtmlContent&&!f.has("$sanitize"))throw Error("The ngSanitize module must be loaded in order to use htmlContent.");if(r.mdHtmlContent&&r.mdTextContent)throw Error("md-dialog cannot have both `htmlContent` and `textContent`")}}function h(e,n,r,o){function a(){var e=n[0].querySelectorAll(".md-actions");e.length>0&&m.warn("Using a class of md-actions is deprected, please use <md-dialog-actions>.")}function s(){function e(){var e=n[0].querySelector(".dialog-close");if(!e){var r=n[0].querySelectorAll(".md-actions button, md-dialog-actions button");e=r[r.length-1]}return t.element(e)}if(r.focusOnOpen){var o=i.findFocusTarget(n)||e();o.focus()}}return t.element(l[0].body).addClass("md-dialog-is-showing"),v(r),E(n.find("md-dialog"),r),b(e,n,r),C(n,r).then(function(){$(n,r),y(n,r),a(),s()})}function g(e,n,r){function i(){return w(n,r)}function s(){t.element(l[0].body).removeClass("md-dialog-is-showing"),n.remove(),r.$destroy||r.origin.focus()}return r.deactivateListeners(),r.unlockScreenReader(),r.hideBackdrop(r.$destroy),o&&o.parentNode&&o.parentNode.removeChild(o),a&&a.parentNode&&a.parentNode.removeChild(a),r.$destroy?s():i().then(s)}function v(e){function r(e,r){var i=t.element(e||{});if(i&&i.length){var o={top:0,left:0,height:0,width:0},a=t.isFunction(i[0].getBoundingClientRect);return t.extend(r||{},{element:a?i:n,bounds:a?i[0].getBoundingClientRect():t.extend({},o,i[0]),focus:t.bind(i,i.focus)})}}function i(e,n){if(t.isString(e)){var r=e,i=l[0].querySelectorAll(r);e=i.length?i[0]:null}return t.element(e||n)}e.origin=t.extend({element:null,bounds:null,focus:t.noop},e.origin||{}),e.parent=i(e.parent,u),e.closeTo=r(i(e.closeTo)),e.openFrom=r(i(e.openFrom)),e.targetEvent&&(e.origin=r(e.targetEvent.target,e.origin))}function $(n,r){var o=t.element(d),a=i.debounce(function(){M(n,r)},60),c=[],l=function(){var t="alert"==r.$type?e.hide:e.cancel;i.nextTick(t,!0)};if(r.escapeToClose){var u=r.parent,m=function(e){e.keyCode===s.KEY_CODE.ESCAPE&&(e.stopPropagation(),e.preventDefault(),l())};n.on("keydown",m),u.on("keydown",m),o.on("resize",a),c.push(function(){n.off("keydown",m),u.off("keydown",m),o.off("resize",a)})}if(r.clickOutsideToClose){var f,u=n,p=function(e){f=e.target},h=function(e){f===u[0]&&e.target===u[0]&&(e.stopPropagation(),e.preventDefault(),l())};u.on("mousedown",p),u.on("mouseup",h),c.push(function(){u.off("mousedown",p),u.off("mouseup",h)})}r.deactivateListeners=function(){c.forEach(function(e){e()}),r.deactivateListeners=null}}function b(e,t,n){n.disableParentScroll&&(n.restoreScroll=i.disableScrollAround(t,n.parent)),n.hasBackdrop&&(n.backdrop=i.createBackdrop(e,"md-dialog-backdrop md-opaque"),c.enter(n.backdrop,n.parent)),n.hideBackdrop=function(e){n.backdrop&&(e?n.backdrop.remove():c.leave(n.backdrop)),n.disableParentScroll&&(n.restoreScroll(),delete n.restoreScroll),n.hideBackdrop=null}}function E(e,t){var n="alert"===t.$type?"alertdialog":"dialog",s=e.find("md-dialog-content"),c=e.attr("id")||"dialog_"+i.nextUid();e.attr({role:n,tabIndex:"-1"}),0===s.length&&(s=e),s.attr("id",c),e.attr("aria-describedby",c),t.ariaLabel?r.expect(e,"aria-label",t.ariaLabel):r.expectAsync(e,"aria-label",function(){var e=s.text().split(/\s+/);return e.length>3&&(e=e.slice(0,3).concat("...")),e.join(" ")}),o=document.createElement("div"),o.classList.add("md-dialog-focus-trap"),o.tabIndex=0,a=o.cloneNode(!1);var l=function(){e.focus()};o.addEventListener("focus",l),a.addEventListener("focus",l),e[0].parentNode.insertBefore(o,e[0]),e.append(a)}function y(e,t){function n(e){for(;e.parentNode;){if(e===document.body)return;for(var t=e.parentNode.children,i=0;i<t.length;i++)e===t[i]||x(t[i],["SCRIPT","STYLE"])||t[i].setAttribute("aria-hidden",r);n(e=e.parentNode)}}var r=!0;n(e[0]),t.unlockScreenReader=function(){r=!1,n(e[0]),t.unlockScreenReader=null}}function M(e,t){var n="fixed"==d.getComputedStyle(l[0].body).position,r=t.backdrop?d.getComputedStyle(t.backdrop[0]):null,o=r?Math.min(l[0].body.clientHeight,Math.ceil(Math.abs(parseInt(r.height,10)))):0;return e.css({top:(n?i.scrollTop(t.parent):0)+"px",height:o?o+"px":"100%"}),e}function C(e,t){t.parent.append(e),M(e,t);var n=e.find("md-dialog"),r=i.dom.animator,o=r.calculateZoomToOrigin,a={transitionInClass:"md-transition-in",transitionOutClass:"md-transition-out"},s=r.toTransformCss(o(n,t.openFrom||t.origin)),c=r.toTransformCss("");return t.fullscreen&&n.addClass("md-dialog-fullscreen"),r.translate3d(n,s,c,a).then(function(e){return t.reverseAnimate=function(){return delete t.reverseAnimate,t.closeTo?(a={transitionInClass:"md-transition-out",transitionOutClass:"md-transition-in"},s=c,c=r.toTransformCss(o(n,t.closeTo)),r.translate3d(n,s,c,a)):e(r.toTransformCss(o(n,t.origin)))},!0})}function w(e,t){return t.reverseAnimate()}function x(e,t){return-1!==t.indexOf(e.nodeName)?!0:void 0}return{hasBackdrop:!0,isolateScope:!0,onShow:h,onShowing:p,onRemove:g,clickOutsideToClose:!1,escapeToClose:!0,targetEvent:null,closeTo:null,openFrom:null,focusOnOpen:!0,disableParentScroll:!0,autoWrap:!0,fullscreen:!1,transformTemplate:function(e,t){function n(e){return t.autoWrap&&!/<\/md-dialog>/g.test(e)?"<md-dialog>"+(e||"")+"</md-dialog>":e||""}return'<div class="md-dialog-container">'+n(e)+"</div>"}}}var o,a;return r.$inject=["$mdDialog","$mdTheming"],i.$inject=["$mdDialog","$mdAria","$mdUtil","$mdConstant","$animate","$document","$window","$rootElement","$log","$injector"],e("$mdDialog").setDefaults({methods:["disableParentScroll","hasBackdrop","clickOutsideToClose","escapeToClose","targetEvent","closeTo","openFrom","parent","fullscreen"],options:i}).addPreset("alert",{methods:["title","htmlContent","textContent","content","ariaLabel","ok","theme","css"],options:r}).addPreset("confirm",{methods:["title","htmlContent","textContent","content","ariaLabel","ok","cancel","theme","css"],options:r})}t.module("material.components.dialog",["material.core","material.components.backdrop"]).directive("mdDialog",e).provider("$mdDialog",r),e.$inject=["$$rAF","$mdTheming","$mdDialog"],r.$inject=["$$interimElementProvider"]}(),function(){function e(e){return{restrict:"E",link:e}}t.module("material.components.divider",["material.core"]).directive("mdDivider",e),e.$inject=["$mdTheming"]}(),function(){!function(){function e(){return{restrict:"E",require:["^?mdFabSpeedDial","^?mdFabToolbar"],compile:function(e,n){var r=e.children(),i=!1;t.forEach(["","data-","x-"],function(e){i=i||(r.attr(e+"ng-repeat")?!0:!1)}),i?r.addClass("md-fab-action-item"):r.wrap('<div class="md-fab-action-item">')}}}t.module("material.components.fabActions",["material.core"]).directive("mdFabActions",e)}()}(),function(){!function(){function e(e,n,r,i,o,a){function s(){N.direction=N.direction||"down",N.isOpen=N.isOpen||!1,d(),n.addClass("md-animations-waiting")}function c(){var r=["click","focusin","focusout"];t.forEach(r,function(e){n.on(e,l)}),e.$on("$destroy",function(){t.forEach(r,function(e){n.off(e,l)}),p()})}function l(e){"click"==e.type&&k(e),"focusout"!=e.type||D||(D=a(function(){N.close()},100,!1)),"focusin"==e.type&&D&&(a.cancel(D),D=null)}function d(){N.currentActionIndex=-1}function u(){e.$watch("vm.direction",function(e,t){r.removeClass(n,"md-"+t),r.addClass(n,"md-"+e),d()});var t,i;e.$watch("vm.isOpen",function(e){d(),t&&i||(t=T(),i=S()),e?f():p();var o=e?"md-is-open":"",a=e?"":"md-is-open";t.attr("aria-haspopup",!0),t.attr("aria-expanded",e),i.attr("aria-hidden",!e),r.setClass(n,o,a)})}function m(){n[0].scrollHeight>0?r.addClass(n,"md-animations-ready").then(function(){n.removeClass("md-animations-waiting")}):10>_&&(a(m,100),_+=1)}function f(){n.on("keydown",g),i.nextTick(function(){t.element(document).on("click touchend",h)})}function p(){n.off("keydown",g),t.element(document).off("click touchend",h)}function h(e){if(e.target){var t=i.getClosest(e.target,"md-fab-trigger"),n=i.getClosest(e.target,"md-fab-actions");t||n||N.close()}}function g(e){switch(e.which){case o.KEY_CODE.ESCAPE:return N.close(),e.preventDefault(),!1;case o.KEY_CODE.LEFT_ARROW:return y(e),!1;case o.KEY_CODE.UP_ARROW:return M(e),!1;case o.KEY_CODE.RIGHT_ARROW:return C(e),!1;case o.KEY_CODE.DOWN_ARROW:return w(e),!1}}function v(e){b(e,-1)}function $(e){b(e,1)}function b(e,n){var r=E();N.currentActionIndex=N.currentActionIndex+n,N.currentActionIndex=Math.min(r.length-1,N.currentActionIndex),N.currentActionIndex=Math.max(0,N.currentActionIndex);var i=t.element(r[N.currentActionIndex]).children()[0];t.element(i).attr("tabindex",0),i.focus(),e.preventDefault(),e.stopImmediatePropagation()}function E(){var e=S()[0].querySelectorAll(".md-fab-action-item");return t.forEach(e,function(e){t.element(t.element(e).children()[0]).attr("tabindex",-1)}),e}function y(e){"left"===N.direction?$(e):v(e)}function M(e){"down"===N.direction?v(e):$(e)}function C(e){"left"===N.direction?v(e):$(e)}function w(e){"up"===N.direction?v(e):$(e)}function x(e){return i.getClosest(e,"md-fab-trigger")}function A(e){return i.getClosest(e,"md-fab-actions")}function k(e){x(e.target)&&N.toggle(),A(e.target)&&N.close()}function T(){return n.find("md-fab-trigger")}function S(){return n.find("md-fab-actions")}var N=this;N.open=function(){e.$evalAsync("vm.isOpen = true")},N.close=function(){e.$evalAsync("vm.isOpen = false"),n.find("md-fab-trigger")[0].focus()},N.toggle=function(){e.$evalAsync("vm.isOpen = !vm.isOpen")},s(),c(),u();var _=0;m();var D}t.module("material.components.fabShared",["material.core"]).controller("FabController",e),e.$inject=["$scope","$element","$animate","$mdUtil","$mdConstant","$timeout"]}()}(),function(){!function(){function n(){function e(e,t){t.prepend('<div class="md-css-variables"></div>')}return{restrict:"E",scope:{direction:"@?mdDirection",isOpen:"=?mdOpen"},bindToController:!0,controller:"FabController",controllerAs:"vm",link:e}}function r(n){function r(e){n(e,o,!1)}function i(n){if(!n.hasClass("md-animations-waiting")||n.hasClass("md-animations-ready")){var r=n[0],i=n.controller("mdFabSpeedDial"),o=r.querySelectorAll(".md-fab-action-item"),a=r.querySelector("md-fab-trigger"),s=r.querySelector(".md-css-variables"),c=parseInt(e.getComputedStyle(s).zIndex);t.forEach(o,function(e,t){var n=e.style;n.transform=n.webkitTransform="",n.transitionDelay="",n.opacity=1,n.zIndex=o.length-t+c}),a.style.zIndex=c+o.length+1,i.isOpen||t.forEach(o,function(e,t){var n,r,o=e.style,s=(a.clientHeight-e.clientHeight)/2,c=(a.clientWidth-e.clientWidth)/2;switch(i.direction){case"up":n=e.scrollHeight*(t+1)+s,r="Y";break;case"down":n=-(e.scrollHeight*(t+1)+s),r="Y";break;case"left":n=e.scrollWidth*(t+1)+c,r="X";break;case"right":n=-(e.scrollWidth*(t+1)+c),r="X"}var l="translate"+r+"("+n+"px)";o.transform=o.webkitTransform=l})}}return{addClass:function(e,t,n){e.hasClass("md-fling")?(i(e),r(n)):n()},removeClass:function(e,t,n){i(e),r(n)}}}function i(n){function r(e){n(e,o,!1)}function i(n){var r=n[0],i=n.controller("mdFabSpeedDial"),o=r.querySelectorAll(".md-fab-action-item"),s=r.querySelector(".md-css-variables"),c=parseInt(e.getComputedStyle(s).zIndex);t.forEach(o,function(e,t){var n=e.style,r=t*a;n.opacity=i.isOpen?1:0,n.transform=n.webkitTransform=i.isOpen?"scale(1)":"scale(0.1)",n.transitionDelay=(i.isOpen?r:o.length-r)+"ms",n.zIndex=o.length-t+c})}var a=65;return{addClass:function(e,t,n){i(e),r(n)},removeClass:function(e,t,n){i(e),r(n)}}}var o=300;t.module("material.components.fabSpeedDial",["material.core","material.components.fabShared","material.components.fabTrigger","material.components.fabActions"]).directive("mdFabSpeedDial",n).animation(".md-fling",r).animation(".md-scale",i).service("mdFabSpeedDialFlingAnimation",r).service("mdFabSpeedDialScaleAnimation",i),r.$inject=["$timeout"],i.$inject=["$timeout"]}()}(),function(){!function(){function n(){function e(e,t,n){t.addClass("md-fab-toolbar"),t.find("md-fab-trigger").find("button").prepend('<div class="md-fab-toolbar-background"></div>')}return{restrict:"E",transclude:!0,template:'<div class="md-fab-toolbar-wrapper">  <div class="md-fab-toolbar-content" ng-transclude></div></div>',scope:{direction:"@?mdDirection",isOpen:"=?mdOpen"},bindToController:!0,controller:"FabController",controllerAs:"vm",link:e}}function r(){function n(n,r,i){if(r){var o=n[0],a=n.controller("mdFabToolbar"),s=o.querySelector(".md-fab-toolbar-background"),c=o.querySelector("md-fab-trigger button"),l=o.querySelector("md-toolbar"),d=o.querySelector("md-fab-trigger button md-icon"),u=n.find("md-fab-actions").children();if(c&&s){var m=e.getComputedStyle(c).getPropertyValue("background-color"),f=o.offsetWidth,p=(o.offsetHeight,2*(f/c.offsetWidth));s.style.backgroundColor=m,s.style.borderRadius=f+"px",a.isOpen?(l.style.pointerEvents="initial",s.style.width=c.offsetWidth+"px",s.style.height=c.offsetHeight+"px",s.style.transform="scale("+p+")",s.style.transitionDelay="0ms",d&&(d.style.transitionDelay=".3s"),t.forEach(u,function(e,t){e.style.transitionDelay=25*(u.length-t)+"ms"})):(l.style.pointerEvents="none",s.style.transform="scale(1)",s.style.top="0",n.hasClass("md-right")&&(s.style.left="0",s.style.right=null),n.hasClass("md-left")&&(s.style.right="0",s.style.left=null),s.style.transitionDelay="200ms",d&&(d.style.transitionDelay="0ms"),t.forEach(u,function(e,t){e.style.transitionDelay=200+25*t+"ms";
}))}}}return{addClass:function(e,t,r){n(e,t,r),r()},removeClass:function(e,t,r){n(e,t,r),r()}}}t.module("material.components.fabToolbar",["material.core","material.components.fabShared","material.components.fabTrigger","material.components.fabActions"]).directive("mdFabToolbar",n).animation(".md-fab-toolbar",r).service("mdFabToolbarAnimation",r)}()}(),function(){!function(){function e(){return{restrict:"E",require:["^?mdFabSpeedDial","^?mdFabToolbar"]}}t.module("material.components.fabTrigger",["material.core"]).directive("mdFabTrigger",e)}()}(),function(){function e(e,r,i,o){function a(n,a,s,c){function l(){for(var e in r.MEDIA)o(e),o.getQuery(r.MEDIA[e]).addListener(C);return o.watchResponsiveAttributes(["md-cols","md-row-height","md-gutter"],s,u)}function d(){c.layoutDelegate=t.noop,w();for(var e in r.MEDIA)o.getQuery(r.MEDIA[e]).removeListener(C)}function u(e){null==e?c.invalidateLayout():o(e)&&c.invalidateLayout()}function m(e){var r=g(),o={tileSpans:v(r),colCount:$(),rowMode:y(),rowHeight:E(),gutter:b()};if(e||!t.equals(o,x)){var s=i(o.colCount,o.tileSpans,r).map(function(e,n){return{grid:{element:a,style:h(o.colCount,n,o.gutter,o.rowMode,o.rowHeight)},tiles:e.map(function(e,i){return{element:t.element(r[i]),style:p(e.position,e.spans,o.colCount,n,o.gutter,o.rowMode,o.rowHeight)}})}}).reflow().performance();n.mdOnLayout({$event:{performance:s}}),x=o}}function f(e){return A+e+k}function p(e,t,n,r,i,o,a){var s=1/n*100,c=(n-1)/n,l=T({share:s,gutterShare:c,gutter:i}),d={left:S({unit:l,offset:e.col,gutter:i}),width:N({unit:l,span:t.col,gutter:i}),paddingTop:"",marginTop:"",top:"",height:""};switch(o){case"fixed":d.top=S({unit:a,offset:e.row,gutter:i}),d.height=N({unit:a,span:t.row,gutter:i});break;case"ratio":var u=s/a,m=T({share:u,gutterShare:c,gutter:i});d.paddingTop=N({unit:m,span:t.row,gutter:i}),d.marginTop=S({unit:m,offset:e.row,gutter:i});break;case"fit":var f=(r-1)/r,u=1/r*100,m=T({share:u,gutterShare:f,gutter:i});d.top=S({unit:m,offset:e.row,gutter:i}),d.height=N({unit:m,span:t.row,gutter:i})}return d}function h(e,t,n,r,i){var o={};switch(r){case"fixed":o.height=N({unit:i,span:t,gutter:n}),o.paddingBottom="";break;case"ratio":var a=1===e?0:(e-1)/e,s=1/e*100,c=s*(1/i),l=T({share:c,gutterShare:a,gutter:n});o.height="",o.paddingBottom=N({unit:l,span:t,gutter:n});break;case"fit":}return o}function g(){return[].filter.call(a.children(),function(e){return"MD-GRID-TILE"==e.tagName&&!e.$$mdDestroyed})}function v(e){return[].map.call(e,function(e){var n=t.element(e).controller("mdGridTile");return{row:parseInt(o.getResponsiveAttribute(n.$attrs,"md-rowspan"),10)||1,col:parseInt(o.getResponsiveAttribute(n.$attrs,"md-colspan"),10)||1}})}function $(){var e=parseInt(o.getResponsiveAttribute(s,"md-cols"),10);if(isNaN(e))throw"md-grid-list: md-cols attribute was not found, or contained a non-numeric value";return e}function b(){return M(o.getResponsiveAttribute(s,"md-gutter")||1)}function E(){var e=o.getResponsiveAttribute(s,"md-row-height");switch(y()){case"fixed":return M(e);case"ratio":var t=e.split(":");return parseFloat(t[0])/parseFloat(t[1]);case"fit":return 0}}function y(){var e=o.getResponsiveAttribute(s,"md-row-height");return"fit"==e?"fit":-1!==e.indexOf(":")?"ratio":"fixed"}function M(e){return/\D$/.test(e)?e:e+"px"}a.attr("role","list"),c.layoutDelegate=m;var C=t.bind(c,c.invalidateLayout),w=l();n.$on("$destroy",d);var x,A=e.startSymbol(),k=e.endSymbol(),T=e(f("share")+"% - ("+f("gutter")+" * "+f("gutterShare")+")"),S=e("calc(("+f("unit")+" + "+f("gutter")+") * "+f("offset")+")"),N=e("calc(("+f("unit")+") * "+f("span")+" + ("+f("span")+" - 1) * "+f("gutter")+")")}return{restrict:"E",controller:n,scope:{mdOnLayout:"&"},link:a}}function n(e){this.layoutInvalidated=!1,this.tilesInvalidated=!1,this.$timeout_=e.nextTick,this.layoutDelegate=t.noop}function r(e){function n(t,n){var r,a,s,c,l,d;return c=e.time(function(){a=i(t,n)}),r={layoutInfo:function(){return a},map:function(t){return l=e.time(function(){var e=r.layoutInfo();s=t(e.positioning,e.rowCount)}),r},reflow:function(t){return d=e.time(function(){var e=t||o;e(s.grid,s.tiles)}),r},performance:function(){return{tileCount:n.length,layoutTime:c,mapTime:l,reflowTime:d,totalTime:c+l+d}}}}function r(e,t){e.element.css(e.style),t.forEach(function(e){e.element.css(e.style)})}function i(e,t){function n(t,n){if(t.col>e)throw"md-grid-list: Tile at position "+n+" has a colspan ("+t.col+") that exceeds the column count ("+e+")";for(var a=0,d=0;d-a<t.col;)s>=e?r():(a=l.indexOf(0,s),-1!==a&&-1!==(d=o(a+1))?s=d+1:(a=d=0,r()));return i(a,t.col,t.row),s=a+t.col,{col:a,row:c}}function r(){s=0,c++,i(0,e,-1)}function i(e,t,n){for(var r=e;e+t>r;r++)l[r]=Math.max(l[r]+n,0)}function o(e){var t;for(t=e;t<l.length;t++)if(0!==l[t])return t;return t===l.length?t:void 0}function a(){for(var t=[],n=0;e>n;n++)t.push(0);return t}var s=0,c=0,l=a();return{positioning:t.map(function(e,t){return{spans:e,position:n(e,t)}}),rowCount:c+Math.max.apply(Math,l)}}var o=r;return n.animateWith=function(e){o=t.isFunction(e)?e:r},n}function i(e){function n(n,r,i,o){r.attr("role","listitem");var a=e.watchResponsiveAttributes(["md-colspan","md-rowspan"],i,t.bind(o,o.invalidateLayout));o.invalidateTiles(),n.$on("$destroy",function(){r[0].$$mdDestroyed=!0,a(),o.invalidateLayout()}),t.isDefined(n.$parent.$index)&&n.$watch(function(){return n.$parent.$index},function(e,t){e!==t&&o.invalidateTiles()})}return{restrict:"E",require:"^mdGridList",template:"<figure ng-transclude></figure>",transclude:!0,scope:{},controller:["$attrs",function(e){this.$attrs=e}],link:n}}function o(){return{template:"<figcaption ng-transclude></figcaption>",transclude:!0}}t.module("material.components.gridList",["material.core"]).directive("mdGridList",e).directive("mdGridTile",i).directive("mdGridTileFooter",o).directive("mdGridTileHeader",o).factory("$mdGridLayout",r),e.$inject=["$interpolate","$mdConstant","$mdGridLayout","$mdMedia"],n.$inject=["$mdUtil"],n.prototype={invalidateTiles:function(){this.tilesInvalidated=!0,this.invalidateLayout()},invalidateLayout:function(){this.layoutInvalidated||(this.layoutInvalidated=!0,this.$timeout_(t.bind(this,this.layout)))},layout:function(){try{this.layoutDelegate(this.tilesInvalidated)}finally{this.layoutInvalidated=!1,this.tilesInvalidated=!1}}},r.$inject=["$mdUtil"],i.$inject=["$mdMedia"]}(),function(){t.module("material.components.icon",["material.core"])}(),function(){function n(e,t){function n(t,n,r){e(n),n.find("md-icon").length&&n.addClass("md-has-icon")}function r(e,n,r,i){var o=this;o.isErrorGetter=r.mdIsError&&t(r.mdIsError),o.delegateClick=function(){o.input.focus()},o.element=n,o.setFocused=function(e){n.toggleClass("md-input-focused",!!e)},o.setHasValue=function(e){n.toggleClass("md-input-has-value",!!e)},o.setHasPlaceholder=function(e){n.toggleClass("md-input-has-placeholder",!!e)},o.setInvalid=function(e){e?i.addClass(n,"md-input-invalid"):i.removeClass(n,"md-input-invalid")},e.$watch(function(){return o.label&&o.input},function(e){e&&!o.label.attr("for")&&o.label.attr("for",o.input.attr("id"))})}return r.$inject=["$scope","$element","$attrs","$animate"],{restrict:"E",link:n,controller:r}}function r(){return{restrict:"E",require:"^?mdInputContainer",link:function(e,t,n,r){!r||n.mdNoFloat||t.hasClass("md-container-ignore")||(r.label=t,e.$on("$destroy",function(){r.label=null}))}}}function i(e,n,r){function i(i,o,a,s){function c(e){return u.setHasValue(!f.$isEmpty(e)),e}function l(){u.setHasValue(o.val().length>0||(o[0].validity||{}).badInput)}function d(){function r(e){return h(),e}function a(){if(d.style.height=d.offsetHeight+"px",o.addClass("md-no-flex"),isNaN(m)){l.style.height="auto",l.scrollTop=0;var e=s();e&&(l.style.height=e+"px")}else{l.setAttribute("rows",1),p||(l.style.minHeight="0",p=o.prop("clientHeight"),l.style.minHeight=null);var t=Math.min(m,Math.round(l.scrollHeight/p));l.setAttribute("rows",t),l.style.height=p*t+"px"}o.removeClass("md-no-flex"),d.style.height="auto"}function s(){var e=l.scrollHeight-l.offsetHeight;return l.offsetHeight+(e>0?e:0)}function c(e){l.scrollTop=0;var t=l.scrollHeight-l.offsetHeight,n=l.offsetHeight+t;l.style.height=n+"px"}if(!t.isDefined(o.attr("md-no-autogrow"))){var l=o[0],d=u.element[0],m=NaN,p=null;l.hasAttribute("rows")&&(m=parseInt(l.getAttribute("rows")));var h=e.debounce(a,1);if(f?(f.$formatters.push(r),f.$viewChangeListeners.push(r)):h(),o.on("keydown input",h),isNaN(m)&&(o.attr("rows","1"),o.on("scroll",c)),t.element(n).on("resize",h),i.$on("$destroy",function(){t.element(n).off("resize",h)}),t.isDefined(o.attr("md-detect-hidden"))){var g=function(){var e=!1;return function(){var t=0===l.offsetHeight;t===!1&&e===!0&&a(),e=t}}();i.$watch(function(){return e.nextTick(g,!1),!0})}}}var u=s[0],m=!!s[1],f=s[1]||e.fakeNgModel(),p=t.isDefined(a.readonly);if(u){if(u.input)throw new Error("<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!");u.input=o;var h=t.element('<div class="md-errors-spacer">');o.after(h),u.label||r.expect(o,"aria-label",o.attr("placeholder")),o.addClass("md-input"),o.attr("id")||o.attr("id","input_"+e.nextUid()),"textarea"===o[0].tagName.toLowerCase()&&d(),m||l();var g=u.isErrorGetter||function(){return f.$invalid&&(f.$touched||f.$$parentForm&&f.$$parentForm.$submitted)};i.$watch(g,u.setInvalid),f.$parsers.push(c),f.$formatters.push(c),o.on("input",l),p||o.on("focus",function(e){u.setFocused(!0)}).on("blur",function(e){u.setFocused(!1),l()}),i.$on("$destroy",function(){u.setFocused(!1),u.setHasValue(!1),u.input=null})}}return{restrict:"E",require:["^?mdInputContainer","?ngModel"],link:i}}function o(e,n){function r(r,i,o,a){function s(e){return l.parent?(l.text(String(i.val()||e||"").length+"/"+c),e):e}var c,l,d,u=a[0],m=a[1];n.nextTick(function(){d=t.element(m.element[0].querySelector(".md-errors-spacer")),l=t.element('<div class="md-char-counter">'),d.append(l),o.$set("ngTrim","false"),u.$formatters.push(s),u.$viewChangeListeners.push(s),i.on("input keydown keyup",function(){s()}),r.$watch(o.mdMaxlength,function(n){c=n,t.isNumber(n)&&n>0?(l.parent().length||e.enter(l,d),s()):e.leave(l)}),u.$validators["md-maxlength"]=function(e,n){return!t.isNumber(c)||0>c?!0:(e||i.val()||n||"").length<=c}})}return{restrict:"A",require:["ngModel","^mdInputContainer"],link:r}}function a(e){function n(e,n,r,i){if(i){var o=i.element.find("label"),a=t.isDefined(i.element.attr("md-no-float"));if(o&&o.length||a)return void i.setHasPlaceholder(!0);var s=r.placeholder;if(n.removeAttr("placeholder"),i.input&&"MD-SELECT"!=i.input[0].nodeName){var c='<label ng-click="delegateClick()">'+s+"</label>";i.element.addClass("md-icon-float"),i.element.prepend(c)}}}return{restrict:"A",require:"^^?mdInputContainer",priority:200,link:n}}function s(){function e(e,n,r,i){i&&(n.toggleClass("md-input-messages-animation",!0),n.toggleClass("md-auto-hide",!0),("false"==r.mdAutoHide||t(r))&&n.toggleClass("md-auto-hide",!1))}function t(e){return $.some(function(t){return e[t]})}return{restrict:"EA",link:e,require:"^^?mdInputContainer"}}function c(e){function t(t){var n=e.getClosest(t,"md-input-container");if(n)return t.toggleClass("md-input-message-animation",!0),{}}return{restrict:"EA",compile:t,priority:100}}function l(e,t){return{addClass:function(n,r,i){var o=v(n);"md-input-invalid"==r&&o.hasClass("md-auto-hide")&&m(n,t,e)["finally"](i)}}}function d(e,t){return{enter:function(n,r){m(n,t,e)["finally"](r)},leave:function(n,r){f(n,t,e)["finally"](r)},addClass:function(n,r,i){"ng-hide"==r?f(n,t,e)["finally"](i):i()},removeClass:function(n,r,i){"ng-hide"==r?m(n,t,e)["finally"](i):i()}}}function u(e){return{enter:function(t,n){var r=v(t);return r.hasClass("md-auto-hide")?void n():p(t,e)},leave:function(t,n){return h(t,e)}}}function m(e,n,r){var i,o=[],a=v(e);return t.forEach(a.children(),function(e){i=p(t.element(e),n),o.push(i.start())}),r.all(o)}function f(e,n,r){var i,o=[],a=v(e);return t.forEach(a.children(),function(e){i=h(t.element(e),n),o.push(i.start())}),r.all(o)}function p(e,t){var n=e[0].offsetHeight;return t(e,{event:"enter",structural:!0,from:{opacity:0,"margin-top":-n+"px"},to:{opacity:1,"margin-top":"0"},duration:.3})}function h(t,n){var r=t[0].offsetHeight,i=e.getComputedStyle(t[0]);return 0==i.opacity?n(t,{}):n(t,{event:"leave",structural:!0,from:{opacity:1,"margin-top":0},to:{opacity:0,"margin-top":-r+"px"},duration:.3})}function g(e){var t=e.controller("mdInputContainer");return t.element}function v(e){var n=g(e),r="ng-messages,data-ng-messages,x-ng-messages,[ng-messages],[data-ng-messages],[x-ng-messages]";return t.element(n[0].querySelector(r))}t.module("material.components.input",["material.core"]).directive("mdInputContainer",n).directive("label",r).directive("input",i).directive("textarea",i).directive("mdMaxlength",o).directive("placeholder",a).directive("ngMessages",s).directive("ngMessage",c).directive("ngMessageExp",c).animation(".md-input-invalid",l).animation(".md-input-messages-animation",d).animation(".md-input-message-animation",u),n.$inject=["$mdTheming","$parse"],i.$inject=["$mdUtil","$window","$mdAria"],o.$inject=["$animate","$mdUtil"],a.$inject=["$log"];var $=["ngIf","ngShow","ngHide","ngSwitchWhen","ngSwitchDefault"];c.$inject=["$mdUtil"],l.$inject=["$q","$animateCss"],d.$inject=["$q","$animateCss"],u.$inject=["$animateCss"]}(),function(){function e(e){return{restrict:"E",compile:function(t){return t[0].setAttribute("role","list"),e}}}function n(e,n,r,i){var o=["md-checkbox","md-switch"];return{restrict:"E",controller:"MdListController",compile:function(a,s){function c(){for(var e,t,n=["md-switch","md-checkbox"],r=0;t=n[r];++r)if((e=a.find(t)[0])&&!e.hasAttribute("aria-label")){var i=a.find("p")[0];if(!i)return;e.setAttribute("aria-label","Toggle "+i.textContent)}}function l(e){var n;"div"==e?(n=t.element('<div class="md-no-style md-list-item-inner">'),n.append(a.contents()),a.addClass("md-proxy-focus")):(n=t.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>'),u(a[0],n[0]),n.children().eq(0).append(a.contents())),a[0].setAttribute("tabindex","-1"),a.append(n)}function d(){if(v&&!f(v)&&v.hasAttribute("ng-click")){e.expect(v,"aria-label");var n=t.element('<md-button class="md-secondary-container md-icon-button">');u(v,n[0]),v.setAttribute("tabindex","-1"),v.classList.remove("md-secondary"),n.append(v),v=n[0]}v&&(v.hasAttribute("ng-click")||s.ngClick&&m(v))&&(a.addClass("md-with-secondary"),a.append(v))}function u(e,n){var r=["ng-if","ng-click","aria-label","ng-disabled","ui-sref","href","ng-href","ng-attr-ui-sref"];t.forEach(r,function(t){e.hasAttribute(t)&&(n.setAttribute(t,e.getAttribute(t)),e.removeAttribute(t))})}function m(e){return-1!=o.indexOf(e.nodeName.toLowerCase())}function f(e){var t=e.nodeName.toUpperCase();return"MD-BUTTON"==t||"BUTTON"==t}function p(e,a,s,c){function l(e){for(var t=e.attributes,n=0;n<t.length;n++)if("ngClick"===s.$normalize(t[n].name))return!0;return!1}function d(){var e=a.children();e.length&&!e[0].hasAttribute("ng-click")&&t.forEach(o,function(e){t.forEach(f.querySelectorAll(e),function(e){m.push(e)})})}function u(){(1==m.length||p)&&(a.addClass("md-clickable"),p||c.attachRipple(e,t.element(a[0].querySelector(".md-no-style"))))}var m=[],f=a[0].firstElementChild,p=f&&l(f);d(),u(),a.hasClass("md-proxy-focus")&&m.length&&t.forEach(m,function(n){n=t.element(n),e.mouseActive=!1,n.on("mousedown",function(){e.mouseActive=!0,i(function(){e.mouseActive=!1},100)}).on("focus",function(){e.mouseActive===!1&&a.addClass("md-focused"),n.on("blur",function t(){a.removeClass("md-focused"),n.off("blur",t)})})}),p||m.length||f&&f.addEventListener("keypress",function(e){if("INPUT"!=e.target.nodeName&&"TEXTAREA"!=e.target.nodeName){var t=e.which||e.keyCode;t==n.KEY_CODE.SPACE&&f&&(f.click(),e.preventDefault(),e.stopPropagation())}}),a.off("click"),a.off("keypress"),1==m.length&&f&&a.children().eq(0).on("click",function(e){var n=r.getClosest(e.target,"BUTTON");!n&&f.contains(e.target)&&t.forEach(m,function(n){e.target===n||n.contains(e.target)||t.element(n).triggerHandler("click")})})}var h,g,v=a[0].querySelector(".md-secondary");if(a[0].setAttribute("role","listitem"),s.ngClick||s.ngHref||s.href||s.uiSref||s.ngAttrUiSref)l("button");else{for(var $,b=0;$=o[b];++b)if(g=a[0].querySelector($)){h=!0;break}h?l("div"):a[0].querySelector("md-button:not(.md-secondary):not(.md-exclude)")||a.addClass("md-no-proxy")}return d(),c(),p}}}function r(e,t,n){function r(e,t){var r={};n.attach(e,t,r)}var i=this;i.attachRipple=r}t.module("material.components.list",["material.core"]).controller("MdListController",r).directive("mdList",e).directive("mdListItem",n),e.$inject=["$mdTheming"],n.$inject=["$mdAria","$mdConstant","$mdUtil","$timeout"],r.$inject=["$scope","$element","$mdListInkRipple"]}(),function(){t.module("material.components.menu",["material.core","material.components.backdrop"])}(),function(){t.module("material.components.menuBar",["material.core","material.components.menu"])}(),function(){function e(e,r,i){function o(e){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),a}function a(o,a,f){function p(){f.$observe("value",function(e){var t=s(e);a.attr("aria-valuenow",t),b()==u&&v(t)}),f.$observe("mdMode",function(e){switch(e){case u:case m:M.removeClass("ng-hide"),E&&M.removeClass(E),M.addClass(E="md-mode-"+e);break;default:E&&M.removeClass(E),M.addClass("ng-hide"),E=n}})}function h(){y.css({width:100*$()+"px",height:100*$()+"px"}),y.children().eq(0).css(C({transform:r.supplant("translate(-50%, -50%) scale( {0} )",[$()])}))}function g(){if(t.isUndefined(f.mdMode)){var e=t.isDefined(f.value),n=e?u:m,o="Auto-adding the missing md-mode='{0}' to the ProgressCircular element";i.debug(r.supplant(o,[n])),a.attr("md-mode",n),f.mdMode=n}}function v(e){if(b()){w=w||t.element(a[0].querySelector(".md-left > .md-half-circle")),x=x||t.element(a[0].querySelector(".md-right > .md-half-circle")),A=A||t.element(a[0].querySelector(".md-gap"));var n=c({borderBottomColor:50>=e?"transparent !important":"",transition:50>=e?"":"borderBottomColor 0.1s linear"}),i=c({transition:50>=e?"transform 0.1s linear":"",transform:r.supplant("rotate({0}deg)",[50>=e?135:(e-50)/50*180+135])}),o=c({transition:e>=50?"transform 0.1s linear":"",transform:r.supplant("rotate({0}deg)",[e>=50?45:e/50*180-135])});w.css(C(i)),x.css(C(o)),A.css(C(n))}}function $(){if(!f.mdDiameter)return d;var e=/([0-9]*)%/.exec(f.mdDiameter),t=Math.max(0,e&&e[1]/100||parseFloat(f.mdDiameter));return t>1?t/l:t}function b(){var e=(f.mdMode||"").trim();if(e)switch(e){case u:case m:break;default:e=n}return e}e(a);var E,y=a,M=t.element(a.children()[0]),C=r.dom.animator.toCss;a.attr("md-mode",b()),h(),g(),p();var w,x,A}function s(e){return Math.max(0,Math.min(e||0,100))}function c(e){for(var t in e)e.hasOwnProperty(t)&&""==e[t]&&delete e[t];return e}var l=100,d=.5,u="determinate",m="indeterminate";return{restrict:"E",scope:!0,template:'<div class="md-scale-wrapper"><div class="md-spinner-wrapper"><div class="md-inner"><div class="md-gap"></div><div class="md-left"><div class="md-half-circle"></div></div><div class="md-right"><div class="md-half-circle"></div></div></div></div></div>',compile:o}}t.module("material.components.progressCircular",["material.core"]).directive("mdProgressCircular",e),e.$inject=["$mdTheming","$mdUtil","$log"]}(),function(){function e(e,r,i){function o(e,t,n){return e.attr("aria-valuemin",0),e.attr("aria-valuemax",100),e.attr("role","progressbar"),a}function a(o,a,m){function f(){m.$observe("value",function(e){var t=s(e);a.attr("aria-valuenow",t),h()!=u&&g(E,t)}),m.$observe("mdBufferValue",function(e){g(b,s(e))}),m.$observe("mdMode",function(e){switch(e){case u:case d:case c:case l:y.removeClass("ng-hide "+v),y.addClass(v="md-mode-"+e);break;default:v&&y.removeClass(v),y.addClass("ng-hide"),v=n}})}function p(){if(t.isUndefined(m.mdMode)){var e=t.isDefined(m.value),n=e?c:l,o="Auto-adding the missing md-mode='{0}' to the ProgressLinear element";i.debug(r.supplant(o,[n])),a.attr("md-mode",n),m.mdMode=n}}function h(){var e=(m.mdMode||"").trim();if(e)switch(e){case c:case l:case d:case u:break;default:e=n}return e}function g(e,n){if(h()){var i=r.supplant("translateX({0}%) scale({1},1)",[(n-100)/2,n/100]),o=$({transform:i});t.element(e).css(o)}}e(a);var v,$=r.dom.animator.toCss,b=t.element(a[0].querySelector(".md-bar1")),E=t.element(a[0].querySelector(".md-bar2")),y=t.element(a[0].querySelector(".md-container"));a.attr("md-mode",h()),p(),f()}function s(e){return Math.max(0,Math.min(e||0,100))}var c="determinate",l="indeterminate",d="buffer",u="query";return{restrict:"E",template:'<div class="md-container"><div class="md-dashed"></div><div class="md-bar md-bar1"></div><div class="md-bar md-bar2"></div></div>',compile:o}}t.module("material.components.progressLinear",["material.core"]).directive("mdProgressLinear",e),e.$inject=["$mdTheming","$mdUtil","$log"]}(),function(){function e(e,n,r,i){function o(o,a,s,c){function l(){a.hasClass("md-focused")||a.addClass("md-focused")}function d(r){var i=r.which||r.keyCode;if(i==n.KEY_CODE.ENTER||r.currentTarget==r.target)switch(i){case n.KEY_CODE.LEFT_ARROW:case n.KEY_CODE.UP_ARROW:r.preventDefault(),u.selectPrevious(),l();break;case n.KEY_CODE.RIGHT_ARROW:case n.KEY_CODE.DOWN_ARROW:r.preventDefault(),u.selectNext(),l();break;case n.KEY_CODE.ENTER:var o=t.element(e.getClosest(a[0],"form"));o.length>0&&o.triggerHandler("submit")}}r(a);var u=c[0],m=c[1]||e.fakeNgModel();u.init(m),o.mouseActive=!1,a.attr({role:"radiogroup",tabIndex:a.attr("tabindex")||"0"}).on("keydown",d).on("mousedown",function(e){o.mouseActive=!0,i(function(){o.mouseActive=!1},100)}).on("focus",function(){o.mouseActive===!1&&u.$element.addClass("md-focused")}).on("blur",function(){u.$element.removeClass("md-focused")})}function a(e){this._radioButtonRenderFns=[],this.$element=e}function s(){return{init:function(e){this._ngModelCtrl=e,this._ngModelCtrl.$render=t.bind(this,this.render)},add:function(e){this._radioButtonRenderFns.push(e)},remove:function(e){var t=this._radioButtonRenderFns.indexOf(e);-1!==t&&this._radioButtonRenderFns.splice(t,1)},render:function(){this._radioButtonRenderFns.forEach(function(e){e()})},setViewValue:function(e,t){this._ngModelCtrl.$setViewValue(e,t),this.render()},getViewValue:function(){return this._ngModelCtrl.$viewValue},selectNext:function(){return c(this.$element,1)},selectPrevious:function(){return c(this.$element,-1)},setActiveDescendant:function(e){this.$element.attr("aria-activedescendant",e)}}}function c(n,r){var i=e.iterator(n[0].querySelectorAll("md-radio-button"),!0);if(i.count()){var o=function(e){return!t.element(e).attr("disabled")},a=n[0].querySelector("md-radio-button.md-checked"),s=i[0>r?"previous":"next"](a,o)||i.first();t.element(s).triggerHandler("click")}}return a.prototype=s(),{restrict:"E",controller:["$element",a],require:["mdRadioGroup","?ngModel"],link:{pre:o}}}function n(e,t,n){function r(r,o,a,s){function c(e){if(!s)throw"RadioGroupController not found.";s.add(d),a.$observe("value",d),o.on("click",l).on("$destroy",function(){s.remove(d)})}function l(e){o[0].hasAttribute("disabled")||r.$apply(function(){s.setViewValue(a.value,e&&e.type)})}function d(){function e(e){"MD-RADIO-GROUP"!=o.parent()[0].nodeName&&o.parent()[e?"addClass":"removeClass"](i)}var t=s.getViewValue()==a.value;t!==m&&(m=t,o.attr("aria-checked",t),t?(e(!0),o.addClass(i),s.setActiveDescendant(o.attr("id"))):(e(!1),o.removeClass(i)))}function u(n,r){function i(){return a.id||"radio_"+t.nextUid()}r.ariaId=i(),n.attr({id:r.ariaId,role:"radio","aria-checked":"false"}),e.expectWithText(n,"aria-label")}var m;n(o),u(o,r),c()}var i="md-checked";return{restrict:"E",require:"^mdRadioGroup",transclude:!0,template:'<div class="md-container" md-ink-ripple md-ink-ripple-checkbox><div class="md-off"></div><div class="md-on"></div></div><div ng-transclude class="md-label"></div>',link:r}}t.module("material.components.radioButton",["material.core"]).directive("mdRadioGroup",e).directive("mdRadioButton",n),e.$inject=["$mdUtil","$mdConstant","$mdTheming","$timeout"],n.$inject=["$mdAria","$mdUtil","$mdTheming"]}(),function(){function e(e,r,i,o,a,s){function c(a,c){var l=t.element("<md-select-value><span></span></md-select-value>");if(l.append('<span class="md-select-icon" aria-hidden="true"></span>'),l.addClass("md-select-value"),l[0].hasAttribute("id")||l.attr("id","select_value_label_"+r.nextUid()),a.find("md-content").length||a.append(t.element("<md-content>").append(a.contents())),c.mdOnOpen&&(a.find("md-content").prepend(t.element('<div> <md-progress-circular md-mode="{{progressMode}}" ng-hide="$$loadingAsyncDone"></md-progress-circular></div>')),a.find("md-option").attr("ng-show","$$loadingAsyncDone")),c.name){var d=t.element('<select class="md-visually-hidden">');d.attr({name:"."+c.name,"ng-model":c.ngModel,"aria-hidden":"true",tabindex:"-1"});var u=a.find("md-option");t.forEach(u,function(e){var n=t.element("<option>"+e.innerHTML+"</option>");e.hasAttribute("ng-value")?n.attr("ng-value",e.getAttribute("ng-value")):e.hasAttribute("value")&&n.attr("value",e.getAttribute("value")),d.append(n)}),a.parent().append(d)}var m=t.isDefined(c.multiple)?"multiple":"",f='<div class="md-select-menu-container" aria-hidden="true"><md-select-menu {0}>{1}</md-select-menu></div>';return f=r.supplant(f,[m,a.html()]),a.empty().append(l),a.append(f),c.tabindex=c.tabindex||"0",function(a,c,l,d){function u(){var e=c.attr("aria-label")||c.attr("placeholder");!e&&y&&y.label&&(e=y.label.text()),b=e,o.expect(c,"aria-label",e)}function m(){T&&(N=N||T.find("md-select-menu").controller("mdSelectMenu"),M.setLabelText(N.selectedLabels()))}function f(){if(b){var e=N.selectedLabels({mode:"aria"});c.attr("aria-label",e.length?b+": "+e:b)}}function p(){y&&y.setHasValue(N.selectedLabels().length>0||(c[0].validity||{}).badInput)}function h(){if(T=t.element(c[0].querySelector(".md-select-menu-container")),S=a,c.attr("md-container-class")){var e=T[0].getAttribute("class")+" "+c.attr("md-container-class");T[0].setAttribute("class",e)}N=T.find("md-select-menu").controller("mdSelectMenu"),N.init(C,l.ngModel),c.on("$destroy",function(){T.remove()})}function g(e){var n=[32,13,38,40];if(-1!=n.indexOf(e.keyCode))e.preventDefault(),v(e);else if(e.keyCode<=90&&e.keyCode>=31){e.preventDefault();var r=N.optNodeForKeyboardSearch(e);if(!r)return;var i=t.element(r).controller("mdOption");N.isMultiple||N.deselect(Object.keys(N.selected)[0]),N.select(i.hashKey,i.value),N.refreshViewValue()}}function v(){S.isOpen=!0,c.attr("aria-expanded","true"),e.show({scope:S,preserveScope:!0,skipCompile:!0,element:T,target:c[0],selectCtrl:M,preserveElement:!0,hasBackdrop:!0,loadingAsync:l.mdOnOpen?a.$eval(l.mdOnOpen)||!0:!1})["finally"](function(){S.isOpen=!1,c.focus(),c.attr("aria-expanded","false"),C.$setTouched()})}var $,b,E=!0,y=d[0],M=d[1],C=d[2],w=d[3],x=c.find("md-select-value"),A=t.isDefined(l.readonly);if(y){var k=y.isErrorGetter||function(){return C.$invalid&&C.$touched};if(y.input)throw new Error("<md-input-container> can only have *one* child <input>, <textarea> or <select> element!");y.input=c,y.label||o.expect(c,"aria-label",c.attr("placeholder")),a.$watch(k,y.setInvalid)}var T,S,N;if(h(),i(c),l.name&&w){var _=c.parent()[0].querySelector('select[name=".'+l.name+'"]');r.nextTick(function(){var e=t.element(_).controller("ngModel");e&&w.$removeControl(e)})}w&&r.nextTick(function(){w.$setPristine()});var D=C.$render;C.$render=function(){D(),m(),f(),p()},l.$observe("placeholder",C.$render),M.setLabelText=function(e){M.setIsPlaceholder(!e);var t=l.placeholder||(y&&y.label?y.label.text():"");e=e||t||"";var n=x.children().eq(0);n.html(e)},M.setIsPlaceholder=function(e){e?(x.addClass("md-select-placeholder"),y&&y.label&&y.label.addClass("md-placeholder")):(x.removeClass("md-select-placeholder"),y&&y.label&&y.label.removeClass("md-placeholder"))},A||(c.on("focus",function(e){y&&y.element.hasClass("md-input-has-value")&&y.setFocused(!0)}),r.nextTick(function(){c.on("blur",function(){E&&(E=!1,C.$setUntouched()),S.isOpen||(y&&y.setFocused(!1),p())})})),M.triggerClose=function(){s(l.mdOnClose)(a)},a.$$postDigest(function(){u(),m(),f()}),a.$watch(N.selectedLabels,m);var H;l.$observe("ngMultiple",function(e){H&&H();var t=s(e);H=a.$watch(function(){return t(a)},function(e,t){(e!==n||t!==n)&&(e?c.attr("multiple","multiple"):c.removeAttr("multiple"),c.attr("aria-multiselectable",e?"true":"false"),T&&(N.setMultiple(e),D=C.$render,C.$render=function(){D(),m(),f(),p()},C.$render()))})}),l.$observe("disabled",function(e){t.isString(e)&&(e=!0),($===n||$!==e)&&($=e,e?(c.attr({tabindex:-1,"aria-disabled":"true"}),c.off("click",v),c.off("keydown",g)):(c.attr({tabindex:l.tabindex,"aria-disabled":"false"}),c.on("click",v),c.on("keydown",g)))}),l.disabled||l.ngDisabled||(c.attr({tabindex:l.tabindex,"aria-disabled":"false"}),c.on("click",v),c.on("keydown",g));var O={role:"listbox","aria-expanded":"false","aria-multiselectable":l.multiple===n||l.ngMultiple?"false":"true"};c[0].hasAttribute("id")||(O.id="select_"+r.nextUid());var I="select_container_"+r.nextUid();T.attr("id",I),O["aria-owns"]=I,c.attr(O),a.$on("$destroy",function(){e.destroy()["finally"](function(){y&&(y.setFocused(!1),y.setHasValue(!1),y.input=null),C.$setTouched()})})}}return{restrict:"E",require:["^?mdInputContainer","mdSelect","ngModel","?^form"],compile:c,controller:function(){}}}function r(e,r,i){function o(e,n,o,a){function s(e){(13==e.keyCode||32==e.keyCode)&&c(e)}function c(n){var i=r.getClosest(n.target,"md-option"),o=i&&t.element(i).data("$mdOptionController");if(i&&o){if(i.hasAttribute("disabled"))return n.stopImmediatePropagation(),!1;var a=l.hashGetter(o.value),s=t.isDefined(l.selected[a]);e.$apply(function(){l.isMultiple?s?l.deselect(a):l.select(a,o.value):s||(l.deselect(Object.keys(l.selected)[0]),l.select(a,o.value)),l.refreshViewValue()})}}var l=a[0];i(n),n.on("click",c),n.on("keypress",s)}function a(i,o,a){function s(){var e=d.ngModel.$modelValue||d.ngModel.$viewValue||[];if(t.isArray(e)){var n=Object.keys(d.selected),r=e.map(d.hashGetter),i=n.filter(function(e){return-1===r.indexOf(e)});i.forEach(d.deselect),r.forEach(function(t,n){d.select(t,e[n])})}}function l(){var e=d.ngModel.$viewValue||d.ngModel.$modelValue;Object.keys(d.selected).forEach(d.deselect),d.select(d.hashGetter(e),e)}var d=this;d.isMultiple=t.isDefined(o.multiple),d.selected={},d.options={},i.$watchCollection(function(){return d.options},function(){d.ngModel.$render()});var u,m;d.setMultiple=function(e){function n(e,n){return t.isArray(e||n||[])}var r=d.ngModel;m=m||r.$isEmpty,d.isMultiple=e,u&&u(),d.isMultiple?(r.$validators["md-multiple"]=n,r.$render=s,i.$watchCollection(d.modelBinding,function(e){n(e)&&s(e),d.ngModel.$setPristine()}),r.$isEmpty=function(e){return!e||0===e.length}):(delete r.$validators["md-multiple"],r.$render=l)};var f,p,h,g="",v=300;d.optNodeForKeyboardSearch=function(e){f&&clearTimeout(f),f=setTimeout(function(){f=n,g="",h=n,p=n},v),g+=String.fromCharCode(e.keyCode);var r=new RegExp("^"+g,"i");p||(p=a.find("md-option"),h=new Array(p.length),t.forEach(p,function(e,t){h[t]=e.textContent.trim()}));for(var i=0;i<h.length;++i)if(r.test(h[i]))return p[i]},d.init=function(n,r){if(d.ngModel=n,d.modelBinding=r,n.$options&&n.$options.trackBy){var o={},a=e(n.$options.trackBy);d.hashGetter=function(e,t){return o.$value=e,a(t||i,o)}}else d.hashGetter=function(e){return t.isObject(e)?"object_"+(e.$$mdSelectId||(e.$$mdSelectId=++c)):e};d.setMultiple(d.isMultiple)},d.selectedLabels=function(e){e=e||{};var t=e.mode||"html",n=r.nodesToArray(a[0].querySelectorAll("md-option[selected]"));if(n.length){var i;return"html"==t?i=function(e){return e.innerHTML}:"aria"==t&&(i=function(e){return e.hasAttribute("aria-label")?e.getAttribute("aria-label"):e.textContent}),n.map(i).join(", ")}return""},d.select=function(e,t){var n=d.options[e];n&&n.setSelected(!0),d.selected[e]=t},d.deselect=function(e){var t=d.options[e];t&&t.setSelected(!1),delete d.selected[e];
},d.addOption=function(e,n){if(t.isDefined(d.options[e]))throw new Error('Duplicate md-option values are not allowed in a select. Duplicate value "'+n.value+'" found.');d.options[e]=n,t.isDefined(d.selected[e])&&(d.select(e,n.value),d.refreshViewValue())},d.removeOption=function(e){delete d.options[e]},d.refreshViewValue=function(){var e,n=[];for(var r in d.selected)(e=d.options[r])?n.push(e.value):n.push(d.selected[r]);var i=d.ngModel.$options&&d.ngModel.$options.trackBy,o=d.isMultiple?n:n[0],a=d.ngModel.$modelValue;(i?t.equals(a,o):a==o)||(d.ngModel.$setViewValue(o),d.ngModel.$render())}}return a.$inject=["$scope","$attrs","$element"],{restrict:"E",require:["mdSelectMenu"],scope:!0,controller:a,link:{pre:o}}}function i(e,n){function r(e,n){return e.append(t.element('<div class="md-text">').append(e.contents())),e.attr("tabindex",n.tabindex||"0"),i}function i(r,i,o,a){function s(e,t,n){if(!d.hashGetter)return void(n||r.$$postDigest(function(){s(e,t,!0)}));var i=d.hashGetter(t,r),o=d.hashGetter(e,r);l.hashKey=o,l.value=e,d.removeOption(i,l),d.addOption(o,l)}function c(){var e={role:"option","aria-selected":"false"};i[0].hasAttribute("id")||(e.id="select_option_"+n.nextUid()),i.attr(e)}var l=a[0],d=a[1];t.isDefined(o.ngValue)?r.$watch(o.ngValue,s):t.isDefined(o.value)?s(o.value):r.$watch(function(){return i.text()},s),o.$observe("disabled",function(e){e?i.attr("tabindex","-1"):i.attr("tabindex","0")}),r.$$postDigest(function(){o.$observe("selected",function(e){t.isDefined(e)&&("string"==typeof e&&(e=!0),e?(d.isMultiple||d.deselect(Object.keys(d.selected)[0]),d.select(l.hashKey,l.value)):d.deselect(l.hashKey),d.refreshViewValue())})}),e.attach(r,i),c(),r.$on("$destroy",function(){d.removeOption(l.hashKey,l)})}function o(e){this.selected=!1,this.setSelected=function(t){t&&!this.selected?e.attr({selected:"selected","aria-selected":"true"}):!t&&this.selected&&(e.removeAttr("selected"),e.attr("aria-selected","false")),this.selected=t}}return o.$inject=["$element"],{restrict:"E",require:["mdOption","^^mdSelectMenu"],controller:o,compile:r}}function o(){function e(e,n){var r=e.find("label");r.length||(r=t.element("<label>"),e.prepend(r)),r.addClass("md-container-ignore"),n.label&&r.text(n.label)}return{restrict:"E",compile:e}}function a(e){function r(e,r,l,d,u,m,f,p,h){function g(e,t,n){function r(){return f(t,{addClass:"md-leave"}).start()}function i(){t.removeClass("md-active"),t.attr("aria-hidden","true"),t[0].style.display="none",$(n),!n.$destroy&&n.restoreFocus&&n.target.focus()}return n=n||{},n.cleanupInteraction(),n.cleanupResizing(),n.hideBackdrop(),n.$destroy===!0?i():r().then(i)}function v(i,o,a){function s(e,t,n){return n.parent.append(t),u(function(e,n){try{f(t,{removeClass:"md-leave",duration:0}).start().then(c).then(e)}catch(r){n(r)}})}function c(){return u(function(e){if(a.isRemoved)return u.reject(!1);var t=b(i,o,a);t.container.element.css(y.toCss(t.container.styles)),t.dropDown.element.css(y.toCss(t.dropDown.styles)),m(function(){o.addClass("md-active"),t.dropDown.element.css(y.toCss({transform:""})),v(a.focusedNode),e()})})}function g(e,t,n){return n.disableParentScroll&&!l.getClosest(n.target,"MD-DIALOG")?n.restoreScroll=l.disableScrollAround(n.element,n.parent):n.disableParentScroll=!1,n.hasBackdrop&&(n.backdrop=l.createBackdrop(e,"md-select-backdrop md-click-catcher"),p.enter(n.backdrop,h[0].body,null,{duration:0})),function(){n.backdrop&&n.backdrop.remove(),n.disableParentScroll&&n.restoreScroll(),delete n.restoreScroll}}function v(e){e&&!e.hasAttribute("disabled")&&e.focus()}function $(e,n){var r=o.find("md-select-menu");if(!n.target)throw new Error(l.supplant(E,[n.target]));t.extend(n,{isRemoved:!1,target:t.element(n.target),parent:t.element(n.parent),selectEl:r,contentEl:o.find("md-content"),optionNodes:r[0].getElementsByTagName("md-option")})}function M(){var e=function(e,t,n){return function(){if(!n.isRemoved){var r=b(e,t,n),i=r.container,o=r.dropDown;i.element.css(y.toCss(i.styles)),o.element.css(y.toCss(o.styles))}}}(i,o,a),n=t.element(d);return n.on("resize",e),n.on("orientationchange",e),function(){n.off("resize",e),n.off("orientationchange",e)}}function C(){a.loadingAsync&&!a.isRemoved&&(i.$$loadingAsyncDone=!1,i.progressMode="indeterminate",u.when(a.loadingAsync).then(function(){i.$$loadingAsyncDone=!0,i.progressMode="",delete a.loadingAsync}).then(function(){m(c)}))}function w(){function t(t){t.preventDefault(),t.stopPropagation(),a.restoreFocus=!1,l.nextTick(e.hide,!0)}function i(t){var n=r.KEY_CODE;switch(t.preventDefault(),t.stopPropagation(),t.keyCode){case n.UP_ARROW:return d();case n.DOWN_ARROW:return c();case n.SPACE:case n.ENTER:var i=l.getClosest(t.target,"md-option");i&&(m.triggerHandler({type:"click",target:i}),t.preventDefault()),u(t);break;case n.TAB:case n.ESCAPE:t.stopPropagation(),t.preventDefault(),a.restoreFocus=!0,l.nextTick(e.hide,!0);break;default:if(t.keyCode>=31&&t.keyCode<=90){var o=m.controller("mdSelectMenu").optNodeForKeyboardSearch(t);a.focusedNode=o||a.focusedNode,o&&o.focus()}}}function s(e){var t,r=l.nodesToArray(a.optionNodes),i=r.indexOf(a.focusedNode);do-1===i?i=0:"next"===e&&i<r.length-1?i++:"prev"===e&&i>0&&i--,t=r[i],t.hasAttribute("disabled")&&(t=n);while(!t&&i<r.length-1&&i>0);t&&t.focus(),a.focusedNode=t}function c(){s("next")}function d(){s("prev")}function u(t){function n(){var e=!1;if(t&&t.currentTarget.children.length>0){var n=t.currentTarget.children[0],r=n.scrollHeight>n.clientHeight;if(r&&n.children.length>0){var i=t.pageX-t.currentTarget.getBoundingClientRect().left;i>n.querySelector("md-option").offsetWidth&&(e=!0)}}return e}if(!(t&&"click"==t.type&&t.currentTarget!=m[0]||n())){var r=l.getClosest(t.target,"md-option");r&&r.hasAttribute&&!r.hasAttribute("disabled")&&(t.preventDefault(),t.stopPropagation(),f.isMultiple||(a.restoreFocus=!0,l.nextTick(function(){e.hide(f.ngModel.$viewValue)},!0)))}}if(!a.isRemoved){var m=a.selectEl,f=m.controller("mdSelectMenu")||{};return o.addClass("md-clickable"),a.backdrop&&a.backdrop.on("click",t),m.on("keydown",i),m.on("click",u),function(){a.backdrop&&a.backdrop.off("click",t),m.off("keydown",i),m.off("click",u),o.removeClass("md-clickable"),a.isRemoved=!0}}}return C(),$(i,a),a.hideBackdrop=g(i,o,a),s(i,o,a).then(function(e){return o.attr("aria-hidden","false"),a.alreadyOpen=!0,a.cleanupInteraction=w(),a.cleanupResizing=M(),e},a.hideBackdrop)}function $(e){var t=e.selectCtrl;if(t){var n=e.selectEl.controller("mdSelectMenu");t.setLabelText(n.selectedLabels()),t.triggerClose()}}function b(e,n,r){var u,m=n[0],f=r.target[0].children[0],p=h[0].body,g=r.selectEl[0],v=r.contentEl[0],$=p.getBoundingClientRect(),b=f.getBoundingClientRect(),E=!1,y={left:$.left+s,top:s,bottom:$.height-s,right:$.width-s-(l.floatingScrollbars()?16:0)},M={top:b.top-y.top,left:b.left-y.left,right:y.right-(b.left+b.width),bottom:y.bottom-(b.top+b.height)},C=$.width-2*s,w=g.querySelector("md-option[selected]"),x=g.getElementsByTagName("md-option"),A=g.getElementsByTagName("md-optgroup"),k=c(n,v),T=i(r.loadingAsync);u=T?v.firstElementChild||v:w?w:A.length?A[0]:x.length?x[0]:v.firstElementChild||v,v.offsetWidth>C?v.style["max-width"]=C+"px":v.style.maxWidth=null,E&&(v.style["min-width"]=b.width+"px"),k&&g.classList.add("md-overflow");var S=u;"MD-OPTGROUP"===(S.tagName||"").toUpperCase()&&(S=x[0]||v.firstElementChild||v,u=S),r.focusedNode=S,m.style.display="block";var N=g.getBoundingClientRect(),_=a(u);if(u){var D=d.getComputedStyle(u);_.paddingLeft=parseInt(D.paddingLeft,10)||0,_.paddingRight=parseInt(D.paddingRight,10)||0}if(k){var H=v.offsetHeight/2;v.scrollTop=_.top+_.height/2-H,M.top<H?v.scrollTop=Math.min(_.top,v.scrollTop+H-M.top):M.bottom<H&&(v.scrollTop=Math.max(_.top+_.height-N.height,v.scrollTop-H+M.bottom))}var O,I,R,P;E?(O=b.left,I=b.top+b.height,R="50% 0",I+N.height>y.bottom&&(I=b.top-N.height,R="50% 100%")):(O=b.left+_.left-_.paddingLeft+2,I=Math.floor(b.top+b.height/2-_.height/2-_.top+v.scrollTop)+2,R=_.left+b.width/2+"px "+(_.top+_.height/2-v.scrollTop)+"px 0px",P=Math.min(b.width+_.paddingLeft+_.paddingRight,C));var L=m.getBoundingClientRect(),F=Math.round(100*Math.min(b.width/N.width,1))/100,j=Math.round(100*Math.min(b.height/N.height,1))/100;return{container:{element:t.element(m),styles:{left:Math.floor(o(y.left,O,y.right-L.width)),top:Math.floor(o(y.top,I,y.bottom-L.height)),"min-width":P}},dropDown:{element:t.element(g),styles:{transformOrigin:R,transform:r.alreadyOpen?"":l.supplant("scale({0},{1})",[F,j])}}}}var E="$mdSelect.show() expected a target element in options.target but got '{0}'!",y=l.dom.animator;return{parent:"body",themable:!0,onShow:v,onRemove:g,hasBackdrop:!0,disableParentScroll:!0}}function i(e){return e&&t.isFunction(e.then)}function o(e,t,n){return Math.max(e,Math.min(t,n))}function a(e){return e?{left:e.offsetLeft,top:e.offsetTop,width:e.offsetWidth,height:e.offsetHeight}:{left:0,top:0,width:0,height:0}}function c(e,t){var n=!1;try{var r=e[0].style.display;e[0].style.display="block",n=t.scrollHeight>t.offsetHeight,e[0].style.display=r}finally{}return n}return r.$inject=["$mdSelect","$mdConstant","$mdUtil","$window","$q","$$rAF","$animateCss","$animate","$document"],e("$mdSelect").setDefaults({methods:["target"],options:r})}var s=8,c=0;t.module("material.components.select",["material.core","material.components.backdrop"]).directive("mdSelect",e).directive("mdSelectMenu",r).directive("mdOption",i).directive("mdOptgroup",o).provider("$mdSelect",a),e.$inject=["$mdSelect","$mdUtil","$mdTheming","$mdAria","$compile","$parse"],r.$inject=["$parse","$mdUtil","$mdTheming"],i.$inject=["$mdButtonInkRipple","$mdUtil"],a.$inject=["$$interimElementProvider"]}(),function(){function e(e,t){return["$mdUtil",function(n){return{restrict:"A",multiElement:!0,link:function(r,i,o){var a=r.$on("$md-resize-enable",function(){a(),r.$watch(o[e],function(e){!!e===t&&(n.nextTick(function(){r.$broadcast("$md-resize")}),n.dom.animator.waitTransitionEnd(i).then(function(){r.$broadcast("$md-resize")}))})})}}}]}t.module("material.components.showHide",["material.core"]).directive("ngShow",e("ngShow",!0)).directive("ngHide",e("ngHide",!1))}(),function(){function e(e,n){return function(r){function i(){return e.when(r).then(function(e){return s=e,e})}var o,a="SideNav '"+r+"' is not available!",s=e.get(r);return s||e.notFoundError(r),o={isOpen:function(){return s&&s.isOpen()},isLockedOpen:function(){return s&&s.isLockedOpen()},toggle:function(){return s?s.toggle():n.reject(a)},open:function(){return s?s.open():n.reject(a)},close:function(){return s?s.close():n.reject(a)},then:function(e){var r=s?n.when(s):i();return r.then(e||t.noop)}}}}function r(){return{restrict:"A",require:"^mdSidenav",link:function(e,t,n,r){}}}function i(e,r,i,o,a,s,c,l,d,u){function m(s,m,f,p){function h(e,t){s.isLockedOpen=e,e===t?m.toggleClass("md-locked-open",!!e):a[e?"addClass":"removeClass"](m,"md-locked-open"),A.toggleClass("md-locked-open",!!e)}function g(e){var t=r.findFocusTarget(m)||r.findFocusTarget(m,"[md-sidenav-focus]")||m,n=m.parent();return n[e?"on":"off"]("keydown",b),A[e?"on":"off"]("click",E),e&&(M=u[0].activeElement),v(e),C=d.all([e?a.enter(A,n):a.leave(A),a[e?"removeClass":"addClass"](m,"md-closed")]).then(function(){s.isOpen&&t&&t.focus()})}function v(e){var r=m.parent();e&&!y?(y=r.css("overflow"),r.css("overflow","hidden")):t.isDefined(y)&&(r.css("overflow",y),y=n)}function $(e){return s.isOpen==e?d.when(!0):d(function(t){s.isOpen=e,r.nextTick(function(){C.then(function(e){s.isOpen||(M&&M.focus(),M=null),t(e)})})})}function b(e){var t=e.keyCode===i.KEY_CODE.ESCAPE;return t?E(e):d.when(!0)}function E(e){return e.preventDefault(),p.close()}var y,M=null,C=d.when(!0),w=c(f.mdIsLockedOpen),x=function(){return w(s.$parent,{$media:function(t){return l.warn("$media is deprecated for is-locked-open. Use $mdMedia instead."),e(t)},$mdMedia:e})},A=r.createBackdrop(s,"md-sidenav-backdrop md-opaque ng-enter");o.inherit(A,m),m.on("$destroy",function(){A.remove(),p.destroy()}),s.$on("$destroy",function(){A.remove()}),s.$watch(x,h),s.$watch("isOpen",g),p.$toggleOpen=$}return{restrict:"E",scope:{isOpen:"=?mdIsOpen"},controller:"$mdSidenavController",compile:function(e){return e.addClass("md-closed"),e.attr("tabIndex","-1"),m}}}function o(e,t,n,r,i){var o=this;o.isOpen=function(){return!!e.isOpen},o.isLockedOpen=function(){return!!e.isLockedOpen},o.open=function(){return o.$toggleOpen(!0)},o.close=function(){return o.$toggleOpen(!1)},o.toggle=function(){return o.$toggleOpen(!e.isOpen)},o.$toggleOpen=function(t){return i.when(e.isOpen=t)},o.destroy=r.register(o,n.mdComponentId)}t.module("material.components.sidenav",["material.core","material.components.backdrop"]).factory("$mdSidenav",e).directive("mdSidenav",i).directive("mdSidenavFocus",r).controller("$mdSidenavController",o),e.$inject=["$mdComponentRegistry","$q"],i.$inject=["$mdMedia","$mdUtil","$mdConstant","$mdTheming","$animate","$compile","$parse","$log","$q","$document"],o.$inject=["$scope","$element","$attrs","$mdComponentRegistry","$q"]}(),function(){function e(e,n,r,i,o,a,s,c,l){function d(e,t){return e.attr({tabIndex:0,role:"slider"}),r.expect(e,"aria-label"),u}function u(r,d,u,m){function f(){b(),C(),$()}function p(e){K=parseFloat(e),d.attr("aria-valuemin",e),f()}function h(e){G=parseFloat(e),d.attr("aria-valuemax",e),f()}function g(e){X=parseFloat(e),$()}function v(e){d.attr("aria-disabled",!!e)}function $(){if(t.isDefined(u.mdDiscrete)&&!t.isUndefined(X)){if(0>=X){var e="Slider step value must be greater than zero when in discrete mode";throw l.error(e),new Error(e)}var r=Math.floor((G-K)/X);if(!Z){Z=t.element('<canvas style="position:absolute;">'),q.append(Z);var i=n.getComputedStyle(q[0]);J=Z[0].getContext("2d"),J.fillStyle=i.backgroundColor||"black"}var o=E();Z[0].width=o.width,Z[0].height=o.height;for(var a,s=0;r>=s;s++)a=Math.floor(o.width*(s/r)),J.fillRect(a-1,0,2,o.height)}}function b(){Q=B[0].getBoundingClientRect()}function E(){return z(),Q}function y(e){if(!d[0].hasAttribute("disabled")){var t;e.keyCode===o.KEY_CODE.LEFT_ARROW?t=-X:e.keyCode===o.KEY_CODE.RIGHT_ARROW&&(t=X),t&&((e.metaKey||e.ctrlKey||e.altKey)&&(t*=4),e.preventDefault(),e.stopPropagation(),r.$evalAsync(function(){M(m.$viewValue+t)}))}}function M(e){m.$setViewValue(w(x(e)))}function C(){isNaN(m.$viewValue)&&(m.$viewValue=m.$modelValue);var e=(m.$viewValue-K)/(G-K);r.modelValue=m.$viewValue,d.attr("aria-valuenow",m.$viewValue),A(e),j.text(m.$viewValue)}function w(e){return t.isNumber(e)?Math.max(K,Math.min(G,e)):void 0}function x(e){if(t.isNumber(e)){var n=Math.round((e-K)/X)*X+K;return Math.round(1e3*n)/1e3}}function A(e){var t=100*e+"%";U.css("width",t),V.css("left",t),d.toggleClass("md-min",0===e),d.toggleClass("md-max",1===e)}function k(e){if(!L()){d.addClass("md-active"),d[0].focus(),b();var t=R(I(e.pointer.x)),n=w(x(t));r.$apply(function(){M(n),A(P(n))})}}function T(e){if(!L()){d.removeClass("md-dragging md-active");var t=R(I(e.pointer.x)),n=w(x(t));r.$apply(function(){M(n),C()})}}function S(e){L()||(ee=!0,e.stopPropagation(),d.addClass("md-dragging"),D(e))}function N(e){ee&&(e.stopPropagation(),D(e))}function _(e){ee&&(e.stopPropagation(),ee=!1)}function D(e){te?O(e.pointer.x):H(e.pointer.x)}function H(e){r.$evalAsync(function(){M(R(I(e)))})}function O(e){var t=R(I(e)),n=w(x(t));A(I(e)),j.text(n)}function I(e){return Math.max(0,Math.min(1,(e-Q.left)/Q.width))}function R(e){return K+e*(G-K)}function P(e){return(e-K)/(G-K)}a(d),m=m||{$setViewValue:function(e){this.$viewValue=e,this.$viewChangeListeners.forEach(function(e){e()})},$parsers:[],$formatters:[],$viewChangeListeners:[]};var L=t.noop;null!=u.disabled?L=function(){return!0}:u.ngDisabled&&(L=t.bind(null,c(u.ngDisabled),r.$parent));var F=t.element(d[0].querySelector(".md-thumb")),j=t.element(d[0].querySelector(".md-thumb-text")),V=F.parent(),B=t.element(d[0].querySelector(".md-track-container")),U=t.element(d[0].querySelector(".md-track-fill")),q=t.element(d[0].querySelector(".md-track-ticks")),z=i.throttle(b,5e3);t.isDefined(u.min)?u.$observe("min",p):p(0),t.isDefined(u.max)?u.$observe("max",h):h(100),t.isDefined(u.step)?u.$observe("step",g):g(1);var W=t.noop;u.ngDisabled&&(W=r.$parent.$watch(u.ngDisabled,v)),s.register(d,"drag"),d.on("keydown",y).on("$md.pressdown",k).on("$md.pressup",T).on("$md.dragstart",S).on("$md.drag",N).on("$md.dragend",_),setTimeout(f,0);var Y=e.throttle(f);t.element(n).on("resize",Y),r.$on("$destroy",function(){t.element(n).off("resize",Y),W()}),m.$render=C,m.$viewChangeListeners.push(C),m.$formatters.push(w),m.$formatters.push(x);var K,G,X,Z,J,Q={};b();var ee=!1,te=t.isDefined(u.mdDiscrete)}return{scope:{},require:"?ngModel",template:'<div class="md-slider-wrapper"><div class="md-track-container"><div class="md-track"></div><div class="md-track md-track-fill"></div><div class="md-track-ticks"></div></div><div class="md-thumb-container"><div class="md-thumb"></div><div class="md-focus-thumb"></div><div class="md-focus-ring"></div><div class="md-sign"><span class="md-thumb-text"></span></div><div class="md-disabled-thumb"></div></div></div>',compile:d}}t.module("material.components.slider",["material.core"]).directive("mdSlider",e),e.$inject=["$$rAF","$window","$mdAria","$mdUtil","$mdConstant","$mdTheming","$mdGesture","$parse","$log"]}(),function(){function e(e,r,i,o){function a(e){function t(e,t){t.addClass("md-sticky-clone");var n={element:e,clone:t};return h.items.push(n),o.nextTick(function(){f.prepend(n.clone)}),p(),function(){h.items.forEach(function(t,n){t.element[0]===e[0]&&(h.items.splice(n,1),t.clone.remove())}),p()}}function a(){h.items.forEach(s),h.items=h.items.sort(function(e,t){return e.top<t.top?-1:1});for(var e,t=f.prop("scrollTop"),n=h.items.length-1;n>=0;n--)if(t>h.items[n].top){e=h.items[n];break}d(e)}function s(e){var t=e.element[0];for(e.top=0,e.left=0;t&&t!==f[0];)e.top+=t.offsetTop,e.left+=t.offsetLeft,t=t.offsetParent;e.height=e.element.prop("offsetHeight"),e.clone.css("margin-left",e.left+"px"),o.floatingScrollbars()&&e.clone.css("margin-right","0")}function l(){var e=f.prop("scrollTop"),t=e>(l.prevScrollTop||0);if(l.prevScrollTop=e,0===e)return void d(null);if(t){if(h.next&&h.next.top<=e)return void d(h.next);if(h.current&&h.next&&h.next.top-e<=h.next.height)return void m(h.current,e+(h.next.top-h.next.height-e))}if(!t){if(h.current&&h.prev&&e<h.current.top)return void d(h.prev);if(h.next&&h.current&&e>=h.next.top-h.current.height)return void m(h.current,e+(h.next.top-e-h.current.height))}h.current&&m(h.current,e)}function d(e){if(h.current!==e){h.current&&(m(h.current,null),u(h.current,null)),e&&u(e,"active"),h.current=e;var t=h.items.indexOf(e);h.next=h.items[t+1],h.prev=h.items[t-1],u(h.next,"next"),u(h.prev,"prev")}}function u(e,t){e&&e.state!==t&&(e.state&&(e.clone.attr("sticky-prev-state",e.state),e.element.attr("sticky-prev-state",e.state)),e.clone.attr("sticky-state",t),e.element.attr("sticky-state",t),e.state=t)}function m(e,t){e&&(null===t||t===n?e.translateY&&(e.translateY=null,e.clone.css(r.CSS.TRANSFORM,"")):(e.translateY=t,e.clone.css(r.CSS.TRANSFORM,"translate3d("+e.left+"px,"+t+"px,0)")))}var f=e.$element,p=i.throttle(a);c(f),f.on("$scrollstart",p),f.on("$scroll",l);var h;return h={prev:null,current:null,next:null,items:[],add:t,refreshElements:a}}function s(n){var r,i=t.element("<div>");e[0].body.appendChild(i[0]);for(var o=["sticky","-webkit-sticky"],a=0;a<o.length;++a)if(i.css({position:o[a],top:0,"z-index":2}),i.css("position")==o[a]){r=o[a];break}return i.remove(),r}function c(e){function t(){+o.now()-r>a?(n=!1,e.triggerHandler("$scrollend")):(e.triggerHandler("$scroll"),i.throttle(t))}var n,r,a=200;e.on("scroll touchmove",function(){n||(n=!0,i.throttle(t),e.triggerHandler("$scrollstart")),e.triggerHandler("$scroll"),r=+o.now()})}var l=s();return function(e,t,n){var r=t.controller("mdContent");if(r)if(l)t.css({position:l,top:0,"z-index":2});else{var i=r.$element.data("$$sticky");i||(i=a(r),r.$element.data("$$sticky",i));var o=i.add(t,n||t.clone());e.$on("$destroy",o)}}}t.module("material.components.sticky",["material.core","material.components.content"]).factory("$mdSticky",e),e.$inject=["$document","$mdConstant","$$rAF","$mdUtil"]}(),function(){function e(e,n,r,i){return{restrict:"E",replace:!0,transclude:!0,template:'<div class="md-subheader">  <div class="md-subheader-inner">    <span class="md-subheader-content"></span>  </div></div>',link:function(o,a,s,c,l){function d(e){return t.element(e[0].querySelector(".md-subheader-content"))}r(a);var u=a[0].outerHTML;l(o,function(e){d(a).append(e)}),a.hasClass("md-no-sticky")||l(o,function(t){var r='<div class="md-subheader-wrapper">'+u+"</div>",s=n(r)(o);e(o,a,s),i.nextTick(function(){d(s).append(t)})})}}}t.module("material.components.subheader",["material.core","material.components.sticky"]).directive("mdSubheader",e),e.$inject=["$mdSticky","$compile","$mdTheming","$mdUtil"]}(),function(){function e(e){function t(e){function t(t,i,o){var a=e(o[n]);i.on(r,function(e){t.$apply(function(){a(t,{$event:e})})})}return{restrict:"A",link:t}}var n="md"+e,r="$md."+e.toLowerCase();return t.$inject=["$parse"],t}t.module("material.components.swipe",["material.core"]).directive("mdSwipeLeft",e("SwipeLeft")).directive("mdSwipeRight",e("SwipeRight")).directive("mdSwipeUp",e("SwipeUp")).directive("mdSwipeDown",e("SwipeDown"))}(),function(){function e(e,n,r,i,o,a){function s(e,s){var l=c.compile(e,s);return e.addClass("md-dragging"),function(e,s,c,d){function u(t){h&&h(e)||(t.stopPropagation(),s.addClass("md-dragging"),$={width:g.prop("offsetWidth")},s.removeClass("transition"))}function m(e){if($){e.stopPropagation(),e.srcEvent&&e.srcEvent.preventDefault();var t=e.pointer.distanceX/$.width,n=d.$viewValue?1+t:t;n=Math.max(0,Math.min(1,n)),g.css(r.CSS.TRANSFORM,"translate3d("+100*n+"%,0,0)"),$.translate=n}}function f(e){if($){e.stopPropagation(),s.removeClass("md-dragging"),g.css(r.CSS.TRANSFORM,"");var t=d.$viewValue?$.translate>.5:$.translate<.5;t&&p(!d.$viewValue),$=null}}function p(t){e.$apply(function(){d.$setViewValue(t),d.$render()})}d=d||n.fakeNgModel();var h=null;null!=c.disabled?h=function(){return!0}:c.ngDisabled&&(h=i(c.ngDisabled));var g=t.element(s[0].querySelector(".md-thumb-container")),v=t.element(s[0].querySelector(".md-container"));o(function(){s.removeClass("md-dragging")}),l(e,s,c,d),h&&e.$watch(h,function(e){s.attr("tabindex",e?-1:0)}),a.register(v,"drag"),v.on("$md.dragstart",u).on("$md.drag",m).on("$md.dragend",f);var $}}var c=e[0];return{restrict:"E",priority:210,transclude:!0,template:'<div class="md-container"><div class="md-bar"></div><div class="md-thumb-container"><div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div></div></div><div ng-transclude class="md-label"></div>',require:"?ngModel",compile:s}}t.module("material.components.switch",["material.core","material.components.checkbox"]).directive("mdSwitch",e),e.$inject=["mdCheckboxDirective","$mdUtil","$mdConstant","$parse","$$rAF","$mdGesture"]}(),function(){t.module("material.components.tabs",["material.core","material.components.icon"])}(),function(){function e(e){return{restrict:"E",link:function(t,n,r){t.$on("$destroy",function(){e.destroy()})}}}function n(e){function n(e){i=e}function r(e,n,r,o){function a(t,a,s){i=s.textContent||s.content;var d=!o("gt-sm");return a=r.extractElementByName(a,"md-toast",!0),s.onSwipe=function(e,t){var i=e.type.replace("$md.",""),o=i.replace("swipe","");"down"===o&&-1!=s.position.indexOf("top")&&!d||"up"===o&&(-1!=s.position.indexOf("bottom")||d)||("left"!==o&&"right"!==o||!d)&&(a.addClass("md-"+i),r.nextTick(n.cancel))},s.openClass=c(s.position),s.parent.addClass(s.openClass),r.hasComputedStyle(s.parent,"position","static")&&s.parent.css("position","relative"),a.on(l,s.onSwipe),a.addClass(d?"md-bottom":s.position.split(" ").map(function(e){return"md-"+e}).join(" ")),s.parent&&s.parent.addClass("md-toast-animating"),e.enter(a,s.parent).then(function(){s.parent&&s.parent.removeClass("md-toast-animating")})}function s(t,n,i){return n.off(l,i.onSwipe),i.parent&&i.parent.addClass("md-toast-animating"),i.openClass&&i.parent.removeClass(i.openClass),(1==i.$destroy?n.remove():e.leave(n)).then(function(){i.parent&&i.parent.removeClass("md-toast-animating"),r.hasComputedStyle(i.parent,"position","static")&&i.parent.css("position","")})}function c(e){return o("gt-sm")?"md-toast-open-"+(e.indexOf("top")>-1?"top":"bottom"):"md-toast-open-bottom"}var l="$md.swipeleft $md.swiperight $md.swipeup $md.swipedown";return{onShow:a,onRemove:s,position:"bottom left",themable:!0,hideDelay:3e3,autoWrap:!0,transformTemplate:function(e,n){var r=n.autoWrap&&e&&!/md-toast-content/g.test(e);if(r){var i=t.element(e),o='<div class="md-toast-content">'+i.html()+"</div>";return i.empty().append(o),i[0].outerHTML}return r?'<div class="md-toast-content">'+e+"</div>":e||""}}}var i,o="ok",a=e("$mdToast").setDefaults({methods:["position","hideDelay","capsule","parent"],options:r}).addPreset("simple",{argOption:"textContent",methods:["textContent","content","action","highlightAction","theme","parent"],options:["$mdToast","$mdTheming",function(e,t){var n={template:'<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">  <div class="md-toast-content">    <span flex role="alert" aria-relevant="all" aria-atomic="true">      {{ toast.content }}    </span>    <md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">      {{ toast.action }}    </md-button>  </div></md-toast>',controller:["$scope",function(t){var n=this;t.$watch(function(){return i},function(){n.content=i}),this.resolve=function(){e.hide(o)}}],theme:t.defaultTheme(),controllerAs:"toast",bindToController:!0};return n}]}).addMethod("updateTextContent",n).addMethod("updateContent",n);return r.$inject=["$animate","$mdToast","$mdUtil","$mdMedia"],a}t.module("material.components.toast",["material.core","material.components.button"]).directive("mdToast",e).provider("$mdToast",n),e.$inject=["$mdToast"],n.$inject=["$$interimElementProvider"]}(),function(){function e(e,n,r,i,o){var a=t.bind(null,r.supplant,"translate3d(0,{0}px,0)");return{template:"",restrict:"E",link:function(s,c,l){function d(){function i(e){var t=c.parent().find("md-content");!h&&t.length&&d(null,t),e=s.$eval(e),e===!1?g():g=m()}function d(e,t){t&&c.parent()[0]===t.parent()[0]&&(h&&h.off("scroll",E),h=t,g=m())}function u(e){var t=e?e.target.scrollTop:$;y(),v=Math.min(p/b,Math.max(0,v+t-$)),c.css(n.CSS.TRANSFORM,a([-v*b])),h.css(n.CSS.TRANSFORM,a([(p-v)*b])),$=t,r.nextTick(function(){var e=c.hasClass("md-whiteframe-z1");e&&!v?o.removeClass(c,"md-whiteframe-z1"):!e&&v&&o.addClass(c,"md-whiteframe-z1")})}function m(){return h?(h.on("scroll",E),h.attr("scroll-shrink","true"),e(f),function(){h.off("scroll",E),h.attr("scroll-shrink","false"),e(f)}):t.noop}function f(){p=c.prop("offsetHeight");var e=-p*b+"px";h.css({"margin-top":e,"margin-bottom":e}),u()}var p,h,g=t.noop,v=0,$=0,b=l.mdShrinkSpeedFactor||.5,E=e.throttle(u),y=r.debounce(f,5e3);s.$on("$mdContentLoaded",d),l.$observe("mdScrollShrink",i),l.ngShow&&s.$watch(l.ngShow,f),l.ngHide&&s.$watch(l.ngHide,f),s.$on("$destroy",g)}i(c),t.isDefined(l.mdScrollShrink)&&d()}}}t.module("material.components.toolbar",["material.core","material.components.content"]).directive("mdToolbar",e),e.$inject=["$$rAF","$mdConstant","$mdUtil","$mdTheming","$animate"]}(),function(){function e(e,n,r,i,o,a,s,c,l){function d(s,d,f){function p(){t.isDefined(f.mdDelay)||(s.delay=u)}function h(){var e="center top";switch(s.direction){case"left":e="right center";break;case"right":e="left center";break;case"top":e="center bottom";break;case"bottom":e="center top"}A.css("transform-origin",e)}function g(){s.$on("$destroy",function(){s.visible=!1,d.remove(),t.element(n).off("resize",T)}),s.$watch("visible",function(e){e?y():M()}),s.$watch("direction",C)}function v(){x.attr("aria-label")||x.text().trim()||x.attr("aria-label",d.text().trim())}function $(){d.detach(),d.attr("role","tooltip")}function b(){function e(){E(!1)}var r=!1,o=t.element(n);if(x[0]&&"MutationObserver"in n){var a=new MutationObserver(function(e){e.forEach(function(e){"disabled"===e.attributeName&&x[0].disabled&&(E(!1),s.$digest())})});a.observe(x[0],{attributes:!0})}var c=function(){l=document.activeElement===x[0]},l=!1;o.on("blur",c),o.on("resize",T),document.addEventListener("scroll",e,!0),s.$on("$destroy",function(){o.off("blur",c),o.off("resize",T),document.removeEventListener("scroll",e,!0),a&&a.disconnect()});var d=function(e){return"focus"===e.type&&l?void(l=!1):(x.on("blur mouseleave touchend touchcancel",u),void E(!0))},u=function(){var e=s.hasOwnProperty("autohide")?s.autohide:f.hasOwnProperty("mdAutohide");(e||r||i[0].activeElement!==x[0])&&(x.off("blur mouseleave touchend touchcancel",u),x.triggerHandler("blur"),E(!1)),r=!1};x.on("mousedown",function(){r=!0}),x.on("focus mouseenter touchstart",d)}function E(t){E.value=!!t,E.queued||(t?(E.queued=!0,e(function(){s.visible=E.value,E.queued=!1},s.delay)):o.nextTick(function(){s.visible=!1}))}function y(){return k.append(d),o.hasComputedStyle(d,"display","none")?(s.visible=!1,void d.detach()):(C(),void t.forEach([d,A],function(e){c.addClass(e,"md-show")}))}function M(){var e=[];t.forEach([d,A],function(t){t.parent()&&t.hasClass("md-show")&&e.push(c.removeClass(t,"md-show"))}),l.all(e).then(function(){s.visible||d.detach()})}function C(){s.visible&&(h(),w())}function w(){function e(e){var t={left:e.left,top:e.top};return t.left=Math.min(t.left,k.prop("scrollWidth")-n.width-m),t.left=Math.max(t.left,m),t.top=Math.min(t.top,k.prop("scrollHeight")-n.height-m),t.top=Math.max(t.top,m),t}function t(e){return"left"===e?{left:r.left-n.width-m,top:r.top+r.height/2-n.height/2}:"right"===e?{left:r.left+r.width+m,top:r.top+r.height/2-n.height/2}:"top"===e?{left:r.left+r.width/2-n.width/2,top:r.top-n.height-m}:{left:r.left+r.width/2-n.width/2,top:r.top+r.height+m}}var n=o.offsetRect(d,k),r=o.offsetRect(x,k),i=t(s.direction),a=d.prop("offsetParent");s.direction?i=e(i):a&&i.top>a.scrollHeight-n.height-m&&(i=e(t("top"))),d.css({left:i.left+"px",top:i.top+"px"})}a(d);var x=o.getParentWithPointerEvents(d),A=t.element(d[0].getElementsByClassName("md-content")[0]),k=t.element(document.body),T=r.throttle(function(){C()});c.pin&&c.pin(d,x),p(),$(),b(),h(),g(),v()}var u=0,m=8;return{restrict:"E",transclude:!0,priority:210,template:'<div class="md-content" ng-transclude></div>',scope:{delay:"=?mdDelay",visible:"=?mdVisible",autohide:"=?mdAutohide",direction:"@?mdDirection"},link:d}}t.module("material.components.tooltip",["material.core"]).directive("mdTooltip",e),e.$inject=["$timeout","$window","$$rAF","$document","$mdUtil","$mdTheming","$rootElement","$animate","$q"]}(),function(){function e(){return{controller:r,template:n,compile:function(e,t){e.addClass("md-virtual-repeat-container").addClass(t.hasOwnProperty("mdOrientHorizontal")?"md-orient-horizontal":"md-orient-vertical")}}}function n(e){return'<div class="md-virtual-repeat-scroller"><div class="md-virtual-repeat-sizer"></div><div class="md-virtual-repeat-offsetter">'+e[0].innerHTML+"</div></div>"}function r(e,n,r,i,o,a,s,c){this.$rootScope=i,this.$scope=a,this.$element=s,this.$attrs=c,this.size=0,this.scrollSize=0,this.scrollOffset=0,this.horizontal=this.$attrs.hasOwnProperty("mdOrientHorizontal"),this.repeater=null,this.autoShrink=this.$attrs.hasOwnProperty("mdAutoShrink"),this.autoShrinkMin=parseInt(this.$attrs.mdAutoShrinkMin,10)||0,this.originalSize=null,this.offsetSize=parseInt(this.$attrs.mdOffsetSize,10)||0,this.oldElementSize=null,this.$attrs.mdTopIndex?(this.bindTopIndex=r(this.$attrs.mdTopIndex),this.topIndex=this.bindTopIndex(this.$scope),t.isDefined(this.topIndex)||(this.topIndex=0,this.bindTopIndex.assign(this.$scope,0)),this.$scope.$watch(this.bindTopIndex,t.bind(this,function(e){e!==this.topIndex&&this.scrollToIndex(e)}))):this.topIndex=0,this.scroller=s[0].getElementsByClassName("md-virtual-repeat-scroller")[0],this.sizer=this.scroller.getElementsByClassName("md-virtual-repeat-sizer")[0],
this.offsetter=this.scroller.getElementsByClassName("md-virtual-repeat-offsetter")[0];var l=t.bind(this,this.updateSize);e(t.bind(this,function(){l();var e=n.debounce(l,10,null,!1),r=t.element(o);this.size||e(),r.on("resize",e),a.$on("$destroy",function(){r.off("resize",e)}),a.$emit("$md-resize-enable"),a.$on("$md-resize",l)}))}function i(e){return{controller:o,priority:1e3,require:["mdVirtualRepeat","^^mdVirtualRepeatContainer"],restrict:"A",terminal:!0,transclude:"element",compile:function(t,n){var r=n.mdVirtualRepeat,i=r.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/),o=i[1],a=e(i[2]),s=n.mdExtraName&&e(n.mdExtraName);return function(e,t,n,r,i){r[0].link_(r[1],i,o,a,s)}}}}function o(e,n,r,i,o,a,s){this.$scope=e,this.$element=n,this.$attrs=r,this.$browser=i,this.$document=o,this.$rootScope=a,this.$$rAF=s,this.onDemand=r.hasOwnProperty("mdOnDemand"),this.browserCheckUrlChange=i.$$checkUrlChange,this.newStartIndex=0,this.newEndIndex=0,this.newVisibleEnd=0,this.startIndex=0,this.endIndex=0,this.itemSize=e.$eval(r.mdItemSize)||null,this.isFirstRender=!0,this.isVirtualRepeatUpdating_=!1,this.itemsLength=0,this.unwatchItemSize_=t.noop,this.blocks={},this.pooledBlocks=[]}function a(e){if(!t.isFunction(e.getItemAtIndex)||!t.isFunction(e.getLength))throw Error("When md-on-demand is enabled, the Object passed to md-virtual-repeat must implement functions getItemAtIndex() and getLength() ");this.model=e}t.module("material.components.virtualRepeat",["material.core","material.components.showHide"]).directive("mdVirtualRepeatContainer",e).directive("mdVirtualRepeat",i);var s=1533917,c=3;r.$inject=["$$rAF","$mdUtil","$parse","$rootScope","$window","$scope","$element","$attrs"],r.prototype.register=function(e){this.repeater=e,t.element(this.scroller).on("scroll wheel touchmove touchend",t.bind(this,this.handleScroll_))},r.prototype.isHorizontal=function(){return this.horizontal},r.prototype.getSize=function(){return this.size},r.prototype.setSize_=function(e){var t=this.getDimensionName_();this.size=e,this.$element[0].style[t]=e+"px"},r.prototype.unsetSize_=function(){this.$element[0].style[this.getDimensionName_()]=this.oldElementSize,this.oldElementSize=null},r.prototype.updateSize=function(){this.originalSize||(this.size=this.isHorizontal()?this.$element[0].clientWidth:this.$element[0].clientHeight,this.handleScroll_(),this.repeater&&this.repeater.containerUpdated())},r.prototype.getScrollSize=function(){return this.scrollSize},r.prototype.getDimensionName_=function(){return this.isHorizontal()?"width":"height"},r.prototype.sizeScroller_=function(e){var t=this.getDimensionName_(),n=this.isHorizontal()?"height":"width";if(this.sizer.innerHTML="",s>e)this.sizer.style[t]=e+"px";else{this.sizer.style[t]="auto",this.sizer.style[n]="auto";var r=Math.floor(e/s),i=document.createElement("div");i.style[t]=s+"px",i.style[n]="1px";for(var o=0;r>o;o++)this.sizer.appendChild(i.cloneNode(!1));i.style[t]=e-r*s+"px",this.sizer.appendChild(i)}},r.prototype.autoShrink_=function(e){var t=Math.max(e,this.autoShrinkMin*this.repeater.getItemSize());if(this.autoShrink&&t!==this.size){null===this.oldElementSize&&(this.oldElementSize=this.$element[0].style[this.getDimensionName_()]);var n=this.originalSize||this.size;!n||n>t?(this.originalSize||(this.originalSize=this.size),this.setSize_(t)):null!==this.originalSize&&(this.unsetSize_(),this.originalSize=null,this.updateSize()),this.repeater.containerUpdated()}},r.prototype.setScrollSize=function(e){var t=e+this.offsetSize;this.scrollSize!==t&&(this.sizeScroller_(t),this.autoShrink_(t),this.scrollSize=t)},r.prototype.getScrollOffset=function(){return this.scrollOffset},r.prototype.scrollTo=function(e){this.scroller[this.isHorizontal()?"scrollLeft":"scrollTop"]=e,this.handleScroll_()},r.prototype.scrollToIndex=function(e){var t=this.repeater.getItemSize(),n=this.repeater.itemsLength;e>n&&(e=n-1),this.scrollTo(t*e)},r.prototype.resetScroll=function(){this.scrollTo(0)},r.prototype.handleScroll_=function(){var e=this.isHorizontal()?this.scroller.scrollLeft:this.scroller.scrollTop;if(e!==this.scrollOffset){var t=this.repeater.getItemSize();if(t){var n=Math.max(0,Math.floor(e/t)-c),r=this.isHorizontal()?"translateX(":"translateY(";if(r+=n*t+"px)",this.scrollOffset=e,this.offsetter.style.webkitTransform=r,this.offsetter.style.transform=r,this.bindTopIndex){var i=Math.floor(e/t);i!==this.topIndex&&i<this.repeater.itemsLength&&(this.topIndex=i,this.bindTopIndex.assign(this.$scope,i),this.$rootScope.$$phase||this.$scope.$digest())}this.repeater.containerUpdated()}}},i.$inject=["$parse"],o.$inject=["$scope","$element","$attrs","$browser","$document","$rootScope","$$rAF"],o.Block,o.prototype.link_=function(e,n,r,i,o){this.container=e,this.transclude=n,this.repeatName=r,this.rawRepeatListExpression=i,this.extraName=o,this.sized=!1,this.repeatListExpression=t.bind(this,this.repeatListExpression_),this.container.register(this)},o.prototype.readItemSize_=function(){if(!this.itemSize){this.items=this.repeatListExpression(this.$scope),this.parentNode=this.$element[0].parentNode;var e=this.getBlock_(0);e.element[0].parentNode||this.parentNode.appendChild(e.element[0]),this.itemSize=e.element[0][this.container.isHorizontal()?"offsetWidth":"offsetHeight"]||null,this.blocks[0]=e,this.poolBlock_(0),this.itemSize&&this.containerUpdated()}},o.prototype.repeatListExpression_=function(e){var t=this.rawRepeatListExpression(e);if(this.onDemand&&t){var n=new a(t);return n.$$includeIndexes(this.newStartIndex,this.newVisibleEnd),n}return t},o.prototype.containerUpdated=function(){return this.itemSize?(this.sized||(this.items=this.repeatListExpression(this.$scope)),this.sized||(this.unwatchItemSize_(),this.sized=!0,this.$scope.$watchCollection(this.repeatListExpression,t.bind(this,function(e,t){this.isVirtualRepeatUpdating_||this.virtualRepeatUpdate_(e,t)}))),this.updateIndexes_(),void((this.newStartIndex!==this.startIndex||this.newEndIndex!==this.endIndex||this.container.getScrollOffset()>this.container.getScrollSize())&&(this.items instanceof a&&this.items.$$includeIndexes(this.newStartIndex,this.newEndIndex),this.virtualRepeatUpdate_(this.items,this.items)))):(this.unwatchItemSize_=this.$scope.$watchCollection(this.repeatListExpression,t.bind(this,function(e){e&&e.length&&this.$$rAF(t.bind(this,this.readItemSize_))})),void(this.$rootScope.$$phase||this.$scope.$digest()))},o.prototype.getItemSize=function(){return this.itemSize},o.prototype.virtualRepeatUpdate_=function(e,n){this.isVirtualRepeatUpdating_=!0;var r=e&&e.length||0,i=!1;if(this.items&&r<this.items.length&&0!==this.container.getScrollOffset())return this.items=e,void this.container.resetScroll();if(r!==this.itemsLength&&(i=!0,this.itemsLength=r),this.items=e,(e!==n||i)&&this.updateIndexes_(),this.parentNode=this.$element[0].parentNode,i&&this.container.setScrollSize(r*this.itemSize),this.isFirstRender){this.isFirstRender=!1;var o=this.$attrs.mdStartIndex?this.$scope.$eval(this.$attrs.mdStartIndex):this.container.topIndex;this.container.scrollToIndex(o)}Object.keys(this.blocks).forEach(function(e){var t=parseInt(e,10);(t<this.newStartIndex||t>=this.newEndIndex)&&this.poolBlock_(t)},this),this.$browser.$$checkUrlChange=t.noop;var a,s,c=[],l=[];for(a=this.newStartIndex;a<this.newEndIndex&&null==this.blocks[a];a++)s=this.getBlock_(a),this.updateBlock_(s,a),c.push(s);for(;null!=this.blocks[a];a++)this.updateBlock_(this.blocks[a],a);for(var d=a-1;a<this.newEndIndex;a++)s=this.getBlock_(a),this.updateBlock_(s,a),l.push(s);c.length&&this.parentNode.insertBefore(this.domFragmentFromBlocks_(c),this.$element[0].nextSibling),l.length&&this.parentNode.insertBefore(this.domFragmentFromBlocks_(l),this.blocks[d]&&this.blocks[d].element[0].nextSibling),this.$browser.$$checkUrlChange=this.browserCheckUrlChange,this.startIndex=this.newStartIndex,this.endIndex=this.newEndIndex,this.isVirtualRepeatUpdating_=!1},o.prototype.getBlock_=function(e){if(this.pooledBlocks.length)return this.pooledBlocks.pop();var n;return this.transclude(t.bind(this,function(t,r){n={element:t,"new":!0,scope:r},this.updateScope_(r,e),this.parentNode.appendChild(t[0])})),n},o.prototype.updateBlock_=function(e,t){this.blocks[t]=e,(e["new"]||e.scope.$index!==t||e.scope[this.repeatName]!==this.items[t])&&(e["new"]=!1,this.updateScope_(e.scope,t),this.$rootScope.$$phase||e.scope.$digest())},o.prototype.updateScope_=function(e,t){e.$index=t,e[this.repeatName]=this.items&&this.items[t],this.extraName&&(e[this.extraName(this.$scope)]=this.items[t])},o.prototype.poolBlock_=function(e){this.pooledBlocks.push(this.blocks[e]),this.parentNode.removeChild(this.blocks[e].element[0]),delete this.blocks[e]},o.prototype.domFragmentFromBlocks_=function(e){var t=this.$document[0].createDocumentFragment();return e.forEach(function(e){t.appendChild(e.element[0])}),t},o.prototype.updateIndexes_=function(){var e=this.items?this.items.length:0,t=Math.ceil(this.container.getSize()/this.itemSize);this.newStartIndex=Math.max(0,Math.min(e-t,Math.floor(this.container.getScrollOffset()/this.itemSize))),this.newVisibleEnd=this.newStartIndex+t+c,this.newEndIndex=Math.min(e,this.newVisibleEnd),this.newStartIndex=Math.max(0,this.newStartIndex-c)},a.prototype.$$includeIndexes=function(e,t){for(var n=e;t>n;n++)this.hasOwnProperty(n)||(this[n]=this.model.getItemAtIndex(n));this.length=this.model.getLength()}}(),function(){t.module("material.components.whiteframe",[])}(),function(){function e(e,r,s,c,l,d,u,m,f,p){function h(){s.initOptionalProperties(e,f,{searchText:null,selectedItem:null}),l(r),b(),s.nextTick(function(){y(),v(),$(),r.on("focus",$)})}function g(){function t(){var e=0,t=r.find("md-input-container");if(t.length){var n=t.find("input");e=t.prop("offsetHeight"),e-=n.prop("offsetTop"),e-=n.prop("offsetHeight"),e+=t.prop("offsetTop")}return e}function n(){var e=ue.scrollContainer.getBoundingClientRect(),t={};e.right>u.right-o&&(t.left=l.right-e.width+"px"),ue.$.scrollContainer.css(t)}if(!ue)return s.nextTick(g,!1,e);var c,l=ue.wrap.getBoundingClientRect(),d=ue.snap.getBoundingClientRect(),u=ue.root.getBoundingClientRect(),m=d.bottom-u.top,p=u.bottom-d.top,h=l.left-u.left,v=l.width,$=t();f.mdFloatingLabel&&(h+=a,v-=2*a),c={left:h+"px",minWidth:v+"px",maxWidth:Math.max(l.right-u.left,u.right-l.left)-o+"px"},m>p&&u.height-l.bottom-o<i?(c.top="auto",c.bottom=p+"px",c.maxHeight=Math.min(i,l.top-u.top-o)+"px"):(c.top=m-$+"px",c.bottom="auto",c.maxHeight=Math.min(i,u.bottom+s.scrollTop()-l.bottom-o)+"px"),ue.$.scrollContainer.css(c),s.nextTick(n,!1)}function v(){ue.$.root.length&&(l(ue.$.scrollContainer),ue.$.scrollContainer.detach(),ue.$.root.append(ue.$.scrollContainer),u.pin&&u.pin(ue.$.scrollContainer,m))}function $(){e.autofocus&&ue.input.focus()}function b(){var n=parseInt(e.delay,10)||0;f.$observe("disabled",function(e){ce.isDisabled=!!e}),f.$observe("required",function(e){ce.isRequired=!!e}),e.$watch("searchText",n?s.debounce(O,n):O),e.$watch("selectedItem",T),t.element(d).on("resize",g),e.$on("$destroy",E)}function E(){if(t.element(d).off("resize",g),ue){var e="ul scroller scrollContainer input".split(" ");t.forEach(e,function(e){ue.$[e].remove()})}}function y(){ue={main:r[0],scrollContainer:r[0].getElementsByClassName("md-virtual-repeat-container")[0],scroller:r[0].getElementsByClassName("md-virtual-repeat-scroller")[0],ul:r.find("ul")[0],input:r.find("input")[0],wrap:r.find("md-autocomplete-wrap")[0],root:document.body},ue.li=ue.ul.getElementsByTagName("li"),ue.snap=M(),ue.$=C(ue)}function M(){for(var e=r;e.length;e=e.parent())if(t.isDefined(e.attr("md-autocomplete-snap")))return e[0];return ue.wrap}function C(e){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=t.element(e[r]));return n}function w(t,n){!t&&n?(g(),ue&&s.nextTick(function(){s.disableScrollAround(ue.ul)},!1,e)):t&&!n&&s.nextTick(function(){s.enableScrolling()},!1,e)}function x(){fe=!0}function A(){he||ue.input.focus(),fe=!1,ce.hidden=q()}function k(){ue.input.focus()}function T(t,n){t&&j(t).then(function(r){e.searchText=r,_(t,n)}),t!==n&&S()}function S(){t.isFunction(e.itemChange)&&e.itemChange(V(e.selectedItem))}function N(){t.isFunction(e.textChange)&&e.textChange()}function _(e,t){pe.forEach(function(n){n(e,t)})}function D(e){-1==pe.indexOf(e)&&pe.push(e)}function H(e){var t=pe.indexOf(e);-1!=t&&pe.splice(t,1)}function O(t,n){ce.index=B(),t!==n&&j(e.selectedItem).then(function(r){t!==r&&(e.selectedItem=null,t!==n&&N(),X()?ae():(ce.matches=[],U(!1),te()))})}function I(){he=!1,fe||(ce.hidden=q())}function R(e){e&&(fe=!1,he=!1),ue.input.blur()}function P(){he=!0,t.isString(e.searchText)||(e.searchText=""),ce.hidden=q(),ce.hidden||ae()}function L(e){switch(e.keyCode){case c.KEY_CODE.DOWN_ARROW:if(ce.loading)return;e.stopPropagation(),e.preventDefault(),ce.index=Math.min(ce.index+1,ce.matches.length-1),re(),te();break;case c.KEY_CODE.UP_ARROW:if(ce.loading)return;e.stopPropagation(),e.preventDefault(),ce.index=ce.index<0?ce.matches.length-1:Math.max(0,ce.index-1),re(),te();break;case c.KEY_CODE.TAB:if(A(),ce.hidden||ce.loading||ce.index<0||ce.matches.length<1)return;J(ce.index);break;case c.KEY_CODE.ENTER:if(ce.hidden||ce.loading||ce.index<0||ce.matches.length<1)return;if(Y())return;e.stopPropagation(),e.preventDefault(),J(ce.index);break;case c.KEY_CODE.ESCAPE:e.stopPropagation(),e.preventDefault(),Q(),R(!0)}}function F(){return t.isNumber(e.minLength)?e.minLength:1}function j(t){function n(t){return t&&e.itemText?e.itemText(V(t)):null}return p.when(n(t)||t)}function V(e){if(!e)return n;var t={};return ce.itemName&&(t[ce.itemName]=e),t}function B(){return e.autoselect?0:-1}function U(e){ce.loading!=e&&(ce.loading=e),ce.hidden=q()}function q(){return ce.loading&&!W()?!0:Y()?!0:he?!z():!0}function z(){return X()&&W()||oe()}function W(){return ce.matches.length?!0:!1}function Y(){return ce.scope.selectedItem?!0:!1}function K(){return ce.loading&&!Y()}function G(){return j(ce.matches[ce.index])}function X(){return(e.searchText||"").length>=F()}function Z(e,t,n){Object.defineProperty(ce,e,{get:function(){return n},set:function(e){var r=n;n=e,t(e,r)}})}function J(t){s.nextTick(function(){j(ce.matches[t]).then(function(e){var t=ue.$.input.controller("ngModel");t.$setViewValue(e),t.$render()})["finally"](function(){e.selectedItem=ce.matches[t],U(!1)})},!1)}function Q(){U(!0),ce.index=0,ce.matches=[],e.searchText="",J(-1);var t=document.createEvent("CustomEvent");t.initCustomEvent("input",!0,!0,{value:e.searchText}),ue.input.dispatchEvent(t),ue.input.focus()}function ee(n){function r(t){me[o]=t,(n||"")===(e.searchText||"")&&(ce.matches=t,ce.hidden=q(),e.selectOnMatch&&se(),te(),g())}var i=e.$parent.$eval(de),o=n.toLowerCase();t.isArray(i)?r(i):i&&(U(!0),s.nextTick(function(){i.success&&i.success(r),i.then&&i.then(r),i["finally"]&&i["finally"](function(){U(!1)})},!0,e))}function te(){G().then(function(e){ce.messages=[ne(),e]})}function ne(){if(ge===ce.matches.length)return"";switch(ge=ce.matches.length,ce.matches.length){case 0:return"There are no matches available.";case 1:return"There is 1 match available.";default:return"There are "+ce.matches.length+" matches available."}}function re(){if(ue.li[0]){var e=ue.li[0].offsetHeight,t=e*ce.index,n=t+e,r=ue.scroller.clientHeight,i=ue.scroller.scrollTop;i>t?ie(t):n>i+r&&ie(n-r)}}function ie(e){ue.$.scrollContainer.controller("mdVirtualRepeatContainer").scrollTo(e)}function oe(){var e=(ce.scope.searchText||"").length;return ce.hasNotFound&&!W()&&!ce.loading&&e>=F()&&he&&!Y()}function ae(){var t=e.searchText||"",n=t.toLowerCase();!e.noCache&&me[n]?(ce.matches=me[n],te()):ee(t),ce.hidden=q()}function se(){var t=e.searchText,n=ce.matches,r=n[0];1===n.length&&j(r).then(function(e){t==e&&J(0)})}var ce=this,le=e.itemsExpr.split(/ in /i),de=le[1],ue=null,me={},fe=!1,pe=[],he=!1,ge=0;return Z("hidden",w,!0),ce.scope=e,ce.parent=e.$parent,ce.itemName=le[0],ce.matches=[],ce.loading=!1,ce.hidden=!0,ce.index=null,ce.messages=[],ce.id=s.nextUid(),ce.isDisabled=null,ce.isRequired=null,ce.hasNotFound=!1,ce.keydown=L,ce.blur=I,ce.focus=P,ce.clear=Q,ce.select=J,ce.listEnter=x,ce.listLeave=A,ce.mouseUp=k,ce.getCurrentDisplayValue=G,ce.registerSelectedItemWatcher=D,ce.unregisterSelectedItemWatcher=H,ce.notFoundVisible=oe,ce.loadingIsVisible=K,h()}t.module("material.components.autocomplete").controller("MdAutocompleteCtrl",e);var r=41,i=5.5*r,o=8,a=2;e.$inject=["$scope","$element","$mdUtil","$mdConstant","$mdTheming","$window","$animate","$rootElement","$attrs","$q"]}(),function(){function e(){var e=!1;return{controller:"MdAutocompleteCtrl",controllerAs:"$mdAutocompleteCtrl",scope:{inputName:"@mdInputName",inputMinlength:"@mdInputMinlength",inputMaxlength:"@mdInputMaxlength",searchText:"=?mdSearchText",selectedItem:"=?mdSelectedItem",itemsExpr:"@mdItems",itemText:"&mdItemText",placeholder:"@placeholder",noCache:"=?mdNoCache",selectOnMatch:"=?mdSelectOnMatch",itemChange:"&?mdSelectedItemChange",textChange:"&?mdSearchTextChange",minLength:"=?mdMinLength",delay:"=?mdDelay",autofocus:"=?mdAutofocus",floatingLabel:"@?mdFloatingLabel",autoselect:"=?mdAutoselect",menuClass:"@?mdMenuClass",inputId:"@?mdInputId"},link:function(t,n,r,i){i.hasNotFound=e},template:function(t,n){function r(){var e=t.find("md-item-template").detach(),n=e.length?e.html():t.html();return e.length||t.empty(),"<md-autocomplete-parent-scope md-autocomplete-replace>"+n+"</md-autocomplete-parent-scope>"}function i(){var e=t.find("md-not-found").detach(),n=e.length?e.html():"";return n?'<li ng-if="$mdAutocompleteCtrl.notFoundVisible()"                         md-autocomplete-parent-scope>'+n+"</li>":""}function o(){return n.mdFloatingLabel?'            <md-input-container flex ng-if="floatingLabel">              <label>{{floatingLabel}}</label>              <input type="search"                  '+(null!=l?'tabindex="'+l+'"':"")+'                  id="{{ inputId || \'fl-input-\' + $mdAutocompleteCtrl.id }}"                  name="{{inputName}}"                  autocomplete="off"                  ng-required="$mdAutocompleteCtrl.isRequired"                  ng-minlength="inputMinlength"                  ng-maxlength="inputMaxlength"                  ng-disabled="$mdAutocompleteCtrl.isDisabled"                  ng-model="$mdAutocompleteCtrl.scope.searchText"                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"                  ng-blur="$mdAutocompleteCtrl.blur()"                  ng-focus="$mdAutocompleteCtrl.focus()"                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                  aria-label="{{floatingLabel}}"                  aria-autocomplete="list"                  aria-haspopup="true"                  aria-activedescendant=""                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>              <div md-autocomplete-parent-scope md-autocomplete-replace>'+c+"</div>            </md-input-container>":'            <input flex type="search"                '+(null!=l?'tabindex="'+l+'"':"")+'                id="{{ inputId || \'input-\' + $mdAutocompleteCtrl.id }}"                name="{{inputName}}"                ng-if="!floatingLabel"                autocomplete="off"                ng-required="$mdAutocompleteCtrl.isRequired"                ng-disabled="$mdAutocompleteCtrl.isDisabled"                ng-model="$mdAutocompleteCtrl.scope.searchText"                ng-keydown="$mdAutocompleteCtrl.keydown($event)"                ng-blur="$mdAutocompleteCtrl.blur()"                ng-focus="$mdAutocompleteCtrl.focus()"                placeholder="{{placeholder}}"                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"                aria-label="{{placeholder}}"                aria-autocomplete="list"                aria-haspopup="true"                aria-activedescendant=""                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>            <button                type="button"                tabindex="-1"                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"                ng-click="$mdAutocompleteCtrl.clear()">              <md-icon md-svg-icon="md-close"></md-icon>              <span class="md-visually-hidden">Clear</span>            </button>                '}var a=i(),s=r(),c=t.html(),l=n.tabindex;return e=a?!0:!1,n.hasOwnProperty("tabindex")||t.attr("tabindex","-1"),'        <md-autocomplete-wrap            layout="row"            ng-class="{ \'md-whiteframe-z1\': !floatingLabel, \'md-menu-showing\': !$mdAutocompleteCtrl.hidden }"            role="listbox">          '+o()+'          <md-progress-linear              class="'+(n.mdFloatingLabel?"md-inline":"")+'"              ng-if="$mdAutocompleteCtrl.loadingIsVisible()"              md-mode="indeterminate"></md-progress-linear>          <md-virtual-repeat-container              md-auto-shrink              md-auto-shrink-min="1"              ng-mouseenter="$mdAutocompleteCtrl.listEnter()"              ng-mouseleave="$mdAutocompleteCtrl.listLeave()"              ng-mouseup="$mdAutocompleteCtrl.mouseUp()"              ng-hide="$mdAutocompleteCtrl.hidden"              class="md-autocomplete-suggestions-container md-whiteframe-z1"              ng-class="{ \'md-not-found\': $mdAutocompleteCtrl.notFoundVisible() }"              role="presentation">            <ul class="md-autocomplete-suggestions"                ng-class="::menuClass"                id="ul-{{$mdAutocompleteCtrl.id}}">              <li md-virtual-repeat="item in $mdAutocompleteCtrl.matches"                  ng-class="{ selected: $index === $mdAutocompleteCtrl.index }"                  ng-click="$mdAutocompleteCtrl.select($index)"                  md-extra-name="$mdAutocompleteCtrl.itemName">                  '+s+"                  </li>"+a+'            </ul>          </md-virtual-repeat-container>        </md-autocomplete-wrap>        <aria-status            class="md-visually-hidden"            role="status"            aria-live="assertive">          <p ng-repeat="message in $mdAutocompleteCtrl.messages track by $index" ng-if="message">{{message}}</p>        </aria-status>'}}}t.module("material.components.autocomplete").directive("mdAutocomplete",e)}(),function(){function e(e,t){function n(e,n,r){return function(e,n,i){function o(n,r){c[r]=e[n],e.$watch(n,function(e){t.nextTick(function(){c[r]=e})})}function a(){var t=!1,n=!1;e.$watch(function(){n||t||(t=!0,e.$$postDigest(function(){n||c.$digest(),t=n=!1}))}),c.$watch(function(){n=!0})}var s=e.$mdAutocompleteCtrl,c=s.parent.$new(),l=s.itemName;o("$index","$index"),o("item",l),a(),r(c,function(e){n.after(e)})}}return{restrict:"AE",compile:n,terminal:!0,transclude:"element"}}t.module("material.components.autocomplete").directive("mdAutocompleteParentScope",e),e.$inject=["$compile","$mdUtil"]}(),function(){function e(e,n,r){function i(i,o){var s=null,c=null,l=r.mdHighlightFlags||"",d=e.$watch(function(e){return{term:i(e),unsafeText:o(e)}},function(e,r){(null===s||e.unsafeText!==r.unsafeText)&&(s=t.element("<div>").text(e.unsafeText).html()),(null===c||e.term!==r.term)&&(c=a(e.term,l)),n.html(s.replace(c,'<span class="highlight">$&</span>'))},!0);n.on("$destroy",d)}function o(e){return e&&e.replace(/[\\\^\$\*\+\?\.\(\)\|\{}\[\]]/g,"\\$&")}function a(e,t){var n="";return t.indexOf("^")>=1&&(n+="^"),n+=e,t.indexOf("$")>=1&&(n+="$"),new RegExp(o(n),t.replace(/[\$\^]/g,""))}this.init=i}t.module("material.components.autocomplete").controller("MdHighlightCtrl",e),e.$inject=["$scope","$element","$attrs"]}(),function(){function e(e,t){return{terminal:!0,controller:"MdHighlightCtrl",compile:function(n,r){var i=t(r.mdHighlightText),o=e(n.html());return function(e,t,n,r){r.init(i,o)}}}}t.module("material.components.autocomplete").directive("mdHighlightText",e),e.$inject=["$interpolate","$parse"]}(),function(){function e(e,r){function i(n,i){return n.append(r.processTemplate(o)),function(n,r,i,o){r.addClass("md-chip"),e(r),o&&t.element(r[0].querySelector(".md-chip-content")).on("blur",function(){o.selectedChip=-1})}}var o=r.processTemplate(n);return{restrict:"E",require:"^?mdChips",compile:i}}t.module("material.components.chips").directive("mdChip",e);var n='    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">      {{$mdChipsCtrl.deleteHint}}    </span>';e.$inject=["$mdTheming","$mdUtil"]}(),function(){function e(e){function t(t,n,r,i){n.on("click",function(e){t.$apply(function(){i.removeChip(t.$$replacedScope.$index)})}),e(function(){n.attr({tabindex:-1,"aria-hidden":!0}),n.find("button").attr("tabindex","-1")})}return{restrict:"A",require:"^mdChips",scope:!1,link:t}}t.module("material.components.chips").directive("mdChipRemove",e),e.$inject=["$timeout"]}(),function(){function e(e){function t(t,n,r){var i=t.$parent.$mdChipsCtrl,o=i.parent.$new(!1,i.parent);o.$$replacedScope=t,o.$chip=t.$chip,o.$index=t.$index,o.$mdChipsCtrl=i;var a=i.$scope.$eval(r.mdChipTransclude);n.html(a),e(n.contents())(o)}return{restrict:"EA",terminal:!0,link:t,scope:!1}}t.module("material.components.chips").directive("mdChipTransclude",e),e.$inject=["$compile"]}(),function(){function e(e,t,n,r,i){this.$timeout=i,this.$mdConstant=t,this.$scope=e,this.parent=e.$parent,this.$log=n,this.$element=r,this.ngModelCtrl=null,this.userInputNgModelCtrl=null,this.userInputElement=null,this.items=[],this.selectedChip=-1,this.hasAutocomplete=!1,this.deleteHint="Press delete to remove this chip.",this.deleteButtonLabel="Remove",this.chipBuffer="",this.useOnAppend=!1,this.useTransformChip=!1,this.useOnAdd=!1,this.useOnRemove=!1,this.useOnSelect=!1}t.module("material.components.chips").controller("MdChipsCtrl",e),e.$inject=["$scope","$mdConstant","$log","$element","$timeout"],e.prototype.inputKeydown=function(e){var t=this.getChipBuffer();if(!(this.hasAutocomplete&&e.isDefaultPrevented&&e.isDefaultPrevented())){if(e.keyCode===this.$mdConstant.KEY_CODE.BACKSPACE){if(t)return;return e.preventDefault(),e.stopPropagation(),void(this.items.length&&this.selectAndFocusChipSafe(this.items.length-1))}if((!this.separatorKeys||this.separatorKeys.length<1)&&(this.separatorKeys=[this.$mdConstant.KEY_CODE.ENTER]),-1!==this.separatorKeys.indexOf(e.keyCode)){if(this.hasAutocomplete&&this.requireMatch||!t)return;e.preventDefault(),this.appendChip(t),this.resetChipBuffer()}}},e.prototype.chipKeydown=function(e){if(!this.getChipBuffer())switch(e.keyCode){case this.$mdConstant.KEY_CODE.BACKSPACE:case this.$mdConstant.KEY_CODE.DELETE:if(this.selectedChip<0)return;e.preventDefault(),this.removeAndSelectAdjacentChip(this.selectedChip);break;case this.$mdConstant.KEY_CODE.LEFT_ARROW:e.preventDefault(),this.selectedChip<0&&(this.selectedChip=this.items.length),this.items.length&&this.selectAndFocusChipSafe(this.selectedChip-1);break;case this.$mdConstant.KEY_CODE.RIGHT_ARROW:e.preventDefault(),this.selectAndFocusChipSafe(this.selectedChip+1);break;case this.$mdConstant.KEY_CODE.ESCAPE:case this.$mdConstant.KEY_CODE.TAB:if(this.selectedChip<0)return;e.preventDefault(),this.onFocus()}},e.prototype.getPlaceholder=function(){var e=this.items.length&&(""==this.secondaryPlaceholder||this.secondaryPlaceholder);return e?this.placeholder:this.secondaryPlaceholder},e.prototype.removeAndSelectAdjacentChip=function(e){var n=this.getAdjacentChipIndex(e);this.removeChip(e),this.$timeout(t.bind(this,function(){this.selectAndFocusChipSafe(n)}))},e.prototype.resetSelectedChip=function(){this.selectedChip=-1},e.prototype.getAdjacentChipIndex=function(e){var t=this.items.length-1;return 0==t?-1:e==t?e-1:e},e.prototype.appendChip=function(e){if(this.useTransformChip&&this.transformChip){var n=this.transformChip({$chip:e});t.isDefined(n)&&(e=n)}if(t.isObject(e)){var r=this.items.some(function(n){return t.equals(e,n)});if(r)return}if(!(null==e||this.items.indexOf(e)+1)){var i=this.items.push(e);this.useOnAdd&&this.onAdd&&this.onAdd({$chip:e,$index:i})}},e.prototype.useOnAppendExpression=function(){this.$log.warn("md-on-append is deprecated; please use md-transform-chip or md-on-add instead"),this.useTransformChip&&this.transformChip||(this.useTransformChip=!0,this.transformChip=this.onAppend)},e.prototype.useTransformChipExpression=function(){this.useTransformChip=!0},e.prototype.useOnAddExpression=function(){this.useOnAdd=!0},e.prototype.useOnRemoveExpression=function(){this.useOnRemove=!0},e.prototype.useOnSelectExpression=function(){this.useOnSelect=!0},e.prototype.getChipBuffer=function(){return this.userInputElement?this.userInputNgModelCtrl?this.userInputNgModelCtrl.$viewValue:this.userInputElement[0].value:this.chipBuffer},e.prototype.resetChipBuffer=function(){this.userInputElement?this.userInputNgModelCtrl?(this.userInputNgModelCtrl.$setViewValue(""),this.userInputNgModelCtrl.$render()):this.userInputElement[0].value="":this.chipBuffer=""},e.prototype.removeChip=function(e){var t=this.items.splice(e,1);t&&t.length&&this.useOnRemove&&this.onRemove&&this.onRemove({$chip:t[0],$index:e})},e.prototype.removeChipAndFocusInput=function(e){this.removeChip(e),this.onFocus()},e.prototype.selectAndFocusChipSafe=function(e){return this.items.length?e===this.items.length?this.onFocus():(e=Math.max(e,0),e=Math.min(e,this.items.length-1),this.selectChip(e),void this.focusChip(e)):(this.selectChip(-1),void this.onFocus())},e.prototype.selectChip=function(e){e>=-1&&e<=this.items.length?(this.selectedChip=e,this.useOnSelect&&this.onSelect&&this.onSelect({$chip:this.items[this.selectedChip]})):this.$log.warn("Selected Chip index out of bounds; ignoring.")},e.prototype.selectAndFocusChip=function(e){this.selectChip(e),-1!=e&&this.focusChip(e)},e.prototype.focusChip=function(e){this.$element[0].querySelector('md-chip[index="'+e+'"] .md-chip-content').focus()},e.prototype.configureNgModel=function(e){this.ngModelCtrl=e;var t=this;e.$render=function(){t.items=t.ngModelCtrl.$viewValue}},e.prototype.onFocus=function(){var e=this.$element[0].querySelector("input");e&&e.focus(),this.resetSelectedChip()},e.prototype.onInputFocus=function(){this.inputHasFocus=!0,this.resetSelectedChip()},e.prototype.onInputBlur=function(){this.inputHasFocus=!1},e.prototype.configureUserInput=function(e){this.userInputElement=e;var n=e.controller("ngModel");n!=this.ngModelCtrl&&(this.userInputNgModelCtrl=n);var r=this.$scope,i=this,o=function(e,n){r.$evalAsync(t.bind(i,n,e))};e.attr({tabindex:0}).on("keydown",function(e){o(e,i.inputKeydown)}).on("focus",function(e){o(e,i.onInputFocus)}).on("blur",function(e){o(e,i.onInputBlur)})},e.prototype.configureAutocomplete=function(e){e&&(this.hasAutocomplete=!0,e.registerSelectedItemWatcher(t.bind(this,function(e){e&&(this.appendChip(e),this.resetChipBuffer())})),this.$element.find("input").on("focus",t.bind(this,this.onInputFocus)).on("blur",t.bind(this,this.onInputBlur)))},e.prototype.hasFocus=function(){return this.inputHasFocus||this.selectedChip>=0}}(),function(){function e(e,t,a,s,c){function l(n,r){function i(e){if(r.ngModel){var t=o[0].querySelector(e);return t&&t.outerHTML}}var o=r.$mdUserTemplate;r.$mdUserTemplate=null;var l=i("md-chips>*[md-chip-remove]")||u.remove,d=i("md-chips>md-chip-template")||u["default"],m=i("md-chips>md-autocomplete")||i("md-chips>input")||u.input,f=o.find("md-chip");return o[0].querySelector("md-chip-template>*[md-chip-remove]")&&s.warn("invalid placement of md-chip-remove within md-chip-template."),function(n,i,o,s){t.initOptionalProperties(n,r),e(i);var p=s[0];if(p.chipContentsTemplate=d,p.chipRemoveTemplate=l,p.chipInputTemplate=m,i.attr({"aria-hidden":!0,tabindex:-1}).on("focus",function(){p.onFocus()}),r.ngModel&&(p.configureNgModel(i.controller("ngModel")),o.mdTransformChip&&p.useTransformChipExpression(),o.mdOnAppend&&p.useOnAppendExpression(),o.mdOnAdd&&p.useOnAddExpression(),o.mdOnRemove&&p.useOnRemoveExpression(),o.mdOnSelect&&p.useOnSelectExpression(),m!=u.input&&n.$watch("$mdChipsCtrl.readonly",function(e){e||t.nextTick(function(){0===m.indexOf("<md-autocomplete")&&p.configureAutocomplete(i.find("md-autocomplete").controller("mdAutocomplete")),p.configureUserInput(i.find("input"))})}),t.nextTick(function(){var e=i.find("input");e&&e.toggleClass("md-input",!0);
})),f.length>0){var h=a(f.clone())(n.$parent);c(function(){i.find("md-chips-wrap").prepend(h)})}}}function d(){return{chips:t.processTemplate(n),input:t.processTemplate(r),"default":t.processTemplate(i),remove:t.processTemplate(o)}}var u=d();return{template:function(e,t){return t.$mdUserTemplate=e.clone(),u.chips},require:["mdChips"],restrict:"E",controller:"MdChipsCtrl",controllerAs:"$mdChipsCtrl",bindToController:!0,compile:l,scope:{readonly:"=readonly",placeholder:"@",secondaryPlaceholder:"@",transformChip:"&mdTransformChip",onAppend:"&mdOnAppend",onAdd:"&mdOnAdd",onRemove:"&mdOnRemove",onSelect:"&mdOnSelect",deleteHint:"@",deleteButtonLabel:"@",separatorKeys:"=?mdSeparatorKeys",requireMatch:"=?mdRequireMatch"}}}t.module("material.components.chips").directive("mdChips",e);var n='      <md-chips-wrap          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"          ng-keydown="$mdChipsCtrl.chipKeydown($event)"          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus(), \'md-readonly\': !$mdChipsCtrl.ngModelCtrl }"          class="md-chips">        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"            index="{{$index}}"            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index, \'md-readonly\': $mdChipsCtrl.readonly}">          <div class="md-chip-content"              tabindex="-1"              aria-hidden="true"              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>          <div ng-if="!$mdChipsCtrl.readonly"               class="md-chip-remove-container"               md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>        </md-chip>        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"            class="md-chip-input-container"            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>        </div>      </md-chips-wrap>',r='        <input            class="md-input"            tabindex="0"            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"            ng-model="$mdChipsCtrl.chipBuffer"            ng-focus="$mdChipsCtrl.onInputFocus()"            ng-blur="$mdChipsCtrl.onInputBlur()"            ng-keydown="$mdChipsCtrl.inputKeydown($event)">',i="      <span>{{$chip}}</span>",o='      <button          class="md-chip-remove"          ng-if="!$mdChipsCtrl.readonly"          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"          type="button"          aria-hidden="true"          tabindex="-1">        <md-icon md-svg-icon="md-close"></md-icon>        <span class="md-visually-hidden">          {{$mdChipsCtrl.deleteButtonLabel}}        </span>      </button>';e.$inject=["$mdTheming","$mdUtil","$compile","$log","$timeout"]}(),function(){function e(){this.selectedItem=null,this.searchText=""}t.module("material.components.chips").controller("MdContactChipsCtrl",e),e.prototype.queryContact=function(e){var n=this.contactQuery({$query:e});return this.filterSelected?n.filter(t.bind(this,this.filterSelectedContacts)):n},e.prototype.itemName=function(e){return e[this.contactName]},e.prototype.filterSelectedContacts=function(e){return-1==this.contacts.indexOf(e)}}(),function(){function e(e,t){function r(n,r){return function(n,i,o,a){t.initOptionalProperties(n,r),e(i),i.attr("tabindex","-1")}}return{template:function(e,t){return n},restrict:"E",controller:"MdContactChipsCtrl",controllerAs:"$mdContactChipsCtrl",bindToController:!0,compile:r,scope:{contactQuery:"&mdContacts",placeholder:"@",secondaryPlaceholder:"@",contactName:"@mdContactName",contactImage:"@mdContactImage",contactEmail:"@mdContactEmail",contacts:"=ngModel",requireMatch:"=?mdRequireMatch",highlightFlags:"@?mdHighlightFlags"}}}t.module("material.components.chips").directive("mdContactChips",e);var n='      <md-chips class="md-contact-chips"          ng-model="$mdContactChipsCtrl.contacts"          md-require-match="$mdContactChipsCtrl.requireMatch"          md-autocomplete-snap>          <md-autocomplete              md-menu-class="md-contact-chips-suggestions"              md-selected-item="$mdContactChipsCtrl.selectedItem"              md-search-text="$mdContactChipsCtrl.searchText"              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"              md-item-text="$mdContactChipsCtrl.itemName(item)"              md-no-cache="true"              md-autoselect              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">            <div class="md-contact-suggestion">              <img                   ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"                  alt="{{item[$mdContactChipsCtrl.contactName]}}"                  ng-if="item[$mdContactChipsCtrl.contactImage]" />              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText"                    md-highlight-flags="{{$mdContactChipsCtrl.highlightFlags}}">                {{item[$mdContactChipsCtrl.contactName]}}              </span>              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>            </div>          </md-autocomplete>          <md-chip-template>            <div class="md-contact-avatar">              <img                   ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}"                  ng-if="$chip[$mdContactChipsCtrl.contactImage]" />            </div>            <div class="md-contact-name">              {{$chip[$mdContactChipsCtrl.contactName]}}            </div>          </md-chip-template>      </md-chips>';e.$inject=["$mdTheming","$mdUtil"]}(),function(){function e(e,t,n){function r(r,i,o){function a(){var e=i.parent();return e.attr("aria-label")||e.text()?!0:e.parent().attr("aria-label")||e.parent().text()?!0:!1}function s(){r.svgIcon||r.svgSrc||(r.fontIcon&&i.addClass("md-font "+r.fontIcon),i.addClass(e.fontSet(r.fontSet)))}t(i),s();var c=o.alt||r.fontIcon||r.svgIcon||i.text(),l=o.$normalize(o.$attr.mdSvgIcon||o.$attr.mdSvgSrc||"");o["aria-label"]||(""==c||a()?i.text()||n.expect(i,"aria-hidden","true"):(n.expect(i,"aria-label",c),n.expect(i,"role","img"))),l&&o.$observe(l,function(t){i.empty(),t&&e(t).then(function(e){i.append(e)})})}return{scope:{fontSet:"@mdFontSet",fontIcon:"@mdFontIcon",svgIcon:"@mdSvgIcon",svgSrc:"@mdSvgSrc"},restrict:"E",link:r}}t.module("material.components.icon").directive("mdIcon",["$mdIcon","$mdTheming","$mdAria",e])}(),function(){function e(){}function n(e,t){this.url=e,this.viewBoxSize=t||i.defaultViewBoxSize}function r(e,n,r,i,o){function a(t){if(t=t||"",v[t])return r.when(v[t].clone());if($.test(t))return u(t).then(c(t));-1==t.indexOf(":")&&(t="$default:"+t);var n=e[t]?l:d;return n(t).then(c(t))}function s(n){var r=t.isUndefined(n)||!(n&&n.length);if(r)return e.defaultFontSet;var i=n;return t.forEach(e.fontSets,function(e){e.alias==n&&(i=e.fontSet||i)}),i}function c(t){return function(n){return v[t]=f(n)?n:new p(n,e[t]),v[t].clone()}}function l(t){var n=e[t];return u(n.url).then(function(e){return new p(e,n)})}function d(t){function n(e){var n=t.slice(t.lastIndexOf(":")+1),r=e.querySelector("#"+n);return r?new p(r,s):o(t)}function o(e){var t="icon "+e+" not found";return i.warn(t),r.reject(t||e)}var a=t.substring(0,t.lastIndexOf(":"))||"$default",s=e[a];return s?u(s.url).then(n):o(t)}function u(e){return n.get(e,{cache:o}).then(function(e){return t.element("<div>").append(e.data).find("svg")[0]})["catch"](m)}function m(e){var n=t.isString(e)?e:e.message||e.data||e.statusText;return i.warn(n),r.reject(n)}function f(e){return t.isDefined(e.element)&&t.isDefined(e.config)}function p(e,n){e&&"svg"!=e.tagName&&(e=t.element('<svg xmlns="http://www.w3.org/2000/svg">').append(e)[0]),e.getAttribute("xmlns")||e.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.element=e,this.config=n,this.prepare()}function h(){var n=this.config?this.config.viewBoxSize:e.defaultViewBoxSize;t.forEach({fit:"",height:"100%",width:"100%",preserveAspectRatio:"xMidYMid meet",viewBox:this.element.getAttribute("viewBox")||"0 0 "+n+" "+n},function(e,t){this.element.setAttribute(t,e)},this),t.forEach({"pointer-events":"none",display:"block"},function(e,t){this.element.style[t]=e},this)}function g(){return this.element.cloneNode(!0)}var v={},$=/[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/i;return p.prototype={clone:g,prepare:h},a.fontSet=s,a}t.module("material.components.icon").provider("$mdIcon",e);var i={defaultViewBoxSize:24,defaultFontSet:"material-icons",fontSets:[]};e.prototype={icon:function(e,t,r){return-1==e.indexOf(":")&&(e="$default:"+e),i[e]=new n(t,r),this},iconSet:function(e,t,r){return i[e]=new n(t,r),this},defaultIconSet:function(e,t){var r="$default";return i[r]||(i[r]=new n(e,t)),i[r].viewBoxSize=t||i.defaultViewBoxSize,this},defaultViewBoxSize:function(e){return i.defaultViewBoxSize=e,this},fontSet:function(e,t){return i.fontSets.push({alias:e,fontSet:t||e}),this},defaultFontSet:function(e){return i.defaultFontSet=e?e:"",this},defaultIconSize:function(e){return i.defaultIconSize=e,this},preloadIcons:function(e){var t=this,n=[{id:"md-tabs-arrow",url:"md-tabs-arrow.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'},{id:"md-close",url:"md-close.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'},{id:"md-cancel",url:"md-cancel.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'},{id:"md-menu",url:"md-menu.svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><path d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z" /></svg>'},{id:"md-toggle-arrow",url:"md-toggle-arrow-svg",svg:'<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'},{id:"md-calendar",url:"md-calendar.svg",svg:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/></svg>'}];n.forEach(function(n){t.icon(n.id,n.url),e.put(n.url,n.svg)})},$get:["$http","$q","$log","$templateCache",function(e,t,n,o){return this.preloadIcons(o),r(i,e,t,n,o)}]},r.$inject=["config","$http","$q","$log","$templateCache"]}(),function(){function e(e,r,i,o,a,s,c,l){var d,u,m=this;this.nestLevel=parseInt(r.mdNestLevel,10)||0,this.init=function(e,n){n=n||{},d=e,u=i[0].querySelector("[ng-click],[ng-mouseenter]"),u.setAttribute("aria-expanded","false"),this.isInMenuBar=n.isInMenuBar,this.nestedMenus=a.nodesToArray(d[0].querySelectorAll(".md-nested-menu")),d.on("$mdInterimElementRemove",function(){m.isOpen=!1});var r="menu_container_"+a.nextUid();d.attr("id",r),t.element(u).attr({"aria-owns":r,"aria-haspopup":"true"}),o.$on("$destroy",this.disableHoverListener)};var f,p,h=[];this.enableHoverListener=function(){h.push(c.$on("$mdMenuOpen",function(e,t){d[0].contains(t[0])&&(m.currentlyOpenMenu=t.controller("mdMenu"),m.isAlreadyOpening=!1,m.currentlyOpenMenu.registerContainerProxy(m.triggerContainerProxy.bind(m)))})),h.push(c.$on("$mdMenuClose",function(e,t){d[0].contains(t[0])&&(m.currentlyOpenMenu=n)})),p=t.element(a.nodesToArray(d[0].children[0].children)),p.on("mouseenter",m.handleMenuItemHover),p.on("mouseleave",m.handleMenuItemMouseLeave)},this.disableHoverListener=function(){for(;h.length;)h.shift()();p&&p.off("mouseenter",m.handleMenuItemHover),p&&p.off("mouseleave",m.handleMenuMouseLeave)},this.handleMenuItemHover=function(e){if(!m.isAlreadyOpening){var n=e.target.querySelector("md-menu")||a.getClosest(e.target,"MD-MENU");f=s(function(){if(n&&(n=t.element(n).controller("mdMenu")),m.currentlyOpenMenu&&m.currentlyOpenMenu!=n){var e=m.nestLevel+1;m.currentlyOpenMenu.close(!0,{closeTo:e})}else n&&!n.isOpen&&n.open&&(m.isAlreadyOpening=!0,n.open())},n?100:250);var r=e.currentTarget.querySelector("button:not([disabled])");r&&r.focus()}},this.handleMenuItemMouseLeave=function(){f&&(s.cancel(f),f=n)},this.open=function(t){t&&t.stopPropagation(),t&&t.preventDefault(),m.isOpen||(m.enableHoverListener(),m.isOpen=!0,u=u||(t?t.target:i[0]),u.setAttribute("aria-expanded","true"),o.$emit("$mdMenuOpen",i),e.show({scope:o,mdMenuCtrl:m,nestLevel:m.nestLevel,element:d,target:u,preserveElement:!0,parent:"body"})["finally"](function(){u.setAttribute("aria-expanded","false"),m.disableHoverListener()}))},o.$mdOpenMenu=this.open,o.$watch(function(){return m.isOpen},function(e){e?(d.attr("aria-hidden","false"),i[0].classList.add("md-open"),t.forEach(m.nestedMenus,function(e){e.classList.remove("md-open")})):(d.attr("aria-hidden","true"),i[0].classList.remove("md-open")),o.$mdMenuIsOpen=m.isOpen}),this.focusMenuContainer=function(){var e=d[0].querySelector("[md-menu-focus-target]");e||(e=d[0].querySelector(".md-button")),e.focus()},this.registerContainerProxy=function(e){this.containerProxy=e},this.triggerContainerProxy=function(e){this.containerProxy&&this.containerProxy(e)},this.destroy=function(){return m.isOpen?e.destroy():l.when(!1)},this.close=function(n,r){if(m.isOpen){m.isOpen=!1;var a=t.extend({},r,{skipFocus:n});if(o.$emit("$mdMenuClose",i,a),e.hide(null,r),!n){var s=m.restoreFocusTo||i.find("button")[0];s instanceof t.element&&(s=s[0]),s&&s.focus()}}},this.positionMode=function(){var e=(r.mdPositionMode||"target").split(" ");return 1==e.length&&e.push(e[0]),{left:e[0],top:e[1]}},this.offsets=function(){var e=(r.mdOffset||"0 0").split(" ").map(parseFloat);if(2==e.length)return{left:e[0],top:e[1]};if(1==e.length)return{top:e[0],left:e[0]};throw Error("Invalid offsets specified. Please follow format <x, y> or <n>")}}t.module("material.components.menu").controller("mdMenuCtrl",e),e.$inject=["$mdMenu","$attrs","$element","$scope","$mdUtil","$timeout","$rootScope","$q"]}(),function(){function e(e){function r(n){n.addClass("md-menu");var r=n.children()[0];if(r.hasAttribute("ng-click")||(r=r.querySelector("[ng-click],[ng-mouseenter]")||r),!r||"MD-BUTTON"!=r.nodeName&&"BUTTON"!=r.nodeName||r.hasAttribute("type")||r.setAttribute("type","button"),2!=n.children().length)throw Error(o+"Expected two children elements.");r&&r.setAttribute("aria-haspopup","true");var a=n[0].querySelectorAll("md-menu"),s=parseInt(n[0].getAttribute("md-nest-level"),10)||0;return a&&t.forEach(e.nodesToArray(a),function(e){e.hasAttribute("md-position-mode")||e.setAttribute("md-position-mode","cascade"),e.classList.add("md-nested-menu"),e.setAttribute("md-nest-level",s+1)}),i}function i(e,r,i,o){var a=o[0],s=o[1]!=n,c=t.element('<div class="md-open-menu-container md-whiteframe-z2"></div>'),l=r.children()[1];l.hasAttribute("role")||l.setAttribute("role","menu"),c.append(l),r.on("$destroy",function(){c.remove()}),r.append(c),c[0].style.display="none",a.init(c,{isInMenuBar:s})}var o="Invalid HTML for md-menu: ";return{restrict:"E",require:["mdMenu","?^mdMenuBar"],controller:"mdMenuCtrl",scope:!0,compile:r}}t.module("material.components.menu").directive("mdMenu",e),e.$inject=["$mdUtil"]}(),function(){function e(e){function r(e,r,a,s,c,l,d,u,m){function f(n,r,i){return i.nestLevel?t.noop:(i.disableParentScroll&&!e.getClosest(i.target,"MD-DIALOG")?i.restoreScroll=e.disableScrollAround(i.element,i.parent):i.disableParentScroll=!1,i.hasBackdrop&&(i.backdrop=e.createBackdrop(n,"md-menu-backdrop md-click-catcher"),m.enter(i.backdrop,s[0].body)),function(){i.backdrop&&i.backdrop.remove(),i.disableParentScroll&&i.restoreScroll()})}function p(e,t,n){function r(){return u(t,{addClass:"md-leave"}).start()}function i(){t.removeClass("md-active"),$(t,n),n.alreadyOpen=!1}return n.cleanupInteraction(),n.cleanupResizing(),n.hideBackdrop(),n.$destroy===!0?i():r().then(i)}function h(n,i,o){function s(){return o.parent.append(i),i[0].style.display="",l(function(e){var t=b(i,o);i.removeClass("md-leave"),u(i,{addClass:"md-active",from:E.toCss(t),to:E.toCss({transform:""})}).start().then(e)})}function m(){if(!o.target)throw Error("$mdMenu.show() expected a target to animate from in options.target");t.extend(o,{alreadyOpen:!1,isRemoved:!1,target:t.element(o.target),parent:t.element(o.parent),menuContentEl:t.element(i[0].querySelector("md-menu-content"))})}function p(){var e=function(e,t){return d.throttle(function(){if(!o.isRemoved){var n=b(e,t);e.css(E.toCss(n))}})}(i,o);return c.addEventListener("resize",e),c.addEventListener("orientationchange",e),function(){c.removeEventListener("resize",e),c.removeEventListener("orientationchange",e)}}function h(){function t(t){var n;switch(t.keyCode){case a.KEY_CODE.ESCAPE:o.mdMenuCtrl.close(!1,{closeAll:!0}),n=!0;break;case a.KEY_CODE.UP_ARROW:g(t,o.menuContentEl,o,-1)||o.nestLevel||o.mdMenuCtrl.triggerContainerProxy(t),n=!0;break;case a.KEY_CODE.DOWN_ARROW:g(t,o.menuContentEl,o,1)||o.nestLevel||o.mdMenuCtrl.triggerContainerProxy(t),n=!0;break;case a.KEY_CODE.LEFT_ARROW:o.nestLevel?o.mdMenuCtrl.close():o.mdMenuCtrl.triggerContainerProxy(t),n=!0;break;case a.KEY_CODE.RIGHT_ARROW:var r=e.getClosest(t.target,"MD-MENU");r&&r!=o.parent[0]?t.target.click():o.mdMenuCtrl.triggerContainerProxy(t),n=!0}n&&(t.preventDefault(),t.stopImmediatePropagation())}function r(e){e.preventDefault(),e.stopPropagation(),n.$apply(function(){o.mdMenuCtrl.close(!0,{closeAll:!0})})}function s(t){function r(){n.$apply(function(){o.mdMenuCtrl.close(!0,{closeAll:!0})})}function i(e,t){if(!e)return!1;for(var n,r=0;n=t[r];++r)for(var i,o=[n,"data-"+n,"x-"+n],a=0;i=o[a];++a)if(e.hasAttribute(i))return!0;return!1}var a=t.target;do{if(a==o.menuContentEl[0])return;if((i(a,["ng-click","ng-href","ui-sref"])||"BUTTON"==a.nodeName||"MD-BUTTON"==a.nodeName)&&!i(a,["md-prevent-menu-close"])){var s=e.getClosest(a,"MD-MENU");a.hasAttribute("disabled")||s&&s!=o.parent[0]||r();break}}while(a=a.parentNode)}i.addClass("md-clickable"),o.backdrop&&o.backdrop.on("click",r),o.menuContentEl.on("keydown",t),o.menuContentEl[0].addEventListener("click",s,!0);var c=o.menuContentEl[0].querySelector("[md-menu-focus-target]");if(!c){var l=o.menuContentEl[0].firstElementChild;c=l&&(l.querySelector(".md-button:not([disabled])")||l.firstElementChild)}return c&&c.focus(),function(){i.removeClass("md-clickable"),o.backdrop&&o.backdrop.off("click",r),o.menuContentEl.off("keydown",t),o.menuContentEl[0].removeEventListener("click",s,!0)}}return m(o),r.inherit(o.menuContentEl,o.target),o.cleanupResizing=p(),o.hideBackdrop=f(n,i,o),s().then(function(e){return o.alreadyOpen=!0,o.cleanupInteraction=h(),e})}function g(t,n,r,i){for(var o,a=e.getClosest(t.target,"MD-MENU-ITEM"),s=e.nodesToArray(n[0].children),c=s.indexOf(a),l=c+i;l>=0&&l<s.length;l+=i){var d=s[l].querySelector(".md-button");if(o=v(d))break}return o}function v(e){return e&&-1!=e.getAttribute("tabindex")?(e.focus(),s[0].activeElement==e):void 0}function $(e,t){t.preserveElement?i(e).style.display="none":i(e).parentNode===i(t.parent)&&i(t.parent).removeChild(i(e))}function b(t,r){function i(e){e.top=Math.max(Math.min(e.top,$.bottom-d.offsetHeight),$.top),e.left=Math.max(Math.min(e.left,$.right-d.offsetWidth),$.left)}function a(){for(var e=0;e<u.children.length;++e)if("none"!=c.getComputedStyle(u.children[e]).display)return u.children[e]}var l,d=t[0],u=t[0].firstElementChild,m=u.getBoundingClientRect(),f=s[0].body,p=f.getBoundingClientRect(),h=c.getComputedStyle(u),g=r.target[0].querySelector("[md-menu-origin]")||r.target[0],v=g.getBoundingClientRect(),$={left:p.left+o,top:Math.max(p.top,0)+o,bottom:Math.max(p.bottom,Math.max(p.top,0)+p.height)-o,right:p.right-o},b={top:0,left:0,right:0,bottom:0},E={top:0,left:0,right:0,bottom:0},y=r.mdMenuCtrl.positionMode();("target"==y.top||"target"==y.left||"target-right"==y.left)&&(l=a(),l&&(l=l.firstElementChild||l,l=l.querySelector("[md-menu-align-target]")||l,b=l.getBoundingClientRect(),E={top:parseFloat(d.style.top||0),left:parseFloat(d.style.left||0)}));var M={},C="top ";switch(y.top){case"target":M.top=E.top+v.top-b.top;break;case"cascade":M.top=v.top-parseFloat(h.paddingTop)-g.style.top;break;case"bottom":M.top=v.top+v.height;break;default:throw new Error('Invalid target mode "'+y.top+'" specified for md-menu on Y axis.')}switch(y.left){case"target":M.left=E.left+v.left-b.left,C+="left";break;case"target-right":M.left=v.right-m.width+(m.right-b.right),C+="right";break;case"cascade":var w=v.right+m.width<$.right;M.left=w?v.right-g.style.left:v.left-g.style.left-m.width,C+=w?"left":"right";break;case"left":M.left=v.left,C+="left";break;default:throw new Error('Invalid target mode "'+y.left+'" specified for md-menu on X axis.')}var x=r.mdMenuCtrl.offsets();M.top+=x.top,M.left+=x.left,i(M);var A=Math.round(100*Math.min(v.width/d.offsetWidth,1))/100,k=Math.round(100*Math.min(v.height/d.offsetHeight,1))/100;return{top:Math.round(M.top),left:Math.round(M.left),transform:r.alreadyOpen?n:e.supplant("scale({0},{1})",[A,k]),transformOrigin:C}}var E=e.dom.animator;return{parent:"body",onShow:h,onRemove:p,hasBackdrop:!0,disableParentScroll:!0,skipCompile:!0,preserveScope:!0,skipHide:!0,themable:!0}}function i(e){return e instanceof t.element&&(e=e[0]),e}var o=8;return r.$inject=["$mdUtil","$mdTheming","$mdConstant","$document","$window","$q","$$rAF","$animateCss","$animate"],e("$mdMenu").setDefaults({methods:["target"],options:r})}t.module("material.components.menu").provider("$mdMenu",e),e.$inject=["$$interimElementProvider"]}(),function(){function e(e,n,i,o,a,s,c,l){this.$element=i,this.$attrs=o,this.$mdConstant=a,this.$mdUtil=c,this.$document=s,this.$scope=e,this.$rootScope=n,this.$timeout=l;var d=this;t.forEach(r,function(e){d[e]=t.bind(d,d[e])})}t.module("material.components.menuBar").controller("MenuBarController",e);var r=["handleKeyDown","handleMenuHover","scheduleOpenHoveredMenu","cancelScheduledOpen"];e.$inject=["$scope","$rootScope","$element","$attrs","$mdConstant","$document","$mdUtil","$timeout"],e.prototype.init=function(){var e=this.$element,t=this.$mdUtil,r=this.$scope,i=this,o=[];e.on("keydown",this.handleKeyDown),this.parentToolbar=t.getClosest(e,"MD-TOOLBAR"),o.push(this.$rootScope.$on("$mdMenuOpen",function(t,n){-1!=i.getMenus().indexOf(n[0])&&(e[0].classList.add("md-open"),n[0].classList.add("md-open"),i.currentlyOpenMenu=n.controller("mdMenu"),i.currentlyOpenMenu.registerContainerProxy(i.handleKeyDown),i.enableOpenOnHover())})),o.push(this.$rootScope.$on("$mdMenuClose",function(r,o,a){var s=i.getMenus();if(-1!=s.indexOf(o[0])&&(e[0].classList.remove("md-open"),o[0].classList.remove("md-open")),e[0].contains(o[0])){for(var c=o[0];c&&-1==s.indexOf(c);)c=t.getClosest(c,"MD-MENU",!0);c&&(a.skipFocus||c.querySelector("button:not([disabled])").focus(),i.currentlyOpenMenu=n,i.disableOpenOnHover(),i.setKeyboardMode(!0))}})),r.$on("$destroy",function(){for(;o.length;)o.shift()()}),this.setKeyboardMode(!0)},e.prototype.setKeyboardMode=function(e){e?this.$element[0].classList.add("md-keyboard-mode"):this.$element[0].classList.remove("md-keyboard-mode")},e.prototype.enableOpenOnHover=function(){if(!this.openOnHoverEnabled){this.openOnHoverEnabled=!0;var e;(e=this.parentToolbar)&&(e.dataset.mdRestoreStyle=e.getAttribute("style"),e.style.position="relative",e.style.zIndex=100),t.element(this.getMenus()).on("mouseenter",this.handleMenuHover)}},e.prototype.handleMenuHover=function(e){this.setKeyboardMode(!1),this.openOnHoverEnabled&&this.scheduleOpenHoveredMenu(e)},e.prototype.disableOpenOnHover=function(){if(this.openOnHoverEnabled){this.openOnHoverEnabled=!1;var e;(e=this.parentToolbar)&&e.setAttribute("style",e.dataset.mdRestoreStyle||""),t.element(this.getMenus()).off("mouseenter",this.handleMenuHover)}},e.prototype.scheduleOpenHoveredMenu=function(e){var n=t.element(e.currentTarget),r=n.controller("mdMenu");this.setKeyboardMode(!1),this.scheduleOpenMenu(r)},e.prototype.scheduleOpenMenu=function(e){var t=this,r=this.$timeout;e!=t.currentlyOpenMenu&&(r.cancel(t.pendingMenuOpen),t.pendingMenuOpen=r(function(){t.pendingMenuOpen=n,t.currentlyOpenMenu&&t.currentlyOpenMenu.close(!0,{closeAll:!0}),e.open()},200,!1))},e.prototype.handleKeyDown=function(e){var n=this.$mdConstant.KEY_CODE,r=this.currentlyOpenMenu,i=r&&r.isOpen;this.setKeyboardMode(!0);var o,a,s;switch(e.keyCode){case n.DOWN_ARROW:r?r.focusMenuContainer():this.openFocusedMenu(),o=!0;break;case n.UP_ARROW:r&&r.close(),o=!0;break;case n.LEFT_ARROW:a=this.focusMenu(-1),i&&(s=t.element(a).controller("mdMenu"),this.scheduleOpenMenu(s)),o=!0;break;case n.RIGHT_ARROW:a=this.focusMenu(1),i&&(s=t.element(a).controller("mdMenu"),this.scheduleOpenMenu(s)),o=!0}o&&(e&&e.preventDefault&&e.preventDefault(),e&&e.stopImmediatePropagation&&e.stopImmediatePropagation())},e.prototype.focusMenu=function(e){var t=this.getMenus(),n=this.getFocusedMenuIndex();-1==n&&(n=this.getOpenMenuIndex());var r=!1;return-1==n?n=0:(0>e&&n>0||e>0&&n<t.length-e)&&(n+=e,r=!0),r?(t[n].querySelector("button").focus(),t[n]):void 0},e.prototype.openFocusedMenu=function(){var e=this.getFocusedMenu();e&&t.element(e).controller("mdMenu").open()},e.prototype.getMenus=function(){var e=this.$element;return this.$mdUtil.nodesToArray(e[0].children).filter(function(e){return"MD-MENU"==e.nodeName})},e.prototype.getFocusedMenu=function(){return this.getMenus()[this.getFocusedMenuIndex()]},e.prototype.getFocusedMenuIndex=function(){var e=this.$mdUtil,t=e.getClosest(this.$document[0].activeElement,"MD-MENU");if(!t)return-1;var n=this.getMenus().indexOf(t);return n},e.prototype.getOpenMenuIndex=function(){for(var e=this.getMenus(),t=0;t<e.length;++t)if(e[t].classList.contains("md-open"))return t;return-1}}(),function(){function e(e,n){return{restrict:"E",require:"mdMenuBar",controller:"MenuBarController",compile:function(r,i){return i.ariaRole||r[0].setAttribute("role","menubar"),t.forEach(r[0].children,function(n){if("MD-MENU"==n.nodeName){n.hasAttribute("md-position-mode")||(n.setAttribute("md-position-mode","left bottom"),n.querySelector("button,a").setAttribute("role","menuitem"));var r=e.nodesToArray(n.querySelectorAll("md-menu-content"));t.forEach(r,function(e){e.classList.add("md-menu-bar-menu"),e.classList.add("md-dense"),e.hasAttribute("width")||e.setAttribute("width",5)})}}),function(e,t,r,i){n(e,t),i.init()}}}}t.module("material.components.menuBar").directive("mdMenuBar",e),e.$inject=["$mdUtil","$mdTheming"]}(),function(){function e(){return{restrict:"E",compile:function(e,t){t.role||e[0].setAttribute("role","separator")}}}t.module("material.components.menuBar").directive("mdMenuDivider",e)}(),function(){function e(e,t,n){this.$element=t,this.$attrs=n,this.$scope=e}t.module("material.components.menuBar").controller("MenuItemController",e),e.$inject=["$scope","$element","$attrs"],e.prototype.init=function(e){var t=this.$element,n=this.$attrs;this.ngModel=e,("checkbox"==n.type||"radio"==n.type)&&(this.mode=n.type,this.iconEl=t[0].children[0],this.buttonEl=t[0].children[1],e&&this.initClickListeners())},e.prototype.clearNgAria=function(){var e=this.$element[0],n=["role","tabindex","aria-invalid","aria-checked"];t.forEach(n,function(t){e.removeAttribute(t)})},e.prototype.initClickListeners=function(){function e(){if("radio"==s){var e=a.ngValue?o.$eval(a.ngValue):a.value;return i.$modelValue==e}return i.$modelValue}function n(e){e?l.off("click",d):l.on("click",d)}var r=this,i=this.ngModel,o=this.$scope,a=this.$attrs,s=(this.$element,this.mode);this.handleClick=t.bind(this,this.handleClick);var c=this.iconEl,l=t.element(this.buttonEl),d=this.handleClick;a.$observe("disabled",n),n(a.disabled),i.$render=function(){r.clearNgAria(),e()?(c.style.display="",l.attr("aria-checked","true")):(c.style.display="none",l.attr("aria-checked","false"))},o.$$postDigest(i.$render)},e.prototype.handleClick=function(e){var t,n=this.mode,r=this.ngModel,i=this.$attrs;"checkbox"==n?t=!r.$modelValue:"radio"==n&&(t=i.ngValue?this.$scope.$eval(i.ngValue):i.value),r.$setViewValue(t),r.$render()}}(),function(){function e(){return{require:["mdMenuItem","?ngModel"],priority:210,compile:function(e,n){function r(n,r,i){i=i||e,i instanceof t.element&&(i=i[0]),i.hasAttribute(n)||i.setAttribute(n,r)}function i(t){if(e[0].hasAttribute(t)){var n=e[0].getAttribute(t);a[0].setAttribute(t,n),e[0].removeAttribute(t)}}if("checkbox"==n.type||"radio"==n.type){var o=e[0].textContent,a=t.element('<md-button type="button"></md-button>');a.html(o),a.attr("tabindex","0"),e.html(""),e.append(t.element('<md-icon md-svg-icon="check"></md-icon>')),e.append(a),e[0].classList.add("md-indent"),r("role","checkbox"==n.type?"menuitemcheckbox":"menuitemradio",a),t.forEach(["ng-disabled"],i)}else r("role","menuitem",e[0].querySelector("md-button,button,a"));return function(e,t,n,r){var i=r[0],o=r[1];i.init(o)}},controller:"MenuItemController"}}t.module("material.components.menuBar").directive("mdMenuItem",e)}(),function(){function e(){function e(e,r,i,o){if(o){var a=o.getTabElementIndex(r),s=n(r,"md-tab-body").remove(),c=n(r,"md-tab-label").remove(),l=o.insertTab({scope:e,parent:e.$parent,index:a,element:r,template:s.html(),label:c.html()},a);e.select=e.select||t.noop,e.deselect=e.deselect||t.noop,e.$watch("active",function(e){e&&o.select(l.getIndex())}),e.$watch("disabled",function(){o.refreshIndex()}),e.$watch(function(){return o.getTabElementIndex(r)},function(e){l.index=e,o.updateTabOrder()}),e.$on("$destroy",function(){o.removeTab(l)})}}function n(e,n){for(var r=e[0].children,i=0,o=r.length;o>i;i++){var a=r[i];if(a.tagName===n.toUpperCase())return t.element(a)}return t.element()}return{require:"^?mdTabs",terminal:!0,compile:function(r,i){var o=n(r,"md-tab-label"),a=n(r,"md-tab-body");if(0==o.length&&(o=t.element("<md-tab-label></md-tab-label>"),i.label?o.text(i.label):o.append(r.contents()),0==a.length)){var s=r.contents().detach();a=t.element("<md-tab-body></md-tab-body>"),a.append(s)}return r.append(o),a.html()&&r.append(a),e},scope:{active:"=?mdActive",disabled:"=?ngDisabled",select:"&?mdOnSelect",deselect:"&?mdOnDeselect"}}}t.module("material.components.tabs").directive("mdTab",e)}(),function(){function e(){return{require:"^?mdTabs",link:function(e,t,n,r){r&&r.attachRipple(e,t)}}}t.module("material.components.tabs").directive("mdTabItem",e)}(),function(){function e(){return{terminal:!0}}t.module("material.components.tabs").directive("mdTabLabel",e)}(),function(){function e(e){return{restrict:"A",compile:function(t,n){var r=e(n.mdTabScroll,null,!0);return function(e,t){t.on("mousewheel",function(t){e.$apply(function(){r(e,{$event:t})})})}}}}t.module("material.components.tabs").directive("mdTabScroll",e),e.$inject=["$parse"]}(),function(){function e(e,r,i,o,a,s,c,l,d,u){function m(){ce.selectedIndex=ce.selectedIndex||0,f(),h(),p(),u(r),s.nextTick(function(){re(),Q(),ie(),ce.tabs[ce.selectedIndex]&&ce.tabs[ce.selectedIndex].scope.select(),fe=!0,Y()})}function f(){var e=l.$mdTabsTemplate,n=t.element(de.data);n.html(e),d(n.contents())(ce.parent),delete l.$mdTabsTemplate}function p(){t.element(i).on("resize",O),e.$on("$destroy",$)}function h(){e.$watch("$mdTabsCtrl.selectedIndex",A)}function g(e,t){var n=l.$normalize("md-"+e);t&&W(e,t),l.$observe(n,function(t){ce[e]=t})}function v(e,t){function n(t){ce[e]="false"!==t}var r=l.$normalize("md-"+e);t&&W(e,t),l.hasOwnProperty(r)&&n(l[r]),l.$observe(r,n)}function $(){me=!0,t.element(i).off("resize",O)}function b(e){t.element(de.wrapper).toggleClass("md-stretch-tabs",B()),ie()}function E(e){ce.shouldCenterTabs=U()}function y(e,t){e!==t&&s.nextTick(ce.updateInkBarStyles);
}function M(e,t){e!==t&&(ce.maxTabWidth=G(),ce.shouldCenterTabs=U(),s.nextTick(function(){ce.maxTabWidth=G(),Q(ce.selectedIndex)}))}function C(e){r[e?"removeClass":"addClass"]("md-no-tab-content")}function w(n){var r=ce.shouldCenterTabs?"":"-"+n+"px";t.element(de.paging).css(o.CSS.TRANSFORM,"translate3d("+r+", 0, 0)"),e.$broadcast("$mdTabsPaginationChanged")}function x(e,t){e!==t&&de.tabs[e]&&(Q(),J())}function A(t,n){t!==n&&(ce.selectedIndex=z(t),ce.lastSelectedIndex=n,ce.updateInkBarStyles(),re(),Q(t),e.$broadcast("$mdTabsChanged"),ce.tabs[n]&&ce.tabs[n].scope.deselect(),ce.tabs[t]&&ce.tabs[t].scope.select())}function k(e){var t=r[0].getElementsByTagName("md-tab");return Array.prototype.indexOf.call(t,e[0])}function T(){T.watcher||(T.watcher=e.$watch(function(){s.nextTick(function(){T.watcher&&r.prop("offsetParent")&&(T.watcher(),T.watcher=null,O())},!1)}))}function S(e){switch(e.keyCode){case o.KEY_CODE.LEFT_ARROW:e.preventDefault(),Z(-1,!0);break;case o.KEY_CODE.RIGHT_ARROW:e.preventDefault(),Z(1,!0);break;case o.KEY_CODE.SPACE:case o.KEY_CODE.ENTER:e.preventDefault(),le||(ce.selectedIndex=ce.focusIndex)}ce.lastClick=!1}function N(e){le||(ce.focusIndex=ce.selectedIndex=e),ce.lastClick=!0,s.nextTick(function(){ce.tabs[e].element.triggerHandler("click")},!1)}function _(e){ce.shouldPaginate&&(e.preventDefault(),ce.offsetLeft=ae(ce.offsetLeft-e.wheelDelta))}function D(){var e,t,n=de.canvas.clientWidth,r=n+ce.offsetLeft;for(e=0;e<de.tabs.length&&(t=de.tabs[e],!(t.offsetLeft+t.offsetWidth>r));e++);ce.offsetLeft=ae(t.offsetLeft)}function H(){var e,t;for(e=0;e<de.tabs.length&&(t=de.tabs[e],!(t.offsetLeft+t.offsetWidth>=ce.offsetLeft));e++);ce.offsetLeft=ae(t.offsetLeft+t.offsetWidth-de.canvas.clientWidth)}function O(){ce.lastSelectedIndex=ce.selectedIndex,ce.offsetLeft=ae(ce.offsetLeft),s.nextTick(function(){ce.updateInkBarStyles(),Y()})}function I(e){t.element(de.inkBar).toggleClass("ng-hide",e)}function R(e){r.toggleClass("md-dynamic-height",e)}function P(e){if(!me){var t=ce.selectedIndex,n=ce.tabs.splice(e.getIndex(),1)[0];ne(),ce.selectedIndex===t&&(n.scope.deselect(),ce.tabs[ce.selectedIndex]&&ce.tabs[ce.selectedIndex].scope.select()),s.nextTick(function(){Y(),ce.offsetLeft=ae(ce.offsetLeft)})}}function L(e,n){var r=fe,i={getIndex:function(){return ce.tabs.indexOf(o)},isActive:function(){return this.getIndex()===ce.selectedIndex},isLeft:function(){return this.getIndex()<ce.selectedIndex},isRight:function(){return this.getIndex()>ce.selectedIndex},shouldRender:function(){return!ce.noDisconnect||this.isActive()},hasFocus:function(){return!ce.lastClick&&ce.hasFocus&&this.getIndex()===ce.focusIndex},id:s.nextUid()},o=t.extend(i,e);return t.isDefined(n)?ce.tabs.splice(n,0,o):ce.tabs.push(o),ee(),te(),s.nextTick(function(){Y(),r&&ce.autoselect&&s.nextTick(function(){s.nextTick(function(){N(ce.tabs.indexOf(o))})})}),o}function F(){var e={};return e.wrapper=r[0].getElementsByTagName("md-tabs-wrapper")[0],e.data=r[0].getElementsByTagName("md-tab-data")[0],e.canvas=e.wrapper.getElementsByTagName("md-tabs-canvas")[0],e.paging=e.canvas.getElementsByTagName("md-pagination-wrapper")[0],e.tabs=e.paging.getElementsByTagName("md-tab-item"),e.dummies=e.canvas.getElementsByTagName("md-dummy-tab"),e.inkBar=e.paging.getElementsByTagName("md-ink-bar")[0],e.contentsWrapper=r[0].getElementsByTagName("md-tabs-content-wrapper")[0],e.contents=e.contentsWrapper.getElementsByTagName("md-tab-content"),e}function j(){return ce.offsetLeft>0}function V(){var e=de.tabs[de.tabs.length-1];return e&&e.offsetLeft+e.offsetWidth>de.canvas.clientWidth+ce.offsetLeft}function B(){switch(ce.stretchTabs){case"always":return!0;case"never":return!1;default:return!ce.shouldPaginate&&i.matchMedia("(max-width: 600px)").matches}}function U(){return ce.centerTabs&&!ce.shouldPaginate}function q(){if(ce.noPagination||!fe)return!1;var e=r.prop("clientWidth");return t.forEach(F().dummies,function(t){e-=t.offsetWidth}),0>e}function z(e){if(-1===e)return-1;var t,n,r=Math.max(ce.tabs.length-e,e);for(t=0;r>=t;t++){if(n=ce.tabs[e+t],n&&n.scope.disabled!==!0)return n.getIndex();if(n=ce.tabs[e-t],n&&n.scope.disabled!==!0)return n.getIndex()}return e}function W(e,t,n){Object.defineProperty(ce,e,{get:function(){return n},set:function(e){var r=n;n=e,t&&t(e,r)}})}function Y(){B()||K(),ce.maxTabWidth=G(),ce.shouldPaginate=q()}function K(){var e=1;t.forEach(F().dummies,function(t){e+=Math.ceil(t.offsetWidth)}),t.element(de.paging).css("width",e+"px")}function G(){return r.prop("clientWidth")}function X(){var e=ce.tabs[ce.selectedIndex],t=ce.tabs[ce.focusIndex];ce.tabs=ce.tabs.sort(function(e,t){return e.index-t.index}),ce.selectedIndex=ce.tabs.indexOf(e),ce.focusIndex=ce.tabs.indexOf(t)}function Z(e,t){var n,r=t?"focusIndex":"selectedIndex",i=ce[r];for(n=i+e;ce.tabs[n]&&ce.tabs[n].scope.disabled;n+=e);ce.tabs[n]&&(ce[r]=n)}function J(){F().dummies[ce.focusIndex].focus()}function Q(e){if(null==e&&(e=ce.focusIndex),de.tabs[e]&&!ce.shouldCenterTabs){var t=de.tabs[e],n=t.offsetLeft,r=t.offsetWidth+n;ce.offsetLeft=Math.max(ce.offsetLeft,ae(r-de.canvas.clientWidth+64)),ce.offsetLeft=Math.min(ce.offsetLeft,ae(n))}}function ee(){ue.forEach(function(e){s.nextTick(e)}),ue=[]}function te(){var e=!1;t.forEach(ce.tabs,function(t){t.template&&(e=!0)}),ce.hasContent=e}function ne(){ce.selectedIndex=z(ce.selectedIndex),ce.focusIndex=z(ce.focusIndex)}function re(){if(!ce.dynamicHeight)return r.css("height","");if(!ce.tabs.length)return ue.push(re);var e=de.contents[ce.selectedIndex],t=e?e.offsetHeight:0,i=de.wrapper.offsetHeight,o=t+i,a=r.prop("clientHeight");if(a!==o){"bottom"===r.attr("md-align-tabs")&&(a-=i,o-=i,r.attr("md-border-bottom")!==n&&++a),le=!0;var l={height:a+"px"},d={height:o+"px"};r.css(l),c(r,{from:l,to:d,easing:"cubic-bezier(0.35, 0, 0.25, 1)",duration:.5}).start().done(function(){r.css({transition:"none",height:""}),s.nextTick(function(){r.css("transition","")}),le=!1})}}function ie(){if(!de.tabs[ce.selectedIndex])return void t.element(de.inkBar).css({left:"auto",right:"auto"});if(!ce.tabs.length)return ue.push(ce.updateInkBarStyles);if(!r.prop("offsetParent"))return T();var e,n=ce.selectedIndex,i=de.paging.offsetWidth,o=de.tabs[n],a=o.offsetLeft,c=i-a-o.offsetWidth;ce.shouldCenterTabs&&(e=Array.prototype.slice.call(de.tabs).reduce(function(e,t){return e+t.offsetWidth},0),i>e&&s.nextTick(ie,!1)),oe(),t.element(de.inkBar).css({left:a+"px",right:c+"px"})}function oe(){var e=ce.selectedIndex,n=ce.lastSelectedIndex,r=t.element(de.inkBar);t.isNumber(n)&&r.toggleClass("md-left",n>e).toggleClass("md-right",e>n)}function ae(e){if(!de.tabs.length||!ce.shouldPaginate)return 0;var t=de.tabs[de.tabs.length-1],n=t.offsetLeft+t.offsetWidth;return e=Math.max(0,e),e=Math.min(n-de.canvas.clientWidth,e)}function se(e,n){var r={colorElement:t.element(de.inkBar)};a.attach(e,n,r)}var ce=this,le=!1,de=F(),ue=[],me=!1,fe=!1;g("stretchTabs",b),W("focusIndex",x,ce.selectedIndex||0),W("offsetLeft",w,0),W("hasContent",C,!1),W("maxTabWidth",y,G()),W("shouldPaginate",M,!1),v("noInkBar",I),v("dynamicHeight",R),v("noPagination"),v("swipeContent"),v("noDisconnect"),v("autoselect"),v("centerTabs",E,!1),v("enableDisconnect"),ce.scope=e,ce.parent=e.$parent,ce.tabs=[],ce.lastSelectedIndex=null,ce.hasFocus=!1,ce.lastClick=!0,ce.shouldCenterTabs=U(),ce.updatePagination=s.debounce(Y,100),ce.redirectFocus=J,ce.attachRipple=se,ce.insertTab=L,ce.removeTab=P,ce.select=N,ce.scroll=_,ce.nextPage=D,ce.previousPage=H,ce.keydown=S,ce.canPageForward=V,ce.canPageBack=j,ce.refreshIndex=ne,ce.incrementIndex=Z,ce.getTabElementIndex=k,ce.updateInkBarStyles=s.debounce(ie,100),ce.updateTabOrder=s.debounce(X,100),m()}t.module("material.components.tabs").controller("MdTabsController",e),e.$inject=["$scope","$element","$window","$mdConstant","$mdTabInkRipple","$mdUtil","$animateCss","$attrs","$compile","$mdTheming"]}(),function(){function e(){return{scope:{selectedIndex:"=?mdSelected"},template:function(e,t){return t.$mdTabsTemplate=e.html(),'<md-tabs-wrapper> <md-tab-data></md-tab-data> <md-prev-button tabindex="-1" role="button" aria-label="Previous Page" aria-disabled="{{!$mdTabsCtrl.canPageBack()}}" ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }" ng-if="$mdTabsCtrl.shouldPaginate" ng-click="$mdTabsCtrl.previousPage()"> <md-icon md-svg-icon="md-tabs-arrow"></md-icon> </md-prev-button> <md-next-button tabindex="-1" role="button" aria-label="Next Page" aria-disabled="{{!$mdTabsCtrl.canPageForward()}}" ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }" ng-if="$mdTabsCtrl.shouldPaginate" ng-click="$mdTabsCtrl.nextPage()"> <md-icon md-svg-icon="md-tabs-arrow"></md-icon> </md-next-button> <md-tabs-canvas tabindex="{{ $mdTabsCtrl.hasFocus ? -1 : 0 }}" aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}" ng-focus="$mdTabsCtrl.redirectFocus()" ng-class="{ \'md-paginated\': $mdTabsCtrl.shouldPaginate, \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" ng-keydown="$mdTabsCtrl.keydown($event)" role="tablist"> <md-pagination-wrapper ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" md-tab-scroll="$mdTabsCtrl.scroll($event)"> <md-tab-item tabindex="-1" class="md-tab" style="max-width: {{ $mdTabsCtrl.maxTabWidth + \'px\' }}" ng-repeat="tab in $mdTabsCtrl.tabs" role="tab" aria-controls="tab-content-{{::tab.id}}" aria-selected="{{tab.isActive()}}" aria-disabled="{{tab.scope.disabled || \'false\'}}" ng-click="$mdTabsCtrl.select(tab.getIndex())" ng-class="{ \'md-active\':    tab.isActive(), \'md-focused\':   tab.hasFocus(), \'md-disabled\':  tab.scope.disabled }" ng-disabled="tab.scope.disabled" md-swipe-left="$mdTabsCtrl.nextPage()" md-swipe-right="$mdTabsCtrl.previousPage()" md-tabs-template="::tab.label" md-scope="::tab.parent"></md-tab-item> <md-ink-bar></md-ink-bar> </md-pagination-wrapper> <div class="md-visually-hidden md-dummy-wrapper"> <md-dummy-tab class="md-tab" tabindex="-1" id="tab-item-{{::tab.id}}" role="tab" aria-controls="tab-content-{{::tab.id}}" aria-selected="{{tab.isActive()}}" aria-disabled="{{tab.scope.disabled || \'false\'}}" ng-focus="$mdTabsCtrl.hasFocus = true" ng-blur="$mdTabsCtrl.hasFocus = false" ng-repeat="tab in $mdTabsCtrl.tabs" md-tabs-template="::tab.label" md-scope="::tab.parent"></md-dummy-tab> </div> </md-tabs-canvas> </md-tabs-wrapper> <md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent && $mdTabsCtrl.selectedIndex >= 0"> <md-tab-content id="tab-content-{{::tab.id}}" role="tabpanel" aria-labelledby="tab-item-{{::tab.id}}" md-swipe-left="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(1)" md-swipe-right="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(-1)" ng-if="$mdTabsCtrl.hasContent" ng-repeat="(index, tab) in $mdTabsCtrl.tabs" ng-class="{ \'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null, \'md-active\':        tab.isActive(), \'md-left\':          tab.isLeft(), \'md-right\':         tab.isRight(), \'md-no-scroll\':     $mdTabsCtrl.dynamicHeight }"> <div md-tabs-template="::tab.template" md-connected-if="tab.isActive()" md-scope="::tab.parent" ng-if="$mdTabsCtrl.enableDisconnect || tab.shouldRender()"></div> </md-tab-content> </md-tabs-content-wrapper>'},controller:"MdTabsController",controllerAs:"$mdTabsCtrl",bindToController:!0}}t.module("material.components.tabs").directive("mdTabs",e)}(),function(){function e(e,t){function n(n,r,i,o){function a(){n.$watch("connected",function(e){e===!1?s():c()}),n.$on("$destroy",c)}function s(){o.enableDisconnect&&t.disconnectScope(l)}function c(){o.enableDisconnect&&t.reconnectScope(l)}if(o){var l=o.enableDisconnect?n.compileScope.$new():n.compileScope;return r.html(n.template),e(r.contents())(l),r.on("DOMSubtreeModified",function(){o.updatePagination(),o.updateInkBarStyles()}),t.nextTick(a)}}return{restrict:"A",link:n,scope:{template:"=mdTabsTemplate",connected:"=?mdConnectedIf",compileScope:"=mdScope"},require:"^?mdTabs"}}t.module("material.components.tabs").directive("mdTabsTemplate",e),e.$inject=["$compile","$mdUtil"]}(),function(){t.module("material.core").constant("$MD_THEME_CSS","md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions-container.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions-container.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions-container.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }md-backdrop {  background-color: '{{background-900-0.0}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme {    background-color: '{{background-900-1.0}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]):hover,.md-button.md-THEME_NAME-theme:not([disabled]):hover {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused,.md-button.md-THEME_NAME-theme:not([disabled]).md-focused {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover,.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {  background-color: transparent; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab md-icon,  .md-button.md-THEME_NAME-theme.md-fab md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-primary,.md-button.md-THEME_NAME-theme.md-primary {  color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab,  .md-button.md-THEME_NAME-theme.md-primary.md-raised,  .md-button.md-THEME_NAME-theme.md-primary.md-fab {    color: '{{primary-contrast}}';    background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {      color: '{{primary-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {      background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {      background-color: '{{primary-600}}'; }  a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {    color: '{{primary-color}}'; }a.md-button.md-THEME_NAME-theme.md-fab,.md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-raised,.md-button.md-THEME_NAME-theme.md-raised {  color: '{{background-900}}';  background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {    color: '{{background-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {    background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused,  .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {    background-color: '{{background-200}}'; }a.md-button.md-THEME_NAME-theme.md-warn,.md-button.md-THEME_NAME-theme.md-warn {  color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab,  .md-button.md-THEME_NAME-theme.md-warn.md-raised,  .md-button.md-THEME_NAME-theme.md-warn.md-fab {    color: '{{warn-contrast}}';    background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {      color: '{{warn-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {      background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {      background-color: '{{warn-700}}'; }  a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {    color: '{{warn-color}}'; }a.md-button.md-THEME_NAME-theme.md-accent,.md-button.md-THEME_NAME-theme.md-accent {  color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab,  .md-button.md-THEME_NAME-theme.md-accent.md-raised,  .md-button.md-THEME_NAME-theme.md-accent.md-fab {    color: '{{accent-contrast}}';    background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused,    .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {      background-color: '{{accent-700}}'; }  a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon,  .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {    color: '{{accent-color}}'; }a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled],.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-accent[disabled],.md-button.md-THEME_NAME-theme.md-warn[disabled] {  color: '{{foreground-3}}' !important;  cursor: default; }  a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon,  .md-button.md-THEME_NAME-theme[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon,  .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {    color: '{{foreground-3}}'; }a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled],.md-button.md-THEME_NAME-theme.md-raised[disabled],.md-button.md-THEME_NAME-theme.md-fab[disabled] {  background-color: '{{foreground-4}}'; }a.md-button.md-THEME_NAME-theme[disabled],.md-button.md-THEME_NAME-theme[disabled] {  background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }  md-card.md-THEME_NAME-theme md-card-header md-card-avatar md-icon {    color: '{{background-color}}';    background-color: '{{foreground-3}}'; }  md-card.md-THEME_NAME-theme md-card-header md-card-header-text .md-subhead {    color: '{{foreground-2}}'; }  md-card.md-THEME_NAME-theme md-card-title md-card-title-text:not(:only-child) .md-subhead {    color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{accent-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{primary-contrast-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ink-ripple {  color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-content.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }/** Theme styles for mdCalendar. */.md-calendar.md-THEME_NAME-theme {  color: '{{foreground-1}}'; }  .md-calendar.md-THEME_NAME-theme tr:last-child td {    border-bottom-color: '{{background-200}}'; }.md-THEME_NAME-theme .md-calendar-day-header {  background: '{{background-hue-1}}';  color: '{{foreground-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today .md-calendar-date-selection-indicator {  border: 1px solid '{{primary-500}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today.md-calendar-date-disabled {  color: '{{primary-500-0.6}}'; }.md-THEME_NAME-theme .md-calendar-date.md-focus .md-calendar-date-selection-indicator {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date-selection-indicator:hover {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-selected-date .md-calendar-date-selection-indicator,.md-THEME_NAME-theme .md-calendar-date.md-focus.md-calendar-selected-date .md-calendar-date-selection-indicator {  background: '{{primary-500}}';  color: '{{primary-500-contrast}}';  border-color: transparent; }.md-THEME_NAME-theme .md-calendar-date-disabled,.md-THEME_NAME-theme .md-calendar-month-label-disabled {  color: '{{foreground-3}}'; }/** Theme styles for mdDatepicker. */md-datepicker.md-THEME_NAME-theme {  background: '{{background-color}}'; }.md-THEME_NAME-theme .md-datepicker-input {  color: '{{background-contrast}}';  background: '{{background-color}}'; }  .md-THEME_NAME-theme .md-datepicker-input::-webkit-input-placeholder, .md-THEME_NAME-theme .md-datepicker-input::-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }.md-THEME_NAME-theme .md-datepicker-input-container {  border-bottom-color: '{{background-300}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-focused {    border-bottom-color: '{{primary-500}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-invalid {    border-bottom-color: '{{warn-A700}}'; }.md-THEME_NAME-theme .md-datepicker-calendar-pane {  border-color: '{{background-300}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button .md-datepicker-expand-triangle {  border-top-color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button:hover .md-datepicker-expand-triangle {  border-top-color: '{{foreground-2}}'; }.md-THEME_NAME-theme .md-datepicker-open .md-datepicker-calendar-icon {  fill: '{{primary-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar,.md-THEME_NAME-theme .md-datepicker-input-mask-opaque {  background: '{{background-color}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions, md-dialog.md-THEME_NAME-theme.md-content-overflow md-dialog-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }.layout-row > md-divider.md-THEME_NAME-theme {  border-right-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: \"{{foreground-3}}\"; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label,md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-messages] :not(.md-char-counter),md-input-container.md-THEME_NAME-theme ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme data-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme x-ng-message :not(.md-char-counter),md-input-container.md-THEME_NAME-theme [ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message] :not(.md-char-counter),md-input-container.md-THEME_NAME-theme [ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message-exp] :not(.md-char-counter) {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message,md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message],md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message-exp],md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-A700}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled],md-input-container.md-THEME_NAME-theme .md-input [disabled] {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p,md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > .md-avatar-icon {  background-color: '{{foreground-3}}';  color: '{{background-color}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-menu-bar.md-THEME_NAME-theme > button.md-button {  color: '{{foreground-2}}';  border-radius: 2px; }md-menu-bar.md-THEME_NAME-theme md-menu.md-open > button, md-menu-bar.md-THEME_NAME-theme md-menu > button:focus {  outline: none;  background: '{{background-200}}'; }md-menu-bar.md-THEME_NAME-theme.md-open:not(.md-keyboard-mode) md-menu:hover > button {  background-color: '{{ background-500-0.2}}'; }md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:hover,md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:focus {  background: transparent; }md-menu-content.md-THEME_NAME-theme .md-menu > .md-button:after {  color: '{{foreground-2}}'; }md-menu-content.md-THEME_NAME-theme .md-menu.md-open > .md-button {  background-color: '{{ background-500-0.2}}'; }md-toolbar.md-THEME_NAME-theme.md-menu-toolbar {  background-color: '{{background-color}}';  color: '{{foreground-1}}'; }  md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler {    background-color: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler md-icon {      color: '{{primary-contrast}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient(\"{{warn-100}}\" 0%, \"{{warn-100}}\" 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient(\"{{accent-100}}\" 0%, \"{{accent-100}}\" 16%, transparent 42%); }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple,md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled],md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on,  md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme .md-checked .md-ink-ripple {  color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-primary .md-checked:not([disabled]) .md-ink-ripple, md-radio-group.md-THEME_NAME-theme .md-checked:not([disabled]).md-primary .md-ink-ripple {  color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme .md-checked.md-primary .md-ink-ripple {  color: '{{warn-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-primary .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty).md-warn .md-checked .md-container:before,md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-warn .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  border-bottom-color: transparent;  background-image: linear-gradient(to right, \"{{foreground-3}}\" 0%, \"{{foreground-3}}\" 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, \"{{foreground-3}}\" 100%); }md-select.md-THEME_NAME-theme .md-select-value {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-value {  color: '{{warn-A700}}' !important;  border-bottom-color: '{{warn-A700}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value.md-select-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-value {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-value {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-option[disabled] {  color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([disabled]):not([selected]) {  background: '{{background-200}}'; }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-focus-ring {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-focus-ring {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-ink-ripple {  color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-ink-ripple {  color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-ink-ripple {  color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled], md-tabs.md-THEME_NAME-theme .md-tab[disabled] md-icon {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-active md-icon, md-tabs.md-THEME_NAME-theme .md-tab.md-focused, md-tabs.md-THEME_NAME-theme .md-tab.md-focused md-icon {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{primary-contrast}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{accent-contrast}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active md-icon, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused md-icon {      color: '{{warn-contrast}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toast.md-THEME_NAME-theme .md-toast-content {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-toast-content .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-toast-content .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) .md-button:not(.md-raised) {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-content {    background-color: '{{foreground-2}}'; }");
}()}(window,window.angular),window.ngMaterial={version:{full:"1.0.2"}};
//# sourceMappingURL=data:application/json;base64,
